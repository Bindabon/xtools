/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/css/_mixins.scss":
/*!*********************************!*\
  !*** ./assets/css/_mixins.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/_rtl.scss":
/*!******************************!*\
  !*** ./assets/css/_rtl.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/about.scss":
/*!*******************************!*\
  !*** ./assets/css/about.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/application.scss":
/*!*************************************!*\
  !*** ./assets/css/application.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/articleinfo.scss":
/*!*************************************!*\
  !*** ./assets/css/articleinfo.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/autoedits.scss":
/*!***********************************!*\
  !*** ./assets/css/autoedits.scss ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/blame.scss":
/*!*******************************!*\
  !*** ./assets/css/blame.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/categoryedits.scss":
/*!***************************************!*\
  !*** ./assets/css/categoryedits.scss ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/editcounter.scss":
/*!*************************************!*\
  !*** ./assets/css/editcounter.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/home.scss":
/*!******************************!*\
  !*** ./assets/css/home.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/meta.scss":
/*!******************************!*\
  !*** ./assets/css/meta.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/pages.scss":
/*!*******************************!*\
  !*** ./assets/css/pages.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/css/topedits.scss":
/*!**********************************!*\
  !*** ./assets/css/topedits.scss ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/js/adminstats.js":
/*!*********************************!*\
  !*** ./assets/js/adminstats.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

xtools.adminstats = {};
$(function () {
  var $projectInput = $('#project_input'),
      lastProject = $projectInput.val(); // Don't do anything if this isn't an Admin Stats page.

  if ($('body.adminstats, body.patrollerstats, body.stewardstats').length === 0) {
    return;
  }

  xtools.application.setupMultiSelectListeners();
  $('.group-selector').on('change', function () {
    $('.action-selector').addClass('hidden');
    $('.action-selector--' + $(this).val()).removeClass('hidden'); // Update title of form.

    $('.xt-page-title--title').text($.i18n('tool-' + $(this).val() + 'stats'));
    $('.xt-page-title--desc').text($.i18n('tool-' + $(this).val() + 'stats-desc'));
    var title = $.i18n('tool-' + $(this).val() + 'stats') + ' - ' + $.i18n('xtools-title');
    document.title = title;
    history.replaceState({}, title, '/' + $(this).val() + 'stats'); // Change project to Meta if it's Steward Stats.

    if ('steward' === $(this).val()) {
      lastProject = $projectInput.val();
      $projectInput.val('meta.wikimedia.org');
    } else {
      $projectInput.val(lastProject);
    }

    xtools.application.setupMultiSelectListeners();
  });
});

/***/ }),

/***/ "./assets/js/application.js":
/*!**********************************!*\
  !*** ./assets/js/application.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.array.sort */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.date.now */ "./node_modules/core-js/modules/es.date.now.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.bind */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.parse-float */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.search */ "./node_modules/core-js/modules/es.string.search.js");

__webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");

xtools = {};
xtools.application = {};
xtools.application.vars = {
  sectionOffset: {}
};
/** global: i18nLang */

/** global: i18nPaths */

$.i18n({
  locale: i18nLang
}).load(i18nPaths);
$(function () {
  // The $() around this code apparently isn't enough for Webpack, need another document-ready check.
  $(document).ready(function () {
    // TODO: move these listeners to a setup function and document how to use it.
    $('.xt-hide').on('click', function () {
      $(this).hide();
      $(this).siblings('.xt-show').show();

      if ($(this).parents('.panel-heading').length) {
        $(this).parents('.panel-heading').siblings('.panel-body').hide();
      } else {
        $(this).parents('.xt-show-hide--parent').next('.xt-show-hide--target').hide();
      }
    });
    $('.xt-show').on('click', function () {
      $(this).hide();
      $(this).siblings('.xt-hide').show();

      if ($(this).parents('.panel-heading').length) {
        $(this).parents('.panel-heading').siblings('.panel-body').show();
      } else {
        $(this).parents('.xt-show-hide--parent').next('.xt-show-hide--target').show();
      }
    });
    setupNavCollapsing();
    xtools.application.setupColumnSorting();
    xtools.application.setupCopyLinks();
    setupTOC();
    setupStickyHeader();
    setupProjectListener();
    setupAutocompletion();
    displayWaitingNoticeOnSubmission();
  }); // Re-init forms, workaround for issues with Safari and Firefox.
  // See displayWaitingNoticeOnSubmission() for more.

  window.onpageshow = function (e) {
    if (e.persisted) {
      displayWaitingNoticeOnSubmission(true);
    }
  };
});
/**
 * Script to make interactive toggle table and pie chart.
 * For visual example, see the "Semi-automated edits" section of the AutoEdits tool.
 *
 * Example usage (see autoEdits/result.html.twig and js/autoedits.js for more):
 *     <table class="table table-bordered table-hover table-striped toggle-table">
 *         <thead>...</thead>
 *         <tbody>
 *             {% for tool, values in semi_automated %}
 *             <tr>
 *                 <!-- use the 'linked' class here because the cell contains a link -->
 *                 <td class="sort-entry--tool linked" data-value="{{ tool }}">
 *                     <span class="toggle-table--toggle" data-index="{{ loop.index0 }}" data-key="{{ tool }}">
 *                         <span class="glyphicon glyphicon-remove"></span>
 *                         <span class="color-icon" style="background:{{ chartColor(loop.index0) }}"></span>
 *                     </span>
 *                     {{ wiki.pageLink(...) }}
 *                 </td>
 *                 <td class="sort-entry--count" data-value="{{ values.count }}">
 *                     {{ values.count }}
 *                 </td>
 *             </tr>
 *             {% endfor %}
 *             ...
 *         </tbody>
 *     </table>
 *     <div class="toggle-table--chart">
 *         <canvas id="tool_chart" width="400" height="400"></canvas>
 *     </div>
 *     <script>
 *         window.toolsChart = new Chart($('#tool_chart'), { ... });
 *         window.countsByTool = {{ semi_automated | json_encode() | raw }};
 *         ...
 *
 *         // See autoedits.js for more
 *         xtools.application.setupToggleTable(window.countsByTool, window.toolsChart, 'count', function (newData) {
 *             // update the totals in toggle table based on newData
 *         });
 *     </script>
 *
 * @param  {Object}      dataSource  Object of data that makes up the chart
 * @param  {Chart}       chartObj    Reference to the pie chart associated with the .toggle-table
 * @param  {String|null} [valueKey]  The name of the key within entries of dataSource, where the value is
 *                                   what's shown in the chart. If omitted or null, `dataSource` is assumed
 *                                   to be of the structure: { 'a' => 123, 'b' => 456 }
 * @param  {Function} updateCallback Callback to update the .toggle-table totals. `toggleTableData`
 *                                   is passed in which contains the new data, you just need to
 *                                   format it (maybe need to use i18n, update multiple cells, etc.).
 *                                   The second parameter that is passed back is the 'key' of the toggled
 *                                   item, and the third is the index of the item.
 */

xtools.application.setupToggleTable = function (dataSource, chartObj, valueKey, updateCallback) {
  var toggleTableData;
  $('.toggle-table').on('click', '.toggle-table--toggle', function () {
    if (!toggleTableData) {
      // must be cloned
      toggleTableData = Object.assign({}, dataSource);
    }

    var index = $(this).data('index'),
        key = $(this).data('key'); // must use .attr instead of .prop as sorting script will clone DOM elements

    if ($(this).attr('data-disabled') === 'true') {
      toggleTableData[key] = dataSource[key];
      chartObj.data.datasets[0].data[index] = parseInt(valueKey ? toggleTableData[key][valueKey] : toggleTableData[key], 10);
      $(this).attr('data-disabled', 'false');
    } else {
      delete toggleTableData[key];
      chartObj.data.datasets[0].data[index] = null;
      $(this).attr('data-disabled', 'true');
    } // gray out row in table


    $(this).parents('tr').toggleClass('excluded'); // change the hover icon from a 'x' to a '+'

    $(this).find('.glyphicon').toggleClass('glyphicon-remove').toggleClass('glyphicon-plus'); // update stats

    updateCallback(toggleTableData, key, index);
    chartObj.update();
  });
};
/**
 * If there are more tool links in the nav than will fit in the viewport, move the last entry to the More menu,
 * one at a time, until it all fits. This does not listen for window resize events.
 */


function setupNavCollapsing() {
  var windowWidth = $(window).width(),
      toolNavWidth = $('.tool-links').outerWidth(),
      navRightWidth = $('.nav-buttons').outerWidth(); // Ignore if in mobile responsive view

  if (windowWidth < 768) {
    return;
  } // Do this first so we account for the space the More menu takes up


  if (toolNavWidth + navRightWidth > windowWidth) {
    $('.tool-links--more').removeClass('hidden');
  } // Don't loop more than there are links in the nav.
  // This more just a safeguard against an infinite loop should something go wrong.


  var numLinks = $('.tool-links--entry').length;

  while (numLinks > 0 && toolNavWidth + navRightWidth > windowWidth) {
    // Remove the last tool link that is not the current tool being used
    var $link = $('.tool-links--nav > .tool-links--entry:not(.active)').last().remove();
    $('.tool-links--more .dropdown-menu').append($link);
    toolNavWidth = $('.tool-links').outerWidth();
    numLinks--;
  }
}
/**
 * Sorting of columns.
 *
 *  Example usage:
 *   {% for key in ['username', 'edits', 'minor', 'date'] %}
 *      <th>
 *         <span class="sort-link sort-link--{{ key }}" data-column="{{ key }}">
 *            {{ msg(key) | capitalize }}
 *            <span class="glyphicon glyphicon-sort"></span>
 *         </span>
 *      </th>
 *  {% endfor %}
 *   <th class="sort-link" data-column="username">Username</th>
 *   ...
 *   <td class="sort-entry--username" data-value="{{ username }}">{{ username }}</td>
 *   ...
 *
 * Data type is automatically determined, with support for integer,
 *   floats, and strings, including date strings (e.g. "2016-01-01 12:59")
 */


xtools.application.setupColumnSorting = function () {
  var sortDirection, sortColumn;
  $('.sort-link').on('click', function () {
    sortDirection = sortColumn === $(this).data('column') ? -sortDirection : 1;
    $('.sort-link .glyphicon').removeClass('glyphicon-sort-by-alphabet-alt glyphicon-sort-by-alphabet').addClass('glyphicon-sort');
    var newSortClassName = sortDirection === 1 ? 'glyphicon-sort-by-alphabet-alt' : 'glyphicon-sort-by-alphabet';
    $(this).find('.glyphicon').addClass(newSortClassName).removeClass('glyphicon-sort');
    sortColumn = $(this).data('column');
    var $table = $(this).parents('table');
    var $entries = $table.find('.sort-entry--' + sortColumn).parent();

    if (!$entries.length) {
      return;
    }

    $entries.sort(function (a, b) {
      var before = $(a).find('.sort-entry--' + sortColumn).data('value'),
          after = $(b).find('.sort-entry--' + sortColumn).data('value'); // Cast numerical strings into floats for faster sorting.

      if (!isNaN(before)) {
        before = parseFloat(before, 10);
        after = parseFloat(after, 10);
      }

      if (before < after) {
        return sortDirection;
      } else if (before > after) {
        return -sortDirection;
      } else {
        return 0;
      }
    }); // Re-fill the rank column, if applicable.

    if ($('.sort-entry--rank').length > 0) {
      $.each($entries, function (index, entry) {
        $(entry).find('.sort-entry--rank').text(index + 1);
      });
    }

    $table.find('tbody').html($entries);
  });
};
/**
 * Floating table of contents.
 *
 * Example usage (see articleInfo/result.html.twig for more):
 *     <p class="text-center xt-heading-subtitle">
 *         ...
 *     </p>
 *     <div class="text-center xt-toc">
 *         {% set sections = ['generalstats', 'usertable', 'yearcounts', 'monthcounts'] %}
 *         {% for section in sections %}
 *             <span>
 *                 <a href="#{{ section }}" data-section="{{ section }}">{{ msg(section) }}</a>
 *             </span>
 *         {% endfor %}
 *     </div>
 *     ...
 *     {% set content %}
 *         ...content for general stats...
 *     {% endset %}
 *     {{ layout.content_block('generalstats', content) }}
 *     ...
 */


function setupTOC() {
  var $toc = $('.xt-toc');

  if (!$toc || !$toc[0]) {
    return;
  }

  xtools.application.vars.tocHeight = $toc.height(); // listeners on the section links

  var setupTocListeners = function setupTocListeners() {
    $('.xt-toc').find('a').off('click').on('click', function (e) {
      document.activeElement.blur();
      var $newSection = $('#' + $(e.target).data('section'));
      $(window).scrollTop($newSection.offset().top - xtools.application.vars.tocHeight);
      $(this).parents('.xt-toc').find('a').removeClass('bold');
      createTocClone();
      xtools.application.vars.$tocClone.addClass('bold');
    });
  };

  xtools.application.setupTocListeners = setupTocListeners; // clone the TOC and add position:fixed

  var createTocClone = function createTocClone() {
    if (xtools.application.vars.$tocClone) {
      return;
    }

    xtools.application.vars.$tocClone = $toc.clone();
    xtools.application.vars.$tocClone.addClass('fixed');
    $toc.after(xtools.application.vars.$tocClone);
    setupTocListeners();
  }; // build object containing offsets of each section


  xtools.application.buildSectionOffsets = function () {
    $.each($toc.find('a'), function (index, tocMember) {
      var id = $(tocMember).data('section');
      xtools.application.vars.sectionOffset[id] = $('#' + id).offset().top;
    });
  }; // rebuild section offsets when sections are shown/hidden


  $('.xt-show, .xt-hide').on('click', xtools.application.buildSectionOffsets);
  xtools.application.buildSectionOffsets();
  setupTocListeners();
  var tocOffsetTop = $toc.offset().top;
  $(window).on('scroll.toc', function (e) {
    var windowOffset = $(e.target).scrollTop();
    var inRange = windowOffset > tocOffsetTop;

    if (inRange) {
      if (!xtools.application.vars.$tocClone) {
        createTocClone();
      } // bolden the link for whichever section we're in


      var $activeMember;
      Object.keys(xtools.application.vars.sectionOffset).forEach(function (section) {
        if (windowOffset > xtools.application.vars.sectionOffset[section] - xtools.application.vars.tocHeight - 1) {
          $activeMember = xtools.application.vars.$tocClone.find('a[data-section="' + section + '"]');
        }
      });
      xtools.application.vars.$tocClone.find('a').removeClass('bold');

      if ($activeMember) {
        $activeMember.addClass('bold');
      }
    } else if (!inRange && xtools.application.vars.$tocClone) {
      // remove the clone once we're out of range
      xtools.application.vars.$tocClone.remove();
      xtools.application.vars.$tocClone = null;
    }
  });
}
/**
 * Make any tables with the class 'table-sticky-header' have sticky headers.
 * E.g. as you scroll the heading row will be fixed at the top for reference.
 */


function setupStickyHeader() {
  var $header = $('.table-sticky-header');

  if (!$header || !$header[0]) {
    return;
  }

  var $headerRow = $header.find('thead tr').eq(0),
      $headerClone; // Make a clone of the header to maintain placement of the original header,
  // making the original header the sticky one. This way event listeners on it
  // (such as column sorting) will still work.

  var cloneHeader = function cloneHeader() {
    if ($headerClone) {
      return;
    }

    $headerClone = $headerRow.clone();
    $headerRow.addClass('sticky-heading');
    $headerRow.before($headerClone); // Explicitly set widths of each column, which are lost with position:absolute.

    $headerRow.find('th').each(function (index) {
      $(this).css('width', $headerClone.find('th').eq(index).outerWidth());
    });
    $headerRow.css('width', $headerClone.outerWidth() + 1);
  };

  var headerOffsetTop = $header.offset().top;
  $(window).on('scroll.stickyHeader', function (e) {
    var windowOffset = $(e.target).scrollTop();
    var inRange = windowOffset > headerOffsetTop;

    if (inRange && !$headerClone) {
      cloneHeader();
    } else if (!inRange && $headerClone) {
      // Remove the clone once we're out of range,
      // and make the original un-sticky.
      $headerRow.removeClass('sticky-heading');
      $headerClone.remove();
      $headerClone = null;
    } else if ($headerClone) {
      // The header is position:absolute so it will follow with X scrolling,
      // but for Y we must go by the window scroll position.
      $headerRow.css('top', $(window).scrollTop() - $header.offset().top);
    }
  });
}
/**
 * Add listener to the project input field to update any namespace selectors and autocompletion fields.
 */


function setupProjectListener() {
  var $projectInput = $('#project_input'); // Stop here if there is no project field

  if (!$projectInput) {
    return;
  } // If applicable, setup namespace selector with real time updates when changing projects.
  // This will also set `apiPath` so that autocompletion will query the right wiki.


  if ($projectInput.length && $('#namespace_select').length) {
    setupNamespaceSelector(); // Otherwise, if there's a user or page input field, we still need to update `apiPath`
    // for the user input autocompletion when the project is changed.
  } else if ($('#user_input')[0] || $('#article_input')[0]) {
    // keep track of last valid project
    xtools.application.vars.lastProject = $projectInput.val();
    $projectInput.on('change', function () {
      var newProject = this.value; // Show the spinner.

      $(this).addClass('show-loader');
      /** global: xtBaseUrl */

      $.get(xtBaseUrl + 'api/project/normalize/' + newProject).done(function (data) {
        // Keep track of project API path for use in page title autocompletion
        xtools.application.vars.apiPath = data.api;
        xtools.application.vars.lastProject = newProject;
        setupAutocompletion(); // Other pages may listen for this custom event.

        $projectInput.trigger('xtools.projectLoaded', data);
      }).fail(revertToValidProject.bind(this, newProject)).always(function () {
        $projectInput.removeClass('show-loader');
      });
    });
  }
}
/**
 * Use the wiki input field to populate the namespace selector.
 * This also updates `apiPath` and calls setupAutocompletion().
 */


function setupNamespaceSelector() {
  var $projectInput = $('#project_input');
  var $namespaceSelect = $('#namespace_select'); // keep track of last valid project

  xtools.application.vars.lastProject = $('#project_input').val();
  $projectInput.off('change').on('change', function () {
    // Disable the namespace selector and show a spinner while the data loads.
    $('#namespace_select').prop('disabled', true);
    $(this).addClass('show-loader');
    var newProject = this.value;
    var oldNsOption = $namespaceSelect.val() || 0;
    /** global: xtBaseUrl */

    $.get(xtBaseUrl + 'api/project/namespaces/' + newProject).done(function (data) {
      // Clone the 'all' option (even if there isn't one),
      // and replace the current option list with this.
      var $allOption = $('#namespace_select option[value="all"]').eq(0).clone();
      $namespaceSelect.html($allOption); // Keep track of project API path for use in page title autocompletion.

      xtools.application.vars.apiPath = data.api; // Add all of the new namespace options.

      for (var ns in data.namespaces) {
        if (!data.namespaces.hasOwnProperty(ns)) {
          continue; // Skip keys from the prototype.
        }

        var nsName = parseInt(ns, 10) === 0 ? $.i18n('mainspace') : data.namespaces[ns];
        $('#namespace_select').append("<option value=" + ns + ">" + nsName + "</option>");
      } // Default to mainspace being selected.


      $namespaceSelect.val(oldNsOption);
      xtools.application.vars.lastProject = newProject; // Re-init autocompletion

      setupAutocompletion();
    }).fail(revertToValidProject.bind(this, newProject)).always(function () {
      $('#namespace_select').prop('disabled', false);
      $projectInput.removeClass('show-loader');
    });
  }); // If they change the namespace, update autocompletion,
  // which will ensure only pages in the selected namespace
  // show up in the autocompletion

  $namespaceSelect.on('change', setupAutocompletion);
}
/**
 * Called by setupNamespaceSelector or setupProjectListener when the user changes to a project that doesn't exist.
 * This throws a warning message and reverts back to the last valid project.
 * @param {string} newProject - project they attempted to add
 */


function revertToValidProject(newProject) {
  $('#project_input').val(xtools.application.vars.lastProject);
  $('.site-notice').append("<div class='alert alert-warning alert-dismissible' role='alert'>" + $.i18n('invalid-project', "<strong>" + newProject + "</strong>") + "<button class='close' data-dismiss='alert' aria-label='Close'>" + "<span aria-hidden='true'>&times;</span>" + "</button>" + "</div>");
}
/**
 * Setup autocompletion of pages if a page input field is present.
 */


function setupAutocompletion() {
  var $articleInput = $('#article_input'),
      $userInput = $('#user_input'),
      $namespaceInput = $("#namespace_select"); // Make sure typeahead-compatible fields are present

  if (!$articleInput[0] && !$userInput[0] && !$('#project_input')[0]) {
    return;
  } // Destroy any existing instances


  if ($articleInput.data('typeahead')) {
    $articleInput.data('typeahead').destroy();
  }

  if ($userInput.data('typeahead')) {
    $userInput.data('typeahead').destroy();
  } // set initial value for the API url, which is put as a data attribute in forms.html.twig


  if (!xtools.application.vars.apiPath) {
    xtools.application.vars.apiPath = $('#article_input').data('api') || $('#user_input').data('api');
  } // Defaults for typeahead options. preDispatch and preProcess will be
  // set accordingly for each typeahead instance


  var typeaheadOpts = {
    url: xtools.application.vars.apiPath,
    timeout: 200,
    triggerLength: 1,
    method: 'get',
    loadingClass: 'show-loader',
    preDispatch: null,
    preProcess: null
  };

  if ($articleInput[0]) {
    $articleInput.typeahead({
      ajax: Object.assign(typeaheadOpts, {
        preDispatch: function preDispatch(query) {
          // If there is a namespace selector, make sure we search only within that namespace,
          // unless it has the 'data-no-search' attribute set.
          if ($namespaceInput[0] && $namespaceInput.val() !== '0' && !$namespaceInput.data('no-search')) {
            var nsName = $namespaceInput.find('option:selected').text().trim();
            query = nsName + ':' + query;
          }

          return {
            action: 'query',
            list: 'prefixsearch',
            format: 'json',
            pssearch: query
          };
        },
        preProcess: function preProcess(data) {
          var nsName = ''; // Strip out namespace name if applicable

          if ($namespaceInput[0] && $namespaceInput.val() !== '0') {
            nsName = $namespaceInput.find('option:selected').text().trim();
          }

          return data.query.prefixsearch.map(function (elem) {
            return elem.title.replace(new RegExp('^' + nsName + ':'), '');
          });
        }
      })
    });
  }

  if ($userInput[0]) {
    $userInput.typeahead({
      ajax: Object.assign(typeaheadOpts, {
        preDispatch: function preDispatch(query) {
          return {
            action: 'query',
            list: 'prefixsearch',
            format: 'json',
            pssearch: 'User:' + query
          };
        },
        preProcess: function preProcess(data) {
          var results = data.query.prefixsearch.map(function (elem) {
            return elem.title.split('/')[0].substr(elem.title.indexOf(':') + 1);
          });
          return results.filter(function (value, index, array) {
            return array.indexOf(value) === index;
          });
        }
      })
    });
  }
}
/**
 * For any form submission, this disables the submit button and replaces its text with
 * a loading message and a counting timer.
 * @param {boolean} [undo] Revert the form back to the initial state.
 *                         This is used on page load to solve an issue with Safari and Firefox
 *                         where after browsing back to the form, the "loading" state persists.
 */


function displayWaitingNoticeOnSubmission(undo) {
  if (undo) {
    // Re-enable form
    $('.form-control').prop('readonly', false);
    $('.form-submit').prop('disabled', false);
    $('.form-submit').text($.i18n('submit')).prop('disabled', false);
  } else {
    $('#content form').on('submit', function () {
      // Remove focus from any active element
      document.activeElement.blur(); // Disable the form so they can't hit Enter to re-submit

      $('.form-control').prop('readonly', true); // Change the submit button text.

      $('.form-submit').prop('disabled', true).html($.i18n('loading') + " <span id='submit_timer'></span>"); // Add the counter.

      var startTime = Date.now();
      setInterval(function () {
        var elapsedSeconds = Math.round((Date.now() - startTime) / 1000);
        var minutes = Math.floor(elapsedSeconds / 60);
        var seconds = ('00' + (elapsedSeconds - minutes * 60)).slice(-2);
        $('#submit_timer').text(minutes + ":" + seconds);
      }, 1000);
    });
  }
}
/**
 * Set the initial offset for contributions lists, based on what was
 * supplied in the contributions container.
 */


function setInitialEditOffset() {
  if (xtools.application.vars.editOffset === undefined) {
    xtools.application.vars.editOffset = parseInt($('.contributions-container').data('offset'), 10);
  }
}
/**
 * Loads configured type of contributions from the server and lists them in the DOM.
 * The navigation aids and showing/hiding of loading text is also handled here.
 * @param {function} endpointFunc The callback that takes the params set on .contributions-container
 *     and returns a string that is the endpoint to fetch from (without the offset appended).
 * @param {String} apiTitle The name of the API (could be i18n key), used in error reporting.
 */


xtools.application.loadContributions = function (endpointFunc, apiTitle) {
  setInitialEditOffset();
  $('.contributions-loading').show();
  $('.contributions-container').hide();
  var params = $('.contributions-container').data(),
      endpoint = endpointFunc(params),
      pageSize = parseInt(params.pagesize, 10) || 50;
  /** global: xtBaseUrl */

  $.ajax({
    url: xtBaseUrl + endpoint + '/' + xtools.application.vars.editOffset + // Make sure to include any URL parameters, such as tool=Huggle (for AutoEdits).
    '?htmlonly=yes&pagesize=' + pageSize + '&' + window.location.search.replace(/^\?/, ''),
    timeout: 60000
  }).done(function (data) {
    $('.contributions-container').html(data).show();
    $('.contributions-loading').hide();
    xtools.application.setupContributionsNavListeners(endpointFunc, apiTitle, pageSize);

    if (xtools.application.vars.editOffset > 0) {
      $('.contributions--prev').show();
    }

    if ($('.contributions-table tbody tr').length < pageSize) {
      $('.next-edits').hide();
    }
  }).fail(function (_xhr, _status, message) {
    $('.contributions-loading').hide();
    $('.contributions-container').html($.i18n('api-error', $.i18n(apiTitle) + ' API: <code>' + message + '</code>')).show();
  });
};
/**
 * Set up listeners for navigating contribution lists.
 */


xtools.application.setupContributionsNavListeners = function (endpointFunc, apiTitle, pageSize) {
  pageSize = pageSize || 50; // Assume 50 entries per page unless specified.

  setInitialEditOffset();
  $('.contributions--prev').one('click', function (e) {
    e.preventDefault();
    xtools.application.vars.editOffset -= pageSize;
    xtools.application.loadContributions(endpointFunc, apiTitle);
  });
  $('.contributions--next').one('click', function (e) {
    e.preventDefault();
    xtools.application.vars.editOffset += pageSize;
    xtools.application.loadContributions(endpointFunc, apiTitle);
  });
};
/**
 * Handles the multi-select inputs on some index pages.
 */


xtools.application.setupMultiSelectListeners = function () {
  var $inputs = $('.multi-select--body:not(.hidden) .multi-select--option');
  $inputs.on('change', function () {
    // If all sections are selected, select the 'All' checkbox, and vice versa.
    $('.multi-select--all').prop('checked', $('.multi-select--body:not(.hidden) .multi-select--option:checked').length === $inputs.length);
  }); // Uncheck/check all when the 'All' checkbox is modified.

  $('.multi-select--all').on('click', function () {
    $inputs.prop('checked', $(this).prop('checked'));
  });
};

xtools.application.setupCopyLinks = function () {
  var $links = $('.copy-cell');
  $links.on('click', function (e) {
    var $link = $(e.target);
    var $parent = $link.parents('.copy-cell-body');
    var number = $parent.text().match(/\d+/)[0];
    navigator.clipboard.writeText(number).then(function (clipText) {
      $link.replaceWith('<span class="text-success">Copied</span>!');
    });
  });
};

/***/ }),

/***/ "./assets/js/articleinfo.js":
/*!**********************************!*\
  !*** ./assets/js/articleinfo.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

xtools.articleinfo = {};
$(function () {
  if (!$('body.articleinfo').length) {
    return;
  }

  var setupToggleTable = function setupToggleTable() {
    xtools.application.setupToggleTable(window.textshares, window.textsharesChart, 'percentage', $.noop);
  };

  var $textsharesContainer = $('.textshares-container');

  if ($textsharesContainer[0]) {
    /** global: xtBaseUrl */
    var url = xtBaseUrl + 'authorship/' + $textsharesContainer.data('project') + '/' + $textsharesContainer.data('article') + '/' + (xtools.articleinfo.endDate ? xtools.articleinfo.endDate + '/' : ''); // Remove extraneous forward slash that would cause a 301 redirect, and request over HTTP instead of HTTPS.

    url = "".concat(url.replace(/\/$/, ''), "?htmlonly=yes");
    $.ajax({
      url: url,
      timeout: 30000
    }).done(function (data) {
      $textsharesContainer.replaceWith(data);
      xtools.application.buildSectionOffsets();
      xtools.application.setupTocListeners();
      xtools.application.setupColumnSorting();
      setupToggleTable();
    }).fail(function (_xhr, _status, message) {
      $textsharesContainer.replaceWith($.i18n('api-error', 'Authorship API: <code>' + message + '</code>'));
    });
  } else if ($('.textshares-table').length) {
    setupToggleTable();
  }
});

/***/ }),

/***/ "./assets/js/authorship.js":
/*!*********************************!*\
  !*** ./assets/js/authorship.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

$(function () {
  if (!$('body.authorship').length) {
    return;
  }

  var $showSelector = $('#show_selector');
  $showSelector.on('change', function (e) {
    $('.show-option').addClass('hidden').find('input').prop('disabled', true);
    $(".show-option--".concat(e.target.value)).removeClass('hidden').find('input').prop('disabled', false);
  });

  window.onload = function () {
    return $showSelector.trigger('change');
  };
});

/***/ }),

/***/ "./assets/js/autoedits.js":
/*!********************************!*\
  !*** ./assets/js/autoedits.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

xtools.autoedits = {};
$(function () {
  if (!$('body.autoedits').length) {
    return;
  } // For the form page.


  if ($('#tool_selector').length) {
    xtools.autoedits.fetchTools = function (project) {
      $('#tool_selector').prop('disabled', true);
      $.get('/api/project/automated_tools/' + project).done(function (tools) {
        if (tools.error) {
          $('#tool_selector').prop('disabled', false);
          return; // Abort, project was invalid.
        } // These aren't tools, just metadata in the API response.


        delete tools.project;
        delete tools.elapsed_time;
        $('#tool_selector').html('<option value="none">' + $.i18n('none') + '</option>' + '<option value="all">' + $.i18n('all') + '</option>');
        Object.keys(tools).forEach(function (tool) {
          $('#tool_selector').append('<option value="' + tool + '">' + (tools[tool].label || tool) + '</option>');
        });
        $('#tool_selector').prop('disabled', false);
      });
    };

    $(document).ready(function () {
      $('#project_input').on('change.autoedits', function () {
        xtools.autoedits.fetchTools($('#project_input').val());
      });
    });
    xtools.autoedits.fetchTools($('#project_input').val()); // All the other code below only applies to result pages.

    return;
  } // For result pages only...


  xtools.application.setupToggleTable(window.countsByTool, window.toolsChart, 'count', function (newData) {
    var total = 0;
    Object.keys(newData).forEach(function (tool) {
      total += parseInt(newData[tool].count, 10);
    });
    var toolsCount = Object.keys(newData).length;
    /** global: i18nLang */

    $('.tools--tools').text(toolsCount.toLocaleString(i18nLang) + " " + $.i18n('num-tools', toolsCount));
    $('.tools--count').text(total.toLocaleString(i18nLang));
  });

  if ($('.contributions-container').length) {
    // Load the contributions browser, or set up the listeners if it is already present.
    var initFunc = $('.contributions-table').length ? 'setupContributionsNavListeners' : 'loadContributions';
    xtools.application[initFunc](function (params) {
      return params.target + '-contributions/' + params.project + '/' + params.username + '/' + params.namespace + '/' + params.start + '/' + params.end;
    }, $('.contributions-container').data('target'));
  }
});

/***/ }),

/***/ "./assets/js/blame.js":
/*!****************************!*\
  !*** ./assets/js/blame.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

xtools.blame = {};
$(function () {
  if (!$('body.blame').length) {
    return;
  }

  if ($('.diff-empty').length === $('.diff tr').length - 1) {
    $('.diff-empty').eq(0).text("(".concat($.i18n('diff-empty').toLowerCase(), ")")).addClass('text-muted text-center').prop('width', '20%');
  }

  $('.diff-addedline').each(function () {
    // Escape query to make regex-safe.
    var escapedQuery = xtools.blame.query.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');

    var highlightMatch = function highlightMatch(selector) {
      var regex = new RegExp("(".concat(escapedQuery, ")"), 'gi');
      $(selector).html($(selector).html().replace(regex, "<strong>$1</strong>"));
    };

    if ($(this).find('.diffchange-inline').length) {
      $('.diffchange-inline').each(function () {
        highlightMatch(this);
      });
    } else {
      highlightMatch(this);
    }
  }); // Handles the "Show" dropdown, show/hiding the associated input field accordingly.

  var $showSelector = $('#show_selector');
  $showSelector.on('change', function (e) {
    $('.show-option').addClass('hidden').find('input').prop('disabled', true);
    $(".show-option--".concat(e.target.value)).removeClass('hidden').find('input').prop('disabled', false);
  });

  window.onload = function () {
    return $showSelector.trigger('change');
  };
});

/***/ }),

/***/ "./assets/js/categoryedits.js":
/*!************************************!*\
  !*** ./assets/js/categoryedits.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

xtools.categoryedits = {};
$(function () {
  if (!$('body.categoryedits').length) {
    return;
  }

  $(document).ready(function () {
    xtools.categoryedits.$select2Input = $('#category_selector');
    setupCategoryInput();
    $('#project_input').on('xtools.projectLoaded', function (_e, data) {
      /** global: xtBaseUrl */
      $.get(xtBaseUrl + 'api/project/namespaces/' + data.project).done(function (data) {
        setupCategoryInput(data.api, data.namespaces[14]);
      });
    });
    $('form').on('submit', function () {
      $('#category_input').val( // Hidden input field
      xtools.categoryedits.$select2Input.val().join('|'));
    });
    xtools.application.setupToggleTable(window.countsByCategory, window.categoryChart, 'editCount', function (newData) {
      var totalEdits = 0,
          totalPages = 0;
      Object.keys(newData).forEach(function (category) {
        totalEdits += parseInt(newData[category].editCount, 10);
        totalPages += parseInt(newData[category].pageCount, 10);
      });
      var categoriesCount = Object.keys(newData).length;
      /** global: i18nLang */

      $('.category--category').text(categoriesCount.toLocaleString(i18nLang) + " " + $.i18n('num-categories', categoriesCount));
      $('.category--count').text(totalEdits.toLocaleString(i18nLang));
      $('.category--percent-of-edit-count').text((totalEdits / xtools.categoryedits.userEditCount).toLocaleString(i18nLang) * 100 + '%');
      $('.category--pages').text(totalPages.toLocaleString(i18nLang));
    });

    if ($('.contributions-container').length) {
      loadCategoryEdits();
    }
  });
});
/**
 * Load category edits HTML via AJAX, to not slow down the initial page load. Only load if container is present,
 * which is missing on index pages and in subroutes, e.g. categoryedits-contributions, etc.
 */

function loadCategoryEdits() {
  // Load the contributions browser, or set up the listeners if it is already present.
  var initFunc = $('.contributions-table').length ? 'setupContributionsNavListeners' : 'loadContributions';
  xtools.application[initFunc](function (params) {
    return 'categoryedits-contributions/' + params.project + '/' + params.username + '/' + params.categories + '/' + params.start + '/' + params.end;
  }, 'Category');
}
/**
 * Setups the Select2 control to search for pages in the Category namespace.
 * @param {String} [api] Fully qualified API endpoint.
 * @param {String} [ns] Name of the Category namespace.
 */


function setupCategoryInput(api, ns) {
  // First destroy any existing Select2 inputs.
  if (xtools.categoryedits.$select2Input.data('select2')) {
    xtools.categoryedits.$select2Input.off('change');
    xtools.categoryedits.$select2Input.select2('val', null);
    xtools.categoryedits.$select2Input.select2('data', null);
    xtools.categoryedits.$select2Input.select2('destroy');
  }

  var nsName = ns || xtools.categoryedits.$select2Input.data('ns');
  var params = {
    ajax: {
      url: api || xtools.categoryedits.$select2Input.data('api'),
      dataType: 'jsonp',
      jsonpCallback: 'categorySuggestionCallback',
      delay: 200,
      data: function data(search) {
        return {
          action: 'query',
          list: 'prefixsearch',
          format: 'json',
          pssearch: search.term || '',
          psnamespace: 14,
          cirrusUseCompletionSuggester: 'yes'
        };
      },
      processResults: function processResults(data) {
        var query = data ? data.query : {},
            results = [];

        if (query && query.prefixsearch.length) {
          results = query.prefixsearch.map(function (elem) {
            var title = elem.title.replace(new RegExp('^' + nsName + ':'), '');
            return {
              id: title.score(),
              text: title
            };
          });
        }

        return {
          results: results
        };
      }
    },
    placeholder: $.i18n('category-search'),
    maximumSelectionLength: 10,
    minimumInputLength: 1
  };
  xtools.categoryedits.$select2Input.select2(params);
}

/***/ }),

/***/ "./assets/js/core_extensions.js":
/*!**************************************!*\
  !*** ./assets/js/core_extensions.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

/**
 * Core JavaScript extensions
 * Adapted from https://github.com/MusikAnimal/pageviews
 */
String.prototype.descore = function () {
  return this.replace(/_/g, ' ');
};

String.prototype.score = function () {
  return this.replace(/ /g, '_');
};

String.prototype.escape = function () {
  var entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;'
  };
  return this.replace(/[&<>"'\/]/g, function (s) {
    return entityMap[s];
  });
}; // remove duplicate values from Array


Array.prototype.unique = function () {
  return this.filter(function (value, index, array) {
    return array.indexOf(value) === index;
  });
};

/***/ }),

/***/ "./assets/js/editcounter.js":
/*!**********************************!*\
  !*** ./assets/js/editcounter.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

xtools.editcounter = {};
/**
 * Namespaces that have been excluded from view via namespace toggle table.
 * @type {Array}
 */

xtools.editcounter.excludedNamespaces = [];
/**
 * Chart labels for the month/yearcount charts.
 * @type {Object} Keys are the chart IDs, values are arrays of strings.
 */

xtools.editcounter.chartLabels = {};
/**
 * Number of digits of the max month/year total. We want to keep this consistent
 * for aesthetic reasons, even if the updated totals are fewer digits in size.
 * @type {Object} Keys are the chart IDs, values are integers.
 */

xtools.editcounter.maxDigits = {};
$(function () {
  // Don't do anything if this isn't a Edit Counter page.
  if ($('body.editcounter').length === 0) {
    return;
  }

  xtools.application.setupMultiSelectListeners(); // Set up charts.

  $('.chart-wrapper').each(function () {
    var chartType = $(this).data('chart-type');

    if (chartType === undefined) {
      return false;
    }

    var data = $(this).data('chart-data');
    var labels = $(this).data('chart-labels');
    var $ctx = $('canvas', $(this));
    /** global: Chart */

    new Chart($ctx, {
      type: chartType,
      data: {
        labels: labels,
        datasets: [{
          data: data
        }]
      }
    });
    return undefined;
  });

  if ($('.contributions-container').length) {
    loadLatestGlobal();
  } // Set up namespace toggle chart.


  xtools.application.setupToggleTable(window.namespaceTotals, window.namespaceChart, null, toggleNamespace);
});
/**
 * Callback for setupToggleTable(). This will show/hide a given namespace from
 * all charts, and update totals and percentages.
 * @param {Object} newData New namespaces and totals, as returned by setupToggleTable.
 * @param {String} key Namespace ID of the toggled namespace.
 */

function toggleNamespace(newData, key) {
  var total = 0,
      counts = [];
  Object.keys(newData).forEach(function (namespace) {
    var count = parseInt(newData[namespace], 10);
    counts.push(count);
    total += count;
  });
  var namespaceCount = Object.keys(newData).length;
  /** global: i18nLang */

  $('.namespaces--namespaces').text(namespaceCount.toLocaleString(i18nLang) + ' ' + $.i18n('num-namespaces', namespaceCount));
  $('.namespaces--count').text(total.toLocaleString(i18nLang)); // Now that we have the total, loop through once more time to update percentages.

  counts.forEach(function (count) {
    // Calculate percentage, rounded to tenths.
    var percentage = getPercentage(count, total); // Update text with new value and percentage.

    $('.namespaces-table .sort-entry--count[data-value=' + count + ']').text(count.toLocaleString(i18nLang) + ' (' + percentage + ')');
  }); // Loop through month and year charts, toggling the dataset for the newly excluded namespace.

  ['year', 'month'].forEach(function (id) {
    var chartObj = window[id + 'countsChart'],
        nsName = window.namespaces[key] || $.i18n('mainspace'); // Year and month sections can be selectively hidden.

    if (!chartObj) {
      return;
    } // Figure out the index of the namespace we're toggling within this chart object.


    var datasetIndex = 0;
    chartObj.data.datasets.forEach(function (dataset, i) {
      if (dataset.label === nsName) {
        datasetIndex = i;
      }
    }); // Fetch the metadata and toggle the hidden property.

    var meta = chartObj.getDatasetMeta(datasetIndex);
    meta.hidden = meta.hidden === null ? !chartObj.data.datasets[datasetIndex].hidden : null; // Add this namespace to the list of excluded namespaces.

    if (meta.hidden) {
      xtools.editcounter.excludedNamespaces.push(nsName);
    } else {
      xtools.editcounter.excludedNamespaces = xtools.editcounter.excludedNamespaces.filter(function (namespace) {
        return namespace !== nsName;
      });
    } // Update y-axis labels with the new totals.


    window[id + 'countsChart'].config.data.labels = getYAxisLabels(id, chartObj.data.datasets); // Refresh chart.

    chartObj.update();
  });
}
/**
 * Load recent global edits' HTML via AJAX, to not slow down the initial page load.
 * Only load if container is present, which is missing in subroutes, e.g. ec-namespacetotals, etc.
 */


function loadLatestGlobal() {
  // Load the contributions browser, or set up the listeners if it is already present.
  var initFunc = $('.contributions-table').length ? 'setupContributionsNavListeners' : 'loadContributions';
  xtools.application[initFunc](function (params) {
    return params.target + '-contributions/' + params.project + '/' + params.username;
  }, 'latest-global-edits');
}
/**
 * Build the labels for the y-axis of the year/monthcount charts, which include the year/month and the total number of
 * edits across all namespaces in that year/month.
 * @param {String} id ID prefix of the chart, either 'month' or 'year'.
 * @param {Array} datasets Datasets making up the chart.
 * @return {Array} Labels for each year/month.
 */


function getYAxisLabels(id, datasets) {
  var labelsAndTotals = getMonthYearTotals(id, datasets); // Format labels with totals next to them. This is a bit hacky, but it works! We use tabs (\t) to make the
  // labels/totals for each namespace line up perfectly. The caveat is that we can't localize the numbers because
  // the commas are not monospaced :(

  return Object.keys(labelsAndTotals).map(function (year) {
    var digitCount = labelsAndTotals[year].toString().length;
    var numTabs = (xtools.editcounter.maxDigits[id] - digitCount) * 2; // +5 for a bit of extra spacing.

    /** global: i18nLang */

    return year + Array(numTabs + 5).join("\t") + labelsAndTotals[year].toLocaleString(i18nLang, {
      useGrouping: false
    });
  });
}
/**
 * Get the total number of edits for the given dataset (year or month).
 * @param {String} id ID prefix of the chart, either 'month' or 'year'.
 * @param {Array} datasets Datasets making up the chart.
 * @return {Object} Labels for each year/month as keys, totals as the values.
 */


function getMonthYearTotals(id, datasets) {
  var labelsAndTotals = {};
  datasets.forEach(function (namespace) {
    if (xtools.editcounter.excludedNamespaces.indexOf(namespace.label) !== -1) {
      return;
    }

    namespace.data.forEach(function (count, index) {
      if (!labelsAndTotals[xtools.editcounter.chartLabels[id][index]]) {
        labelsAndTotals[xtools.editcounter.chartLabels[id][index]] = 0;
      }

      labelsAndTotals[xtools.editcounter.chartLabels[id][index]] += count;
    });
  });
  return labelsAndTotals;
}
/**
 * Calculate and format a percentage, rounded to the tenths place.
 * @param {Number} numerator
 * @param {Number} denominator
 * @return {Number}
 */


function getPercentage(numerator, denominator) {
  /** global: i18nLang */
  return (numerator / denominator).toLocaleString(i18nLang, {
    style: 'percent'
  });
}
/**
 * Set up the monthcounts or yearcounts chart. This is set on the window
 * because it is called in the yearcounts/monthcounts view.
 * @param {String} id 'year' or 'month'.
 * @param {Array} datasets Datasets grouped by mainspace.
 * @param {Array} labels The bare labels for the y-axis (years or months).
 * @param {Number} maxTotal Maximum value of year/month totals.
 * @param {Boolean} showLegend Whether to show the legend above the chart.
 */


xtools.editcounter.setupMonthYearChart = function (id, datasets, labels, maxTotal, showLegend) {
  /** @type {Array} Labels for each namespace. */
  var namespaces = datasets.map(function (dataset) {
    return dataset.label;
  });
  xtools.editcounter.maxDigits[id] = maxTotal.toString().length;
  xtools.editcounter.chartLabels[id] = labels;
  /** global: i18nRTL */

  /** global: i18nLang */

  window[id + 'countsChart'] = new Chart($('#' + id + 'counts-canvas'), {
    type: 'horizontalBar',
    data: {
      labels: getYAxisLabels(id, datasets),
      datasets: datasets
    },
    options: {
      tooltips: {
        mode: 'nearest',
        intersect: true,
        callbacks: {
          label: function label(tooltip) {
            var labelsAndTotals = getMonthYearTotals(id, datasets),
                totals = Object.keys(labelsAndTotals).map(function (label) {
              return labelsAndTotals[label];
            }),
                total = totals[tooltip.index],
                percentage = getPercentage(tooltip.xLabel, total);
            return tooltip.xLabel.toLocaleString(i18nLang) + ' ' + '(' + percentage + ')';
          },
          title: function title(tooltip) {
            var yLabel = tooltip[0].yLabel.replace(/\t.*/, '');
            return yLabel + ' - ' + namespaces[tooltip[0].datasetIndex];
          }
        }
      },
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxes: [{
          stacked: true,
          ticks: {
            beginAtZero: true,
            reverse: i18nRTL,
            callback: function callback(value) {
              if (Math.floor(value) === value) {
                return value.toLocaleString(i18nLang);
              }
            }
          }
        }],
        yAxes: [{
          stacked: true,
          barThickness: 18,
          position: i18nRTL ? 'right' : 'left'
        }]
      },
      legend: {
        display: showLegend
      }
    }
  });
};

/***/ }),

/***/ "./assets/js/globalcontribs.js":
/*!*************************************!*\
  !*** ./assets/js/globalcontribs.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

xtools.globalcontribs = {};
$(function () {
  // Don't do anything if this isn't a Edit Counter page.
  if ($('body.globalcontribs').length === 0) {
    return;
  }

  xtools.application.setupContributionsNavListeners(function (params) {
    return "globalcontribs/".concat(params.username, "/").concat(params.namespace, "/").concat(params.start, "/").concat(params.end);
  }, 'globalcontribs', xtools.globalcontribs.pageSize);
});

/***/ }),

/***/ "./assets/js/pages.js":
/*!****************************!*\
  !*** ./assets/js/pages.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.date.to-iso-string */ "./node_modules/core-js/modules/es.date.to-iso-string.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

xtools.pages = {};
$(function () {
  // Don't execute this code if we're not on the Pages tool
  // FIXME: find a way to automate this somehow...
  if (!$('body.pages').length) {
    return;
  }

  var deletionSummaries = {};
  xtools.application.setupToggleTable(window.countsByNamespace, window.pieChart, 'count', function (newData) {
    var totals = {
      count: 0,
      deleted: 0,
      redirects: 0
    };
    Object.keys(newData).forEach(function (ns) {
      totals.count += newData[ns].count;
      totals.deleted += newData[ns].deleted;
      totals.redirects += newData[ns].redirects;
    });
    $('.namespaces--namespaces').text(Object.keys(newData).length.toLocaleString() + " " + $.i18n('num-namespaces', Object.keys(newData).length));
    $('.namespaces--pages').text(totals.count.toLocaleString());
    $('.namespaces--deleted').text(totals.deleted.toLocaleString() + " (" + (totals.deleted / totals.count * 100).toFixed(1) + "%)");
    $('.namespaces--redirects').text(totals.redirects.toLocaleString() + " (" + (totals.redirects / totals.count * 100).toFixed(1) + "%)");
  });
  $('.deleted-page').on('mouseover', function (e) {
    var page = $(this).data('page'),
        startTime = $(this).data('datetime').toString().slice(0, -2);

    var showSummary = function showSummary(summary) {
      $(e.target).find('.tooltip-body').html(summary);
    };

    if (deletionSummaries[page] !== undefined) {
      return showSummary(deletionSummaries[page]);
    }

    var logEventsQuery = function logEventsQuery(action) {
      return $.ajax({
        url: wikiApi,
        data: {
          action: 'query',
          list: 'logevents',
          letitle: page,
          lestart: startTime,
          letype: 'delete',
          leaction: action || 'delete/delete',
          lelimit: 1,
          format: 'json'
        },
        dataType: 'jsonp'
      });
    };

    var showParserApiFailure = function showParserApiFailure() {
      return showSummary("<span class='text-danger'>" + $.i18n('api-error', 'Parser API') + "</span>");
    };

    var showLoggingApiFailure = function showLoggingApiFailure() {
      return showSummary("<span class='text-danger'>" + $.i18n('api-error', 'Logging API') + "</span>");
    };

    var showParsedWikitext = function showParsedWikitext(event) {
      return $.ajax({
        url: xtBaseUrl + 'api/project/parser/' + wikiDomain + '?wikitext=' + encodeURIComponent(event.comment)
      }).done(function (markup) {
        // Get timestamp in YYYY-MM-DD HH:MM format.
        var timestamp = new Date(event.timestamp).toISOString().slice(0, 16).replace('T', ' '); // Add timestamp and link to admin.

        var summary = timestamp + " (<a target='_blank' href='https://" + wikiDomain + "/wiki/User:" + event.user + "'>" + event.user + '</a>): <i>' + markup + '</i>';
        deletionSummaries[page] = summary;
        showSummary(summary);
      }).fail(showParserApiFailure);
    };

    logEventsQuery().done(function (resp) {
      var event = resp.query.logevents[0];

      if (!event) {
        // Try again but look for redirect deletions.
        return logEventsQuery('delete/delete_redir').done(function (resp) {
          event = resp.query.logevents[0];

          if (!event) {
            return showParserApiFailure();
          }

          showParsedWikitext(event);
        }).fail(showLoggingApiFailure);
      }

      showParsedWikitext(event);
    }).fail(showLoggingApiFailure);
  });
});

/***/ }),

/***/ "./assets/js/topedits.js":
/*!*******************************!*\
  !*** ./assets/js/topedits.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

xtools.topedits = {};
$(function () {
  // Don't execute this code if we're not on the TopEdits tool.
  // FIXME: find a way to automate this somehow...
  if (!$('body.topedits').length) {
    return;
  } // Disable the article input if they select the 'All' namespace option


  $('#namespace_select').on('change', function () {
    $('#article_input').prop('disabled', $(this).val() === 'all');
  });
});

/***/ }),

/***/ "./assets/vendor/Chart.min.js":
/*!************************************!*\
  !*** ./assets/vendor/Chart.min.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.fill */ "./node_modules/core-js/modules/es.array.fill.js");

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.find-index */ "./node_modules/core-js/modules/es.array.find-index.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.is-array */ "./node_modules/core-js/modules/es.array.is-array.js");

__webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.reduce */ "./node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.array.sort */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.array.splice */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.date.now */ "./node_modules/core-js/modules/es.date.now.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.bind */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.math.log10 */ "./node_modules/core-js/modules/es.math.log10.js");

__webpack_require__(/*! core-js/modules/es.math.sign */ "./node_modules/core-js/modules/es.math.sign.js");

__webpack_require__(/*! core-js/modules/es.number.constructor */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.number.epsilon */ "./node_modules/core-js/modules/es.number.epsilon.js");

__webpack_require__(/*! core-js/modules/es.number.max-safe-integer */ "./node_modules/core-js/modules/es.number.max-safe-integer.js");

__webpack_require__(/*! core-js/modules/es.number.min-safe-integer */ "./node_modules/core-js/modules/es.number.min-safe-integer.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.object.define-property */ "./node_modules/core-js/modules/es.object.define-property.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

__webpack_require__(/*! core-js/modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.7.0
 *
 * Copyright 2017 Nick Downie
 * Released under the MIT license
 * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
 */
!function (t) {
  if ("object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module) module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
}(function () {
  return function t(e, n, i) {
    function a(r, l) {
      if (!n[r]) {
        if (!e[r]) {
          var s = "function" == typeof require && require;
          if (!l && s) return require(r, !0);
          if (o) return o(r, !0);
          var u = new Error("Cannot find module '" + r + "'");
          throw u.code = "MODULE_NOT_FOUND", u;
        }

        var d = n[r] = {
          exports: {}
        };
        e[r][0].call(d.exports, function (t) {
          var n = e[r][1][t];
          return a(n || t);
        }, d, d.exports, t, e, n, i);
      }

      return n[r].exports;
    }

    for (var o = "function" == typeof require && require, r = 0; r < i.length; r++) {
      a(i[r]);
    }

    return a;
  }({
    1: [function (t, e, n) {}, {}],
    2: [function (t, e, n) {
      function i(t) {
        if (t) {
          var e = /^#([a-fA-F0-9]{3})$/i,
              n = /^#([a-fA-F0-9]{6})$/i,
              i = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
              a = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
              o = /(\w+)/,
              r = [0, 0, 0],
              l = 1,
              s = t.match(e);

          if (s) {
            s = s[1];

            for (d = 0; d < r.length; d++) {
              r[d] = parseInt(s[d] + s[d], 16);
            }
          } else if (s = t.match(n)) {
            s = s[1];

            for (d = 0; d < r.length; d++) {
              r[d] = parseInt(s.slice(2 * d, 2 * d + 2), 16);
            }
          } else if (s = t.match(i)) {
            for (d = 0; d < r.length; d++) {
              r[d] = parseInt(s[d + 1]);
            }

            l = parseFloat(s[4]);
          } else if (s = t.match(a)) {
            for (d = 0; d < r.length; d++) {
              r[d] = Math.round(2.55 * parseFloat(s[d + 1]));
            }

            l = parseFloat(s[4]);
          } else if (s = t.match(o)) {
            if ("transparent" == s[1]) return [0, 0, 0, 0];
            if (!(r = c[s[1]])) return;
          }

          for (var d = 0; d < r.length; d++) {
            r[d] = u(r[d], 0, 255);
          }

          return l = l || 0 == l ? u(l, 0, 1) : 1, r[3] = l, r;
        }
      }

      function a(t) {
        if (t) {
          var e = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,
              n = t.match(e);

          if (n) {
            var i = parseFloat(n[4]);
            return [u(parseInt(n[1]), 0, 360), u(parseFloat(n[2]), 0, 100), u(parseFloat(n[3]), 0, 100), u(isNaN(i) ? 1 : i, 0, 1)];
          }
        }
      }

      function o(t) {
        if (t) {
          var e = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,
              n = t.match(e);

          if (n) {
            var i = parseFloat(n[4]);
            return [u(parseInt(n[1]), 0, 360), u(parseFloat(n[2]), 0, 100), u(parseFloat(n[3]), 0, 100), u(isNaN(i) ? 1 : i, 0, 1)];
          }
        }
      }

      function r(t, e) {
        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), "rgba(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + e + ")";
      }

      function l(t, e) {
        return "rgba(" + Math.round(t[0] / 255 * 100) + "%, " + Math.round(t[1] / 255 * 100) + "%, " + Math.round(t[2] / 255 * 100) + "%, " + (e || t[3] || 1) + ")";
      }

      function s(t, e) {
        return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), "hsla(" + t[0] + ", " + t[1] + "%, " + t[2] + "%, " + e + ")";
      }

      function u(t, e, n) {
        return Math.min(Math.max(e, t), n);
      }

      function d(t) {
        var e = t.toString(16).toUpperCase();
        return e.length < 2 ? "0" + e : e;
      }

      var c = t(6);
      e.exports = {
        getRgba: i,
        getHsla: a,
        getRgb: function getRgb(t) {
          var e = i(t);
          return e && e.slice(0, 3);
        },
        getHsl: function getHsl(t) {
          var e = a(t);
          return e && e.slice(0, 3);
        },
        getHwb: o,
        getAlpha: function getAlpha(t) {
          var e = i(t);
          return e ? e[3] : (e = a(t)) ? e[3] : (e = o(t)) ? e[3] : void 0;
        },
        hexString: function hexString(t) {
          return "#" + d(t[0]) + d(t[1]) + d(t[2]);
        },
        rgbString: function rgbString(t, e) {
          return e < 1 || t[3] && t[3] < 1 ? r(t, e) : "rgb(" + t[0] + ", " + t[1] + ", " + t[2] + ")";
        },
        rgbaString: r,
        percentString: function percentString(t, e) {
          return e < 1 || t[3] && t[3] < 1 ? l(t, e) : "rgb(" + Math.round(t[0] / 255 * 100) + "%, " + Math.round(t[1] / 255 * 100) + "%, " + Math.round(t[2] / 255 * 100) + "%)";
        },
        percentaString: l,
        hslString: function hslString(t, e) {
          return e < 1 || t[3] && t[3] < 1 ? s(t, e) : "hsl(" + t[0] + ", " + t[1] + "%, " + t[2] + "%)";
        },
        hslaString: s,
        hwbString: function hwbString(t, e) {
          return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), "hwb(" + t[0] + ", " + t[1] + "%, " + t[2] + "%" + (void 0 !== e && 1 !== e ? ", " + e : "") + ")";
        },
        keyword: function keyword(t) {
          return h[t.slice(0, 3)];
        }
      };
      var h = {};

      for (var f in c) {
        h[c[f]] = f;
      }
    }, {
      6: 6
    }],
    3: [function (t, e, n) {
      var i = t(5),
          a = t(2),
          o = function o(t) {
        if (t instanceof o) return t;
        if (!(this instanceof o)) return new o(t);
        this.valid = !1, this.values = {
          rgb: [0, 0, 0],
          hsl: [0, 0, 0],
          hsv: [0, 0, 0],
          hwb: [0, 0, 0],
          cmyk: [0, 0, 0, 0],
          alpha: 1
        };
        var e;
        "string" == typeof t ? (e = a.getRgba(t)) ? this.setValues("rgb", e) : (e = a.getHsla(t)) ? this.setValues("hsl", e) : (e = a.getHwb(t)) && this.setValues("hwb", e) : "object" == _typeof(t) && (void 0 !== (e = t).r || void 0 !== e.red ? this.setValues("rgb", e) : void 0 !== e.l || void 0 !== e.lightness ? this.setValues("hsl", e) : void 0 !== e.v || void 0 !== e.value ? this.setValues("hsv", e) : void 0 !== e.w || void 0 !== e.whiteness ? this.setValues("hwb", e) : void 0 === e.c && void 0 === e.cyan || this.setValues("cmyk", e));
      };

      o.prototype = {
        isValid: function isValid() {
          return this.valid;
        },
        rgb: function rgb() {
          return this.setSpace("rgb", arguments);
        },
        hsl: function hsl() {
          return this.setSpace("hsl", arguments);
        },
        hsv: function hsv() {
          return this.setSpace("hsv", arguments);
        },
        hwb: function hwb() {
          return this.setSpace("hwb", arguments);
        },
        cmyk: function cmyk() {
          return this.setSpace("cmyk", arguments);
        },
        rgbArray: function rgbArray() {
          return this.values.rgb;
        },
        hslArray: function hslArray() {
          return this.values.hsl;
        },
        hsvArray: function hsvArray() {
          return this.values.hsv;
        },
        hwbArray: function hwbArray() {
          var t = this.values;
          return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;
        },
        cmykArray: function cmykArray() {
          return this.values.cmyk;
        },
        rgbaArray: function rgbaArray() {
          var t = this.values;
          return t.rgb.concat([t.alpha]);
        },
        hslaArray: function hslaArray() {
          var t = this.values;
          return t.hsl.concat([t.alpha]);
        },
        alpha: function alpha(t) {
          return void 0 === t ? this.values.alpha : (this.setValues("alpha", t), this);
        },
        red: function red(t) {
          return this.setChannel("rgb", 0, t);
        },
        green: function green(t) {
          return this.setChannel("rgb", 1, t);
        },
        blue: function blue(t) {
          return this.setChannel("rgb", 2, t);
        },
        hue: function hue(t) {
          return t && (t = (t %= 360) < 0 ? 360 + t : t), this.setChannel("hsl", 0, t);
        },
        saturation: function saturation(t) {
          return this.setChannel("hsl", 1, t);
        },
        lightness: function lightness(t) {
          return this.setChannel("hsl", 2, t);
        },
        saturationv: function saturationv(t) {
          return this.setChannel("hsv", 1, t);
        },
        whiteness: function whiteness(t) {
          return this.setChannel("hwb", 1, t);
        },
        blackness: function blackness(t) {
          return this.setChannel("hwb", 2, t);
        },
        value: function value(t) {
          return this.setChannel("hsv", 2, t);
        },
        cyan: function cyan(t) {
          return this.setChannel("cmyk", 0, t);
        },
        magenta: function magenta(t) {
          return this.setChannel("cmyk", 1, t);
        },
        yellow: function yellow(t) {
          return this.setChannel("cmyk", 2, t);
        },
        black: function black(t) {
          return this.setChannel("cmyk", 3, t);
        },
        hexString: function hexString() {
          return a.hexString(this.values.rgb);
        },
        rgbString: function rgbString() {
          return a.rgbString(this.values.rgb, this.values.alpha);
        },
        rgbaString: function rgbaString() {
          return a.rgbaString(this.values.rgb, this.values.alpha);
        },
        percentString: function percentString() {
          return a.percentString(this.values.rgb, this.values.alpha);
        },
        hslString: function hslString() {
          return a.hslString(this.values.hsl, this.values.alpha);
        },
        hslaString: function hslaString() {
          return a.hslaString(this.values.hsl, this.values.alpha);
        },
        hwbString: function hwbString() {
          return a.hwbString(this.values.hwb, this.values.alpha);
        },
        keyword: function keyword() {
          return a.keyword(this.values.rgb, this.values.alpha);
        },
        rgbNumber: function rgbNumber() {
          var t = this.values.rgb;
          return t[0] << 16 | t[1] << 8 | t[2];
        },
        luminosity: function luminosity() {
          for (var t = this.values.rgb, e = [], n = 0; n < t.length; n++) {
            var i = t[n] / 255;
            e[n] = i <= .03928 ? i / 12.92 : Math.pow((i + .055) / 1.055, 2.4);
          }

          return .2126 * e[0] + .7152 * e[1] + .0722 * e[2];
        },
        contrast: function contrast(t) {
          var e = this.luminosity(),
              n = t.luminosity();
          return e > n ? (e + .05) / (n + .05) : (n + .05) / (e + .05);
        },
        level: function level(t) {
          var e = this.contrast(t);
          return e >= 7.1 ? "AAA" : e >= 4.5 ? "AA" : "";
        },
        dark: function dark() {
          var t = this.values.rgb;
          return (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3 < 128;
        },
        light: function light() {
          return !this.dark();
        },
        negate: function negate() {
          for (var t = [], e = 0; e < 3; e++) {
            t[e] = 255 - this.values.rgb[e];
          }

          return this.setValues("rgb", t), this;
        },
        lighten: function lighten(t) {
          var e = this.values.hsl;
          return e[2] += e[2] * t, this.setValues("hsl", e), this;
        },
        darken: function darken(t) {
          var e = this.values.hsl;
          return e[2] -= e[2] * t, this.setValues("hsl", e), this;
        },
        saturate: function saturate(t) {
          var e = this.values.hsl;
          return e[1] += e[1] * t, this.setValues("hsl", e), this;
        },
        desaturate: function desaturate(t) {
          var e = this.values.hsl;
          return e[1] -= e[1] * t, this.setValues("hsl", e), this;
        },
        whiten: function whiten(t) {
          var e = this.values.hwb;
          return e[1] += e[1] * t, this.setValues("hwb", e), this;
        },
        blacken: function blacken(t) {
          var e = this.values.hwb;
          return e[2] += e[2] * t, this.setValues("hwb", e), this;
        },
        greyscale: function greyscale() {
          var t = this.values.rgb,
              e = .3 * t[0] + .59 * t[1] + .11 * t[2];
          return this.setValues("rgb", [e, e, e]), this;
        },
        clearer: function clearer(t) {
          var e = this.values.alpha;
          return this.setValues("alpha", e - e * t), this;
        },
        opaquer: function opaquer(t) {
          var e = this.values.alpha;
          return this.setValues("alpha", e + e * t), this;
        },
        rotate: function rotate(t) {
          var e = this.values.hsl,
              n = (e[0] + t) % 360;
          return e[0] = n < 0 ? 360 + n : n, this.setValues("hsl", e), this;
        },
        mix: function mix(t, e) {
          var n = this,
              i = t,
              a = void 0 === e ? .5 : e,
              o = 2 * a - 1,
              r = n.alpha() - i.alpha(),
              l = ((o * r == -1 ? o : (o + r) / (1 + o * r)) + 1) / 2,
              s = 1 - l;
          return this.rgb(l * n.red() + s * i.red(), l * n.green() + s * i.green(), l * n.blue() + s * i.blue()).alpha(n.alpha() * a + i.alpha() * (1 - a));
        },
        toJSON: function toJSON() {
          return this.rgb();
        },
        clone: function clone() {
          var t,
              e,
              n = new o(),
              i = this.values,
              a = n.values;

          for (var r in i) {
            i.hasOwnProperty(r) && (t = i[r], "[object Array]" === (e = {}.toString.call(t)) ? a[r] = t.slice(0) : "[object Number]" === e ? a[r] = t : console.error("unexpected color value:", t));
          }

          return n;
        }
      }, o.prototype.spaces = {
        rgb: ["red", "green", "blue"],
        hsl: ["hue", "saturation", "lightness"],
        hsv: ["hue", "saturation", "value"],
        hwb: ["hue", "whiteness", "blackness"],
        cmyk: ["cyan", "magenta", "yellow", "black"]
      }, o.prototype.maxes = {
        rgb: [255, 255, 255],
        hsl: [360, 100, 100],
        hsv: [360, 100, 100],
        hwb: [360, 100, 100],
        cmyk: [100, 100, 100, 100]
      }, o.prototype.getValues = function (t) {
        for (var e = this.values, n = {}, i = 0; i < t.length; i++) {
          n[t.charAt(i)] = e[t][i];
        }

        return 1 !== e.alpha && (n.a = e.alpha), n;
      }, o.prototype.setValues = function (t, e) {
        var n,
            a = this.values,
            o = this.spaces,
            r = this.maxes,
            l = 1;
        if (this.valid = !0, "alpha" === t) l = e;else if (e.length) a[t] = e.slice(0, t.length), l = e[t.length];else if (void 0 !== e[t.charAt(0)]) {
          for (n = 0; n < t.length; n++) {
            a[t][n] = e[t.charAt(n)];
          }

          l = e.a;
        } else if (void 0 !== e[o[t][0]]) {
          var s = o[t];

          for (n = 0; n < t.length; n++) {
            a[t][n] = e[s[n]];
          }

          l = e.alpha;
        }
        if (a.alpha = Math.max(0, Math.min(1, void 0 === l ? a.alpha : l)), "alpha" === t) return !1;
        var u;

        for (n = 0; n < t.length; n++) {
          u = Math.max(0, Math.min(r[t][n], a[t][n])), a[t][n] = Math.round(u);
        }

        for (var d in o) {
          d !== t && (a[d] = i[t][d](a[t]));
        }

        return !0;
      }, o.prototype.setSpace = function (t, e) {
        var n = e[0];
        return void 0 === n ? this.getValues(t) : ("number" == typeof n && (n = Array.prototype.slice.call(e)), this.setValues(t, n), this);
      }, o.prototype.setChannel = function (t, e, n) {
        var i = this.values[t];
        return void 0 === n ? i[e] : n === i[e] ? this : (i[e] = n, this.setValues(t, i), this);
      }, "undefined" != typeof window && (window.Color = o), e.exports = o;
    }, {
      2: 2,
      5: 5
    }],
    4: [function (t, e, n) {
      function i(t) {
        var e,
            n,
            i,
            a = t[0] / 255,
            o = t[1] / 255,
            r = t[2] / 255,
            l = Math.min(a, o, r),
            s = Math.max(a, o, r),
            u = s - l;
        return s == l ? e = 0 : a == s ? e = (o - r) / u : o == s ? e = 2 + (r - a) / u : r == s && (e = 4 + (a - o) / u), (e = Math.min(60 * e, 360)) < 0 && (e += 360), i = (l + s) / 2, n = s == l ? 0 : i <= .5 ? u / (s + l) : u / (2 - s - l), [e, 100 * n, 100 * i];
      }

      function a(t) {
        var e,
            n,
            i,
            a = t[0],
            o = t[1],
            r = t[2],
            l = Math.min(a, o, r),
            s = Math.max(a, o, r),
            u = s - l;
        return n = 0 == s ? 0 : u / s * 1e3 / 10, s == l ? e = 0 : a == s ? e = (o - r) / u : o == s ? e = 2 + (r - a) / u : r == s && (e = 4 + (a - o) / u), (e = Math.min(60 * e, 360)) < 0 && (e += 360), i = s / 255 * 1e3 / 10, [e, n, i];
      }

      function o(t) {
        var e = t[0],
            n = t[1],
            a = t[2];
        return [i(t)[0], 100 * (1 / 255 * Math.min(e, Math.min(n, a))), 100 * (a = 1 - 1 / 255 * Math.max(e, Math.max(n, a)))];
      }

      function l(t) {
        var e,
            n,
            i,
            a,
            o = t[0] / 255,
            r = t[1] / 255,
            l = t[2] / 255;
        return a = Math.min(1 - o, 1 - r, 1 - l), e = (1 - o - a) / (1 - a) || 0, n = (1 - r - a) / (1 - a) || 0, i = (1 - l - a) / (1 - a) || 0, [100 * e, 100 * n, 100 * i, 100 * a];
      }

      function s(t) {
        return C[JSON.stringify(t)];
      }

      function u(t) {
        var e = t[0] / 255,
            n = t[1] / 255,
            i = t[2] / 255;
        return [100 * (.4124 * (e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92) + .3576 * (n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92) + .1805 * (i = i > .04045 ? Math.pow((i + .055) / 1.055, 2.4) : i / 12.92)), 100 * (.2126 * e + .7152 * n + .0722 * i), 100 * (.0193 * e + .1192 * n + .9505 * i)];
      }

      function d(t) {
        var e,
            n,
            i,
            a = u(t),
            o = a[0],
            r = a[1],
            l = a[2];
        return o /= 95.047, r /= 100, l /= 108.883, o = o > .008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > .008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, l = l > .008856 ? Math.pow(l, 1 / 3) : 7.787 * l + 16 / 116, e = 116 * r - 16, n = 500 * (o - r), i = 200 * (r - l), [e, n, i];
      }

      function c(t) {
        var e,
            n,
            i,
            a,
            o,
            r = t[0] / 360,
            l = t[1] / 100,
            s = t[2] / 100;
        if (0 == l) return o = 255 * s, [o, o, o];
        e = 2 * s - (n = s < .5 ? s * (1 + l) : s + l - s * l), a = [0, 0, 0];

        for (var u = 0; u < 3; u++) {
          (i = r + 1 / 3 * -(u - 1)) < 0 && i++, i > 1 && i--, o = 6 * i < 1 ? e + 6 * (n - e) * i : 2 * i < 1 ? n : 3 * i < 2 ? e + (n - e) * (2 / 3 - i) * 6 : e, a[u] = 255 * o;
        }

        return a;
      }

      function h(t) {
        var e = t[0] / 60,
            n = t[1] / 100,
            i = t[2] / 100,
            a = Math.floor(e) % 6,
            o = e - Math.floor(e),
            r = 255 * i * (1 - n),
            l = 255 * i * (1 - n * o),
            s = 255 * i * (1 - n * (1 - o)),
            i = 255 * i;

        switch (a) {
          case 0:
            return [i, s, r];

          case 1:
            return [l, i, r];

          case 2:
            return [r, i, s];

          case 3:
            return [r, l, i];

          case 4:
            return [s, r, i];

          case 5:
            return [i, r, l];
        }
      }

      function f(t) {
        var e,
            n,
            i,
            a,
            o = t[0] / 360,
            l = t[1] / 100,
            s = t[2] / 100,
            u = l + s;

        switch (u > 1 && (l /= u, s /= u), e = Math.floor(6 * o), n = 1 - s, i = 6 * o - e, 0 != (1 & e) && (i = 1 - i), a = l + i * (n - l), e) {
          default:
          case 6:
          case 0:
            r = n, g = a, b = l;
            break;

          case 1:
            r = a, g = n, b = l;
            break;

          case 2:
            r = l, g = n, b = a;
            break;

          case 3:
            r = l, g = a, b = n;
            break;

          case 4:
            r = a, g = l, b = n;
            break;

          case 5:
            r = n, g = l, b = a;
        }

        return [255 * r, 255 * g, 255 * b];
      }

      function p(t) {
        var e,
            n,
            i,
            a = t[0] / 100,
            o = t[1] / 100,
            r = t[2] / 100,
            l = t[3] / 100;
        return e = 1 - Math.min(1, a * (1 - l) + l), n = 1 - Math.min(1, o * (1 - l) + l), i = 1 - Math.min(1, r * (1 - l) + l), [255 * e, 255 * n, 255 * i];
      }

      function v(t) {
        var e,
            n,
            i,
            a = t[0] / 100,
            o = t[1] / 100,
            r = t[2] / 100;
        return e = 3.2406 * a + -1.5372 * o + -.4986 * r, n = -.9689 * a + 1.8758 * o + .0415 * r, i = .0557 * a + -.204 * o + 1.057 * r, e = e > .0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - .055 : e *= 12.92, n = n > .0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - .055 : n *= 12.92, i = i > .0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - .055 : i *= 12.92, e = Math.min(Math.max(0, e), 1), n = Math.min(Math.max(0, n), 1), i = Math.min(Math.max(0, i), 1), [255 * e, 255 * n, 255 * i];
      }

      function m(t) {
        var e,
            n,
            i,
            a = t[0],
            o = t[1],
            r = t[2];
        return a /= 95.047, o /= 100, r /= 108.883, a = a > .008856 ? Math.pow(a, 1 / 3) : 7.787 * a + 16 / 116, o = o > .008856 ? Math.pow(o, 1 / 3) : 7.787 * o + 16 / 116, r = r > .008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, e = 116 * o - 16, n = 500 * (a - o), i = 200 * (o - r), [e, n, i];
      }

      function x(t) {
        var e,
            n,
            i,
            a,
            o = t[0],
            r = t[1],
            l = t[2];
        return o <= 8 ? a = (n = 100 * o / 903.3) / 100 * 7.787 + 16 / 116 : (n = 100 * Math.pow((o + 16) / 116, 3), a = Math.pow(n / 100, 1 / 3)), e = e / 95.047 <= .008856 ? e = 95.047 * (r / 500 + a - 16 / 116) / 7.787 : 95.047 * Math.pow(r / 500 + a, 3), i = i / 108.883 <= .008859 ? i = 108.883 * (a - l / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(a - l / 200, 3), [e, n, i];
      }

      function y(t) {
        var e,
            n,
            i,
            a = t[0],
            o = t[1],
            r = t[2];
        return e = Math.atan2(r, o), (n = 360 * e / 2 / Math.PI) < 0 && (n += 360), i = Math.sqrt(o * o + r * r), [a, i, n];
      }

      function k(t) {
        return v(x(t));
      }

      function w(t) {
        var e,
            n,
            i,
            a = t[0],
            o = t[1];
        return i = t[2] / 360 * 2 * Math.PI, e = o * Math.cos(i), n = o * Math.sin(i), [a, e, n];
      }

      function M(t) {
        return S[t];
      }

      e.exports = {
        rgb2hsl: i,
        rgb2hsv: a,
        rgb2hwb: o,
        rgb2cmyk: l,
        rgb2keyword: s,
        rgb2xyz: u,
        rgb2lab: d,
        rgb2lch: function rgb2lch(t) {
          return y(d(t));
        },
        hsl2rgb: c,
        hsl2hsv: function hsl2hsv(t) {
          var e,
              n,
              i = t[0],
              a = t[1] / 100,
              o = t[2] / 100;
          return 0 === o ? [0, 0, 0] : (o *= 2, a *= o <= 1 ? o : 2 - o, n = (o + a) / 2, e = 2 * a / (o + a), [i, 100 * e, 100 * n]);
        },
        hsl2hwb: function hsl2hwb(t) {
          return o(c(t));
        },
        hsl2cmyk: function hsl2cmyk(t) {
          return l(c(t));
        },
        hsl2keyword: function hsl2keyword(t) {
          return s(c(t));
        },
        hsv2rgb: h,
        hsv2hsl: function hsv2hsl(t) {
          var e,
              n,
              i = t[0],
              a = t[1] / 100,
              o = t[2] / 100;
          return n = (2 - a) * o, e = a * o, e /= n <= 1 ? n : 2 - n, e = e || 0, n /= 2, [i, 100 * e, 100 * n];
        },
        hsv2hwb: function hsv2hwb(t) {
          return o(h(t));
        },
        hsv2cmyk: function hsv2cmyk(t) {
          return l(h(t));
        },
        hsv2keyword: function hsv2keyword(t) {
          return s(h(t));
        },
        hwb2rgb: f,
        hwb2hsl: function hwb2hsl(t) {
          return i(f(t));
        },
        hwb2hsv: function hwb2hsv(t) {
          return a(f(t));
        },
        hwb2cmyk: function hwb2cmyk(t) {
          return l(f(t));
        },
        hwb2keyword: function hwb2keyword(t) {
          return s(f(t));
        },
        cmyk2rgb: p,
        cmyk2hsl: function cmyk2hsl(t) {
          return i(p(t));
        },
        cmyk2hsv: function cmyk2hsv(t) {
          return a(p(t));
        },
        cmyk2hwb: function cmyk2hwb(t) {
          return o(p(t));
        },
        cmyk2keyword: function cmyk2keyword(t) {
          return s(p(t));
        },
        keyword2rgb: M,
        keyword2hsl: function keyword2hsl(t) {
          return i(M(t));
        },
        keyword2hsv: function keyword2hsv(t) {
          return a(M(t));
        },
        keyword2hwb: function keyword2hwb(t) {
          return o(M(t));
        },
        keyword2cmyk: function keyword2cmyk(t) {
          return l(M(t));
        },
        keyword2lab: function keyword2lab(t) {
          return d(M(t));
        },
        keyword2xyz: function keyword2xyz(t) {
          return u(M(t));
        },
        xyz2rgb: v,
        xyz2lab: m,
        xyz2lch: function xyz2lch(t) {
          return y(m(t));
        },
        lab2xyz: x,
        lab2rgb: k,
        lab2lch: y,
        lch2lab: w,
        lch2xyz: function lch2xyz(t) {
          return x(w(t));
        },
        lch2rgb: function lch2rgb(t) {
          return k(w(t));
        }
      };
      var S = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        grey: [128, 128, 128],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        rebeccapurple: [102, 51, 153],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
      },
          C = {};

      for (var _ in S) {
        C[JSON.stringify(S[_])] = _;
      }
    }, {}],
    5: [function (t, e, n) {
      var i = t(4),
          a = function a() {
        return new u();
      };

      for (var o in i) {
        a[o + "Raw"] = function (t) {
          return function (e) {
            return "number" == typeof e && (e = Array.prototype.slice.call(arguments)), i[t](e);
          };
        }(o);

        var r = /(\w+)2(\w+)/.exec(o),
            l = r[1],
            s = r[2];

        (a[l] = a[l] || {})[s] = a[o] = function (t) {
          return function (e) {
            "number" == typeof e && (e = Array.prototype.slice.call(arguments));
            var n = i[t](e);
            if ("string" == typeof n || void 0 === n) return n;

            for (var a = 0; a < n.length; a++) {
              n[a] = Math.round(n[a]);
            }

            return n;
          };
        }(o);
      }

      var u = function u() {
        this.convs = {};
      };

      u.prototype.routeSpace = function (t, e) {
        var n = e[0];
        return void 0 === n ? this.getValues(t) : ("number" == typeof n && (n = Array.prototype.slice.call(e)), this.setValues(t, n));
      }, u.prototype.setValues = function (t, e) {
        return this.space = t, this.convs = {}, this.convs[t] = e, this;
      }, u.prototype.getValues = function (t) {
        var e = this.convs[t];

        if (!e) {
          var n = this.space,
              i = this.convs[n];
          e = a[n][t](i), this.convs[t] = e;
        }

        return e;
      }, ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (t) {
        u.prototype[t] = function (e) {
          return this.routeSpace(t, arguments);
        };
      }), e.exports = a;
    }, {
      4: 4
    }],
    6: [function (t, e, n) {
      "use strict";

      e.exports = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        grey: [128, 128, 128],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        rebeccapurple: [102, 51, 153],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
      };
    }, {}],
    7: [function (t, e, n) {
      var i = t(29)();
      i.helpers = t(45), t(27)(i), i.defaults = t(25), i.Element = t(26), i.elements = t(40), i.Interaction = t(28), i.platform = t(48), t(31)(i), t(22)(i), t(23)(i), t(24)(i), t(30)(i), t(33)(i), t(32)(i), t(35)(i), t(54)(i), t(52)(i), t(53)(i), t(55)(i), t(56)(i), t(57)(i), t(15)(i), t(16)(i), t(17)(i), t(18)(i), t(19)(i), t(20)(i), t(21)(i), t(8)(i), t(9)(i), t(10)(i), t(11)(i), t(12)(i), t(13)(i), t(14)(i);
      var a = [];
      a.push(t(49)(i), t(50)(i), t(51)(i)), i.plugins.register(a), i.platform.initialize(), e.exports = i, "undefined" != typeof window && (window.Chart = i), i.canvasHelpers = i.helpers.canvas;
    }, {
      10: 10,
      11: 11,
      12: 12,
      13: 13,
      14: 14,
      15: 15,
      16: 16,
      17: 17,
      18: 18,
      19: 19,
      20: 20,
      21: 21,
      22: 22,
      23: 23,
      24: 24,
      25: 25,
      26: 26,
      27: 27,
      28: 28,
      29: 29,
      30: 30,
      31: 31,
      32: 32,
      33: 33,
      35: 35,
      40: 40,
      45: 45,
      48: 48,
      49: 49,
      50: 50,
      51: 51,
      52: 52,
      53: 53,
      54: 54,
      55: 55,
      56: 56,
      57: 57,
      8: 8,
      9: 9
    }],
    8: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Bar = function (e, n) {
          return n.type = "bar", new t(e, n);
        };
      };
    }, {}],
    9: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Bubble = function (e, n) {
          return n.type = "bubble", new t(e, n);
        };
      };
    }, {}],
    10: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Doughnut = function (e, n) {
          return n.type = "doughnut", new t(e, n);
        };
      };
    }, {}],
    11: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Line = function (e, n) {
          return n.type = "line", new t(e, n);
        };
      };
    }, {}],
    12: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.PolarArea = function (e, n) {
          return n.type = "polarArea", new t(e, n);
        };
      };
    }, {}],
    13: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Radar = function (e, n) {
          return n.type = "radar", new t(e, n);
        };
      };
    }, {}],
    14: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        t.Scatter = function (e, n) {
          return n.type = "scatter", new t(e, n);
        };
      };
    }, {}],
    15: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("bar", {
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            categoryPercentage: .8,
            barPercentage: .9,
            offset: !0,
            gridLines: {
              offsetGridLines: !0
            }
          }],
          yAxes: [{
            type: "linear"
          }]
        }
      }), i._set("horizontalBar", {
        hover: {
          mode: "index",
          axis: "y"
        },
        scales: {
          xAxes: [{
            type: "linear",
            position: "bottom"
          }],
          yAxes: [{
            position: "left",
            type: "category",
            categoryPercentage: .8,
            barPercentage: .9,
            offset: !0,
            gridLines: {
              offsetGridLines: !0
            }
          }]
        },
        elements: {
          rectangle: {
            borderSkipped: "left"
          }
        },
        tooltips: {
          callbacks: {
            title: function title(t, e) {
              var n = "";
              return t.length > 0 && (t[0].yLabel ? n = t[0].yLabel : e.labels.length > 0 && t[0].index < e.labels.length && (n = e.labels[t[0].index])), n;
            },
            label: function label(t, e) {
              return (e.datasets[t.datasetIndex].label || "") + ": " + t.xLabel;
            }
          },
          mode: "index",
          axis: "y"
        }
      }), e.exports = function (t) {
        t.controllers.bar = t.DatasetController.extend({
          dataElementType: a.Rectangle,
          initialize: function initialize() {
            var e,
                n = this;
            t.DatasetController.prototype.initialize.apply(n, arguments), (e = n.getMeta()).stack = n.getDataset().stack, e.bar = !0;
          },
          update: function update(t) {
            var e,
                n,
                i = this,
                a = i.getMeta().data;

            for (i._ruler = i.getRuler(), e = 0, n = a.length; e < n; ++e) {
              i.updateElement(a[e], e, t);
            }
          },
          updateElement: function updateElement(t, e, n) {
            var i = this,
                a = i.chart,
                r = i.getMeta(),
                l = i.getDataset(),
                s = t.custom || {},
                u = a.options.elements.rectangle;
            t._xScale = i.getScaleForId(r.xAxisID), t._yScale = i.getScaleForId(r.yAxisID), t._datasetIndex = i.index, t._index = e, t._model = {
              datasetLabel: l.label,
              label: a.data.labels[e],
              borderSkipped: s.borderSkipped ? s.borderSkipped : u.borderSkipped,
              backgroundColor: s.backgroundColor ? s.backgroundColor : o.valueAtIndexOrDefault(l.backgroundColor, e, u.backgroundColor),
              borderColor: s.borderColor ? s.borderColor : o.valueAtIndexOrDefault(l.borderColor, e, u.borderColor),
              borderWidth: s.borderWidth ? s.borderWidth : o.valueAtIndexOrDefault(l.borderWidth, e, u.borderWidth)
            }, i.updateElementGeometry(t, e, n), t.pivot();
          },
          updateElementGeometry: function updateElementGeometry(t, e, n) {
            var i = this,
                a = t._model,
                o = i.getValueScale(),
                r = o.getBasePixel(),
                l = o.isHorizontal(),
                s = i._ruler || i.getRuler(),
                u = i.calculateBarValuePixels(i.index, e),
                d = i.calculateBarIndexPixels(i.index, e, s);
            a.horizontal = l, a.base = n ? r : u.base, a.x = l ? n ? r : u.head : d.center, a.y = l ? d.center : n ? r : u.head, a.height = l ? d.size : void 0, a.width = l ? void 0 : d.size;
          },
          getValueScaleId: function getValueScaleId() {
            return this.getMeta().yAxisID;
          },
          getIndexScaleId: function getIndexScaleId() {
            return this.getMeta().xAxisID;
          },
          getValueScale: function getValueScale() {
            return this.getScaleForId(this.getValueScaleId());
          },
          getIndexScale: function getIndexScale() {
            return this.getScaleForId(this.getIndexScaleId());
          },
          getStackCount: function getStackCount(t) {
            var e,
                n,
                i = this,
                a = i.chart,
                o = i.getIndexScale().options.stacked,
                r = void 0 === t ? a.data.datasets.length : t + 1,
                l = [];

            for (e = 0; e < r; ++e) {
              (n = a.getDatasetMeta(e)).bar && a.isDatasetVisible(e) && (!1 === o || !0 === o && -1 === l.indexOf(n.stack) || void 0 === o && (void 0 === n.stack || -1 === l.indexOf(n.stack))) && l.push(n.stack);
            }

            return l.length;
          },
          getStackIndex: function getStackIndex(t) {
            return this.getStackCount(t) - 1;
          },
          getRuler: function getRuler() {
            var t,
                e,
                n = this,
                i = n.getIndexScale(),
                a = n.getStackCount(),
                o = n.index,
                r = [],
                l = i.isHorizontal(),
                s = l ? i.left : i.top,
                u = s + (l ? i.width : i.height);

            for (t = 0, e = n.getMeta().data.length; t < e; ++t) {
              r.push(i.getPixelForValue(null, t, o));
            }

            return {
              pixels: r,
              start: s,
              end: u,
              stackCount: a,
              scale: i
            };
          },
          calculateBarValuePixels: function calculateBarValuePixels(t, e) {
            var n,
                i,
                a,
                o,
                r,
                l,
                s = this,
                u = s.chart,
                d = s.getMeta(),
                c = s.getValueScale(),
                h = u.data.datasets,
                f = c.getRightValue(h[t].data[e]),
                g = c.options.stacked,
                p = d.stack,
                v = 0;
            if (g || void 0 === g && void 0 !== p) for (n = 0; n < t; ++n) {
              (i = u.getDatasetMeta(n)).bar && i.stack === p && i.controller.getValueScaleId() === c.id && u.isDatasetVisible(n) && (a = c.getRightValue(h[n].data[e]), (f < 0 && a < 0 || f >= 0 && a > 0) && (v += a));
            }
            return o = c.getPixelForValue(v), r = c.getPixelForValue(v + f), l = (r - o) / 2, {
              size: l,
              base: o,
              head: r,
              center: r + l / 2
            };
          },
          calculateBarIndexPixels: function calculateBarIndexPixels(t, e, n) {
            var i,
                a,
                r,
                l,
                s,
                u,
                d = this,
                c = n.scale.options,
                h = d.getStackIndex(t),
                f = n.pixels,
                g = f[e],
                p = f.length,
                v = n.start,
                m = n.end;
            return 1 === p ? (i = g > v ? g - v : m - g, a = g < m ? m - g : g - v) : (e > 0 && (i = (g - f[e - 1]) / 2, e === p - 1 && (a = i)), e < p - 1 && (a = (f[e + 1] - g) / 2, 0 === e && (i = a))), r = i * c.categoryPercentage, l = a * c.categoryPercentage, s = (r + l) / n.stackCount, u = s * c.barPercentage, u = Math.min(o.valueOrDefault(c.barThickness, u), o.valueOrDefault(c.maxBarThickness, 1 / 0)), g -= r, g += s * h, g += (s - u) / 2, {
              size: u,
              base: g,
              head: g + u,
              center: g + u / 2
            };
          },
          draw: function draw() {
            var t = this,
                e = t.chart,
                n = t.getValueScale(),
                i = t.getMeta().data,
                a = t.getDataset(),
                r = i.length,
                l = 0;

            for (o.canvas.clipArea(e.ctx, e.chartArea); l < r; ++l) {
              isNaN(n.getRightValue(a.data[l])) || i[l].draw();
            }

            o.canvas.unclipArea(e.ctx);
          },
          setHoverStyle: function setHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t._index,
                i = t.custom || {},
                a = t._model;
            a.backgroundColor = i.hoverBackgroundColor ? i.hoverBackgroundColor : o.valueAtIndexOrDefault(e.hoverBackgroundColor, n, o.getHoverColor(a.backgroundColor)), a.borderColor = i.hoverBorderColor ? i.hoverBorderColor : o.valueAtIndexOrDefault(e.hoverBorderColor, n, o.getHoverColor(a.borderColor)), a.borderWidth = i.hoverBorderWidth ? i.hoverBorderWidth : o.valueAtIndexOrDefault(e.hoverBorderWidth, n, a.borderWidth);
          },
          removeHoverStyle: function removeHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t._index,
                i = t.custom || {},
                a = t._model,
                r = this.chart.options.elements.rectangle;
            a.backgroundColor = i.backgroundColor ? i.backgroundColor : o.valueAtIndexOrDefault(e.backgroundColor, n, r.backgroundColor), a.borderColor = i.borderColor ? i.borderColor : o.valueAtIndexOrDefault(e.borderColor, n, r.borderColor), a.borderWidth = i.borderWidth ? i.borderWidth : o.valueAtIndexOrDefault(e.borderWidth, n, r.borderWidth);
          }
        }), t.controllers.horizontalBar = t.controllers.bar.extend({
          getValueScaleId: function getValueScaleId() {
            return this.getMeta().xAxisID;
          },
          getIndexScaleId: function getIndexScaleId() {
            return this.getMeta().yAxisID;
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    16: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("bubble", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            type: "linear",
            position: "bottom",
            id: "x-axis-0"
          }],
          yAxes: [{
            type: "linear",
            position: "left",
            id: "y-axis-0"
          }]
        },
        tooltips: {
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(t, e) {
              var n = e.datasets[t.datasetIndex].label || "",
                  i = e.datasets[t.datasetIndex].data[t.index];
              return n + ": (" + t.xLabel + ", " + t.yLabel + ", " + i.r + ")";
            }
          }
        }
      }), e.exports = function (t) {
        t.controllers.bubble = t.DatasetController.extend({
          dataElementType: a.Point,
          update: function update(t) {
            var e = this,
                n = e.getMeta().data;
            o.each(n, function (n, i) {
              e.updateElement(n, i, t);
            });
          },
          updateElement: function updateElement(t, e, n) {
            var i = this,
                a = i.getMeta(),
                o = t.custom || {},
                r = i.getScaleForId(a.xAxisID),
                l = i.getScaleForId(a.yAxisID),
                s = i._resolveElementOptions(t, e),
                u = i.getDataset().data[e],
                d = i.index,
                c = n ? r.getPixelForDecimal(.5) : r.getPixelForValue("object" == _typeof(u) ? u : NaN, e, d),
                h = n ? l.getBasePixel() : l.getPixelForValue(u, e, d);

            t._xScale = r, t._yScale = l, t._options = s, t._datasetIndex = d, t._index = e, t._model = {
              backgroundColor: s.backgroundColor,
              borderColor: s.borderColor,
              borderWidth: s.borderWidth,
              hitRadius: s.hitRadius,
              pointStyle: s.pointStyle,
              radius: n ? 0 : s.radius,
              skip: o.skip || isNaN(c) || isNaN(h),
              x: c,
              y: h
            }, t.pivot();
          },
          setHoverStyle: function setHoverStyle(t) {
            var e = t._model,
                n = t._options;
            e.backgroundColor = o.valueOrDefault(n.hoverBackgroundColor, o.getHoverColor(n.backgroundColor)), e.borderColor = o.valueOrDefault(n.hoverBorderColor, o.getHoverColor(n.borderColor)), e.borderWidth = o.valueOrDefault(n.hoverBorderWidth, n.borderWidth), e.radius = n.radius + n.hoverRadius;
          },
          removeHoverStyle: function removeHoverStyle(t) {
            var e = t._model,
                n = t._options;
            e.backgroundColor = n.backgroundColor, e.borderColor = n.borderColor, e.borderWidth = n.borderWidth, e.radius = n.radius;
          },
          _resolveElementOptions: function _resolveElementOptions(t, e) {
            var n,
                i,
                a,
                r = this,
                l = r.chart,
                s = l.data.datasets[r.index],
                u = t.custom || {},
                d = l.options.elements.point,
                c = o.options.resolve,
                h = s.data[e],
                f = {},
                g = {
              chart: l,
              dataIndex: e,
              dataset: s,
              datasetIndex: r.index
            },
                p = ["backgroundColor", "borderColor", "borderWidth", "hoverBackgroundColor", "hoverBorderColor", "hoverBorderWidth", "hoverRadius", "hitRadius", "pointStyle"];

            for (n = 0, i = p.length; n < i; ++n) {
              f[a = p[n]] = c([u[a], s[a], d[a]], g, e);
            }

            return f.radius = c([u.radius, h ? h.r : void 0, s.radius, d.radius], g, e), f;
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    17: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("doughnut", {
        animation: {
          animateRotate: !0,
          animateScale: !1
        },
        hover: {
          mode: "single"
        },
        legendCallback: function legendCallback(t) {
          var e = [];
          e.push('<ul class="' + t.id + '-legend">');
          var n = t.data,
              i = n.datasets,
              a = n.labels;
          if (i.length) for (var o = 0; o < i[0].data.length; ++o) {
            e.push('<li><span style="background-color:' + i[0].backgroundColor[o] + '"></span>'), a[o] && e.push(a[o]), e.push("</li>");
          }
          return e.push("</ul>"), e.join("");
        },
        legend: {
          labels: {
            generateLabels: function generateLabels(t) {
              var e = t.data;
              return e.labels.length && e.datasets.length ? e.labels.map(function (n, i) {
                var a = t.getDatasetMeta(0),
                    r = e.datasets[0],
                    l = a.data[i],
                    s = l && l.custom || {},
                    u = o.valueAtIndexOrDefault,
                    d = t.options.elements.arc;
                return {
                  text: n,
                  fillStyle: s.backgroundColor ? s.backgroundColor : u(r.backgroundColor, i, d.backgroundColor),
                  strokeStyle: s.borderColor ? s.borderColor : u(r.borderColor, i, d.borderColor),
                  lineWidth: s.borderWidth ? s.borderWidth : u(r.borderWidth, i, d.borderWidth),
                  hidden: isNaN(r.data[i]) || a.data[i].hidden,
                  index: i
                };
              }) : [];
            }
          },
          onClick: function onClick(t, e) {
            var n,
                i,
                a,
                o = e.index,
                r = this.chart;

            for (n = 0, i = (r.data.datasets || []).length; n < i; ++n) {
              (a = r.getDatasetMeta(n)).data[o] && (a.data[o].hidden = !a.data[o].hidden);
            }

            r.update();
          }
        },
        cutoutPercentage: 50,
        rotation: -.5 * Math.PI,
        circumference: 2 * Math.PI,
        tooltips: {
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(t, e) {
              var n = e.labels[t.index],
                  i = ": " + e.datasets[t.datasetIndex].data[t.index];
              return o.isArray(n) ? (n = n.slice())[0] += i : n += i, n;
            }
          }
        }
      }), i._set("pie", o.clone(i.doughnut)), i._set("pie", {
        cutoutPercentage: 0
      }), e.exports = function (t) {
        t.controllers.doughnut = t.controllers.pie = t.DatasetController.extend({
          dataElementType: a.Arc,
          linkScales: o.noop,
          getRingIndex: function getRingIndex(t) {
            for (var e = 0, n = 0; n < t; ++n) {
              this.chart.isDatasetVisible(n) && ++e;
            }

            return e;
          },
          update: function update(t) {
            var e = this,
                n = e.chart,
                i = n.chartArea,
                a = n.options,
                r = a.elements.arc,
                l = i.right - i.left - r.borderWidth,
                s = i.bottom - i.top - r.borderWidth,
                u = Math.min(l, s),
                d = {
              x: 0,
              y: 0
            },
                c = e.getMeta(),
                h = a.cutoutPercentage,
                f = a.circumference;

            if (f < 2 * Math.PI) {
              var g = a.rotation % (2 * Math.PI),
                  p = (g += 2 * Math.PI * (g >= Math.PI ? -1 : g < -Math.PI ? 1 : 0)) + f,
                  v = {
                x: Math.cos(g),
                y: Math.sin(g)
              },
                  m = {
                x: Math.cos(p),
                y: Math.sin(p)
              },
                  b = g <= 0 && p >= 0 || g <= 2 * Math.PI && 2 * Math.PI <= p,
                  x = g <= .5 * Math.PI && .5 * Math.PI <= p || g <= 2.5 * Math.PI && 2.5 * Math.PI <= p,
                  y = g <= -Math.PI && -Math.PI <= p || g <= Math.PI && Math.PI <= p,
                  k = g <= .5 * -Math.PI && .5 * -Math.PI <= p || g <= 1.5 * Math.PI && 1.5 * Math.PI <= p,
                  w = h / 100,
                  M = {
                x: y ? -1 : Math.min(v.x * (v.x < 0 ? 1 : w), m.x * (m.x < 0 ? 1 : w)),
                y: k ? -1 : Math.min(v.y * (v.y < 0 ? 1 : w), m.y * (m.y < 0 ? 1 : w))
              },
                  S = {
                x: b ? 1 : Math.max(v.x * (v.x > 0 ? 1 : w), m.x * (m.x > 0 ? 1 : w)),
                y: x ? 1 : Math.max(v.y * (v.y > 0 ? 1 : w), m.y * (m.y > 0 ? 1 : w))
              },
                  C = {
                width: .5 * (S.x - M.x),
                height: .5 * (S.y - M.y)
              };
              u = Math.min(l / C.width, s / C.height), d = {
                x: -.5 * (S.x + M.x),
                y: -.5 * (S.y + M.y)
              };
            }

            n.borderWidth = e.getMaxBorderWidth(c.data), n.outerRadius = Math.max((u - n.borderWidth) / 2, 0), n.innerRadius = Math.max(h ? n.outerRadius / 100 * h : 0, 0), n.radiusLength = (n.outerRadius - n.innerRadius) / n.getVisibleDatasetCount(), n.offsetX = d.x * n.outerRadius, n.offsetY = d.y * n.outerRadius, c.total = e.calculateTotal(), e.outerRadius = n.outerRadius - n.radiusLength * e.getRingIndex(e.index), e.innerRadius = Math.max(e.outerRadius - n.radiusLength, 0), o.each(c.data, function (n, i) {
              e.updateElement(n, i, t);
            });
          },
          updateElement: function updateElement(t, e, n) {
            var i = this,
                a = i.chart,
                r = a.chartArea,
                l = a.options,
                s = l.animation,
                u = (r.left + r.right) / 2,
                d = (r.top + r.bottom) / 2,
                c = l.rotation,
                h = l.rotation,
                f = i.getDataset(),
                g = n && s.animateRotate ? 0 : t.hidden ? 0 : i.calculateCircumference(f.data[e]) * (l.circumference / (2 * Math.PI)),
                p = n && s.animateScale ? 0 : i.innerRadius,
                v = n && s.animateScale ? 0 : i.outerRadius,
                m = o.valueAtIndexOrDefault;
            o.extend(t, {
              _datasetIndex: i.index,
              _index: e,
              _model: {
                x: u + a.offsetX,
                y: d + a.offsetY,
                startAngle: c,
                endAngle: h,
                circumference: g,
                outerRadius: v,
                innerRadius: p,
                label: m(f.label, e, a.data.labels[e])
              }
            });
            var b = t._model;
            this.removeHoverStyle(t), n && s.animateRotate || (b.startAngle = 0 === e ? l.rotation : i.getMeta().data[e - 1]._model.endAngle, b.endAngle = b.startAngle + b.circumference), t.pivot();
          },
          removeHoverStyle: function removeHoverStyle(e) {
            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);
          },
          calculateTotal: function calculateTotal() {
            var t,
                e = this.getDataset(),
                n = this.getMeta(),
                i = 0;
            return o.each(n.data, function (n, a) {
              t = e.data[a], isNaN(t) || n.hidden || (i += Math.abs(t));
            }), i;
          },
          calculateCircumference: function calculateCircumference(t) {
            var e = this.getMeta().total;
            return e > 0 && !isNaN(t) ? 2 * Math.PI * (t / e) : 0;
          },
          getMaxBorderWidth: function getMaxBorderWidth(t) {
            for (var e, n, i = 0, a = this.index, o = t.length, r = 0; r < o; r++) {
              e = t[r]._model ? t[r]._model.borderWidth : 0, i = (n = t[r]._chart ? t[r]._chart.config.data.datasets[a].hoverBorderWidth : 0) > (i = e > i ? e : i) ? n : i;
            }

            return i;
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    18: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("line", {
        showLines: !0,
        spanGaps: !1,
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            id: "x-axis-0"
          }],
          yAxes: [{
            type: "linear",
            id: "y-axis-0"
          }]
        }
      }), e.exports = function (t) {
        function e(t, e) {
          return o.valueOrDefault(t.showLine, e.showLines);
        }

        t.controllers.line = t.DatasetController.extend({
          datasetElementType: a.Line,
          dataElementType: a.Point,
          update: function update(t) {
            var n,
                i,
                a,
                r = this,
                l = r.getMeta(),
                s = l.dataset,
                u = l.data || [],
                d = r.chart.options,
                c = d.elements.line,
                h = r.getScaleForId(l.yAxisID),
                f = r.getDataset(),
                g = e(f, d);

            for (g && (a = s.custom || {}, void 0 !== f.tension && void 0 === f.lineTension && (f.lineTension = f.tension), s._scale = h, s._datasetIndex = r.index, s._children = u, s._model = {
              spanGaps: f.spanGaps ? f.spanGaps : d.spanGaps,
              tension: a.tension ? a.tension : o.valueOrDefault(f.lineTension, c.tension),
              backgroundColor: a.backgroundColor ? a.backgroundColor : f.backgroundColor || c.backgroundColor,
              borderWidth: a.borderWidth ? a.borderWidth : f.borderWidth || c.borderWidth,
              borderColor: a.borderColor ? a.borderColor : f.borderColor || c.borderColor,
              borderCapStyle: a.borderCapStyle ? a.borderCapStyle : f.borderCapStyle || c.borderCapStyle,
              borderDash: a.borderDash ? a.borderDash : f.borderDash || c.borderDash,
              borderDashOffset: a.borderDashOffset ? a.borderDashOffset : f.borderDashOffset || c.borderDashOffset,
              borderJoinStyle: a.borderJoinStyle ? a.borderJoinStyle : f.borderJoinStyle || c.borderJoinStyle,
              fill: a.fill ? a.fill : void 0 !== f.fill ? f.fill : c.fill,
              steppedLine: a.steppedLine ? a.steppedLine : o.valueOrDefault(f.steppedLine, c.stepped),
              cubicInterpolationMode: a.cubicInterpolationMode ? a.cubicInterpolationMode : o.valueOrDefault(f.cubicInterpolationMode, c.cubicInterpolationMode)
            }, s.pivot()), n = 0, i = u.length; n < i; ++n) {
              r.updateElement(u[n], n, t);
            }

            for (g && 0 !== s._model.tension && r.updateBezierControlPoints(), n = 0, i = u.length; n < i; ++n) {
              u[n].pivot();
            }
          },
          getPointBackgroundColor: function getPointBackgroundColor(t, e) {
            var n = this.chart.options.elements.point.backgroundColor,
                i = this.getDataset(),
                a = t.custom || {};
            return a.backgroundColor ? n = a.backgroundColor : i.pointBackgroundColor ? n = o.valueAtIndexOrDefault(i.pointBackgroundColor, e, n) : i.backgroundColor && (n = i.backgroundColor), n;
          },
          getPointBorderColor: function getPointBorderColor(t, e) {
            var n = this.chart.options.elements.point.borderColor,
                i = this.getDataset(),
                a = t.custom || {};
            return a.borderColor ? n = a.borderColor : i.pointBorderColor ? n = o.valueAtIndexOrDefault(i.pointBorderColor, e, n) : i.borderColor && (n = i.borderColor), n;
          },
          getPointBorderWidth: function getPointBorderWidth(t, e) {
            var n = this.chart.options.elements.point.borderWidth,
                i = this.getDataset(),
                a = t.custom || {};
            return isNaN(a.borderWidth) ? !isNaN(i.pointBorderWidth) || o.isArray(i.pointBorderWidth) ? n = o.valueAtIndexOrDefault(i.pointBorderWidth, e, n) : isNaN(i.borderWidth) || (n = i.borderWidth) : n = a.borderWidth, n;
          },
          updateElement: function updateElement(t, e, n) {
            var i,
                a,
                r = this,
                l = r.getMeta(),
                s = t.custom || {},
                u = r.getDataset(),
                d = r.index,
                c = u.data[e],
                h = r.getScaleForId(l.yAxisID),
                f = r.getScaleForId(l.xAxisID),
                g = r.chart.options.elements.point;
            void 0 !== u.radius && void 0 === u.pointRadius && (u.pointRadius = u.radius), void 0 !== u.hitRadius && void 0 === u.pointHitRadius && (u.pointHitRadius = u.hitRadius), i = f.getPixelForValue("object" == _typeof(c) ? c : NaN, e, d), a = n ? h.getBasePixel() : r.calculatePointY(c, e, d), t._xScale = f, t._yScale = h, t._datasetIndex = d, t._index = e, t._model = {
              x: i,
              y: a,
              skip: s.skip || isNaN(i) || isNaN(a),
              radius: s.radius || o.valueAtIndexOrDefault(u.pointRadius, e, g.radius),
              pointStyle: s.pointStyle || o.valueAtIndexOrDefault(u.pointStyle, e, g.pointStyle),
              backgroundColor: r.getPointBackgroundColor(t, e),
              borderColor: r.getPointBorderColor(t, e),
              borderWidth: r.getPointBorderWidth(t, e),
              tension: l.dataset._model ? l.dataset._model.tension : 0,
              steppedLine: !!l.dataset._model && l.dataset._model.steppedLine,
              hitRadius: s.hitRadius || o.valueAtIndexOrDefault(u.pointHitRadius, e, g.hitRadius)
            };
          },
          calculatePointY: function calculatePointY(t, e, n) {
            var i,
                a,
                o,
                r = this,
                l = r.chart,
                s = r.getMeta(),
                u = r.getScaleForId(s.yAxisID),
                d = 0,
                c = 0;

            if (u.options.stacked) {
              for (i = 0; i < n; i++) {
                if (a = l.data.datasets[i], "line" === (o = l.getDatasetMeta(i)).type && o.yAxisID === u.id && l.isDatasetVisible(i)) {
                  var h = Number(u.getRightValue(a.data[e]));
                  h < 0 ? c += h || 0 : d += h || 0;
                }
              }

              var f = Number(u.getRightValue(t));
              return f < 0 ? u.getPixelForValue(c + f) : u.getPixelForValue(d + f);
            }

            return u.getPixelForValue(t);
          },
          updateBezierControlPoints: function updateBezierControlPoints() {
            function t(t, e, n) {
              return Math.max(Math.min(t, n), e);
            }

            var e,
                n,
                i,
                a,
                r = this,
                l = r.getMeta(),
                s = r.chart.chartArea,
                u = l.data || [];
            if (l.dataset._model.spanGaps && (u = u.filter(function (t) {
              return !t._model.skip;
            })), "monotone" === l.dataset._model.cubicInterpolationMode) o.splineCurveMonotone(u);else for (e = 0, n = u.length; e < n; ++e) {
              i = u[e]._model, a = o.splineCurve(o.previousItem(u, e)._model, i, o.nextItem(u, e)._model, l.dataset._model.tension), i.controlPointPreviousX = a.previous.x, i.controlPointPreviousY = a.previous.y, i.controlPointNextX = a.next.x, i.controlPointNextY = a.next.y;
            }
            if (r.chart.options.elements.line.capBezierPoints) for (e = 0, n = u.length; e < n; ++e) {
              (i = u[e]._model).controlPointPreviousX = t(i.controlPointPreviousX, s.left, s.right), i.controlPointPreviousY = t(i.controlPointPreviousY, s.top, s.bottom), i.controlPointNextX = t(i.controlPointNextX, s.left, s.right), i.controlPointNextY = t(i.controlPointNextY, s.top, s.bottom);
            }
          },
          draw: function draw() {
            var t = this,
                n = t.chart,
                i = t.getMeta(),
                a = i.data || [],
                r = n.chartArea,
                l = a.length,
                s = 0;

            for (o.canvas.clipArea(n.ctx, r), e(t.getDataset(), n.options) && i.dataset.draw(), o.canvas.unclipArea(n.ctx); s < l; ++s) {
              a[s].draw(r);
            }
          },
          setHoverStyle: function setHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t._index,
                i = t.custom || {},
                a = t._model;
            a.radius = i.hoverRadius || o.valueAtIndexOrDefault(e.pointHoverRadius, n, this.chart.options.elements.point.hoverRadius), a.backgroundColor = i.hoverBackgroundColor || o.valueAtIndexOrDefault(e.pointHoverBackgroundColor, n, o.getHoverColor(a.backgroundColor)), a.borderColor = i.hoverBorderColor || o.valueAtIndexOrDefault(e.pointHoverBorderColor, n, o.getHoverColor(a.borderColor)), a.borderWidth = i.hoverBorderWidth || o.valueAtIndexOrDefault(e.pointHoverBorderWidth, n, a.borderWidth);
          },
          removeHoverStyle: function removeHoverStyle(t) {
            var e = this,
                n = e.chart.data.datasets[t._datasetIndex],
                i = t._index,
                a = t.custom || {},
                r = t._model;
            void 0 !== n.radius && void 0 === n.pointRadius && (n.pointRadius = n.radius), r.radius = a.radius || o.valueAtIndexOrDefault(n.pointRadius, i, e.chart.options.elements.point.radius), r.backgroundColor = e.getPointBackgroundColor(t, i), r.borderColor = e.getPointBorderColor(t, i), r.borderWidth = e.getPointBorderWidth(t, i);
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    19: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("polarArea", {
        scale: {
          type: "radialLinear",
          angleLines: {
            display: !1
          },
          gridLines: {
            circular: !0
          },
          pointLabels: {
            display: !1
          },
          ticks: {
            beginAtZero: !0
          }
        },
        animation: {
          animateRotate: !0,
          animateScale: !0
        },
        startAngle: -.5 * Math.PI,
        legendCallback: function legendCallback(t) {
          var e = [];
          e.push('<ul class="' + t.id + '-legend">');
          var n = t.data,
              i = n.datasets,
              a = n.labels;
          if (i.length) for (var o = 0; o < i[0].data.length; ++o) {
            e.push('<li><span style="background-color:' + i[0].backgroundColor[o] + '"></span>'), a[o] && e.push(a[o]), e.push("</li>");
          }
          return e.push("</ul>"), e.join("");
        },
        legend: {
          labels: {
            generateLabels: function generateLabels(t) {
              var e = t.data;
              return e.labels.length && e.datasets.length ? e.labels.map(function (n, i) {
                var a = t.getDatasetMeta(0),
                    r = e.datasets[0],
                    l = a.data[i].custom || {},
                    s = o.valueAtIndexOrDefault,
                    u = t.options.elements.arc;
                return {
                  text: n,
                  fillStyle: l.backgroundColor ? l.backgroundColor : s(r.backgroundColor, i, u.backgroundColor),
                  strokeStyle: l.borderColor ? l.borderColor : s(r.borderColor, i, u.borderColor),
                  lineWidth: l.borderWidth ? l.borderWidth : s(r.borderWidth, i, u.borderWidth),
                  hidden: isNaN(r.data[i]) || a.data[i].hidden,
                  index: i
                };
              }) : [];
            }
          },
          onClick: function onClick(t, e) {
            var n,
                i,
                a,
                o = e.index,
                r = this.chart;

            for (n = 0, i = (r.data.datasets || []).length; n < i; ++n) {
              (a = r.getDatasetMeta(n)).data[o].hidden = !a.data[o].hidden;
            }

            r.update();
          }
        },
        tooltips: {
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(t, e) {
              return e.labels[t.index] + ": " + t.yLabel;
            }
          }
        }
      }), e.exports = function (t) {
        t.controllers.polarArea = t.DatasetController.extend({
          dataElementType: a.Arc,
          linkScales: o.noop,
          update: function update(t) {
            var e = this,
                n = e.chart,
                i = n.chartArea,
                a = e.getMeta(),
                r = n.options,
                l = r.elements.arc,
                s = Math.min(i.right - i.left, i.bottom - i.top);
            n.outerRadius = Math.max((s - l.borderWidth / 2) / 2, 0), n.innerRadius = Math.max(r.cutoutPercentage ? n.outerRadius / 100 * r.cutoutPercentage : 1, 0), n.radiusLength = (n.outerRadius - n.innerRadius) / n.getVisibleDatasetCount(), e.outerRadius = n.outerRadius - n.radiusLength * e.index, e.innerRadius = e.outerRadius - n.radiusLength, a.count = e.countVisibleElements(), o.each(a.data, function (n, i) {
              e.updateElement(n, i, t);
            });
          },
          updateElement: function updateElement(t, e, n) {
            for (var i = this, a = i.chart, r = i.getDataset(), l = a.options, s = l.animation, u = a.scale, d = a.data.labels, c = i.calculateCircumference(r.data[e]), h = u.xCenter, f = u.yCenter, g = 0, p = i.getMeta(), v = 0; v < e; ++v) {
              isNaN(r.data[v]) || p.data[v].hidden || ++g;
            }

            var m = l.startAngle,
                b = t.hidden ? 0 : u.getDistanceFromCenterForValue(r.data[e]),
                x = m + c * g,
                y = x + (t.hidden ? 0 : c),
                k = s.animateScale ? 0 : u.getDistanceFromCenterForValue(r.data[e]);
            o.extend(t, {
              _datasetIndex: i.index,
              _index: e,
              _scale: u,
              _model: {
                x: h,
                y: f,
                innerRadius: 0,
                outerRadius: n ? k : b,
                startAngle: n && s.animateRotate ? m : x,
                endAngle: n && s.animateRotate ? m : y,
                label: o.valueAtIndexOrDefault(d, e, d[e])
              }
            }), i.removeHoverStyle(t), t.pivot();
          },
          removeHoverStyle: function removeHoverStyle(e) {
            t.DatasetController.prototype.removeHoverStyle.call(this, e, this.chart.options.elements.arc);
          },
          countVisibleElements: function countVisibleElements() {
            var t = this.getDataset(),
                e = this.getMeta(),
                n = 0;
            return o.each(e.data, function (e, i) {
              isNaN(t.data[i]) || e.hidden || n++;
            }), n;
          },
          calculateCircumference: function calculateCircumference(t) {
            var e = this.getMeta().count;
            return e > 0 && !isNaN(t) ? 2 * Math.PI / e : 0;
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    20: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("radar", {
        scale: {
          type: "radialLinear"
        },
        elements: {
          line: {
            tension: 0
          }
        }
      }), e.exports = function (t) {
        t.controllers.radar = t.DatasetController.extend({
          datasetElementType: a.Line,
          dataElementType: a.Point,
          linkScales: o.noop,
          update: function update(t) {
            var e = this,
                n = e.getMeta(),
                i = n.dataset,
                a = n.data,
                r = i.custom || {},
                l = e.getDataset(),
                s = e.chart.options.elements.line,
                u = e.chart.scale;
            void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), o.extend(n.dataset, {
              _datasetIndex: e.index,
              _scale: u,
              _children: a,
              _loop: !0,
              _model: {
                tension: r.tension ? r.tension : o.valueOrDefault(l.lineTension, s.tension),
                backgroundColor: r.backgroundColor ? r.backgroundColor : l.backgroundColor || s.backgroundColor,
                borderWidth: r.borderWidth ? r.borderWidth : l.borderWidth || s.borderWidth,
                borderColor: r.borderColor ? r.borderColor : l.borderColor || s.borderColor,
                fill: r.fill ? r.fill : void 0 !== l.fill ? l.fill : s.fill,
                borderCapStyle: r.borderCapStyle ? r.borderCapStyle : l.borderCapStyle || s.borderCapStyle,
                borderDash: r.borderDash ? r.borderDash : l.borderDash || s.borderDash,
                borderDashOffset: r.borderDashOffset ? r.borderDashOffset : l.borderDashOffset || s.borderDashOffset,
                borderJoinStyle: r.borderJoinStyle ? r.borderJoinStyle : l.borderJoinStyle || s.borderJoinStyle
              }
            }), n.dataset.pivot(), o.each(a, function (n, i) {
              e.updateElement(n, i, t);
            }, e), e.updateBezierControlPoints();
          },
          updateElement: function updateElement(t, e, n) {
            var i = this,
                a = t.custom || {},
                r = i.getDataset(),
                l = i.chart.scale,
                s = i.chart.options.elements.point,
                u = l.getPointPositionForValue(e, r.data[e]);
            void 0 !== r.radius && void 0 === r.pointRadius && (r.pointRadius = r.radius), void 0 !== r.hitRadius && void 0 === r.pointHitRadius && (r.pointHitRadius = r.hitRadius), o.extend(t, {
              _datasetIndex: i.index,
              _index: e,
              _scale: l,
              _model: {
                x: n ? l.xCenter : u.x,
                y: n ? l.yCenter : u.y,
                tension: a.tension ? a.tension : o.valueOrDefault(r.lineTension, i.chart.options.elements.line.tension),
                radius: a.radius ? a.radius : o.valueAtIndexOrDefault(r.pointRadius, e, s.radius),
                backgroundColor: a.backgroundColor ? a.backgroundColor : o.valueAtIndexOrDefault(r.pointBackgroundColor, e, s.backgroundColor),
                borderColor: a.borderColor ? a.borderColor : o.valueAtIndexOrDefault(r.pointBorderColor, e, s.borderColor),
                borderWidth: a.borderWidth ? a.borderWidth : o.valueAtIndexOrDefault(r.pointBorderWidth, e, s.borderWidth),
                pointStyle: a.pointStyle ? a.pointStyle : o.valueAtIndexOrDefault(r.pointStyle, e, s.pointStyle),
                hitRadius: a.hitRadius ? a.hitRadius : o.valueAtIndexOrDefault(r.pointHitRadius, e, s.hitRadius)
              }
            }), t._model.skip = a.skip ? a.skip : isNaN(t._model.x) || isNaN(t._model.y);
          },
          updateBezierControlPoints: function updateBezierControlPoints() {
            var t = this.chart.chartArea,
                e = this.getMeta();
            o.each(e.data, function (n, i) {
              var a = n._model,
                  r = o.splineCurve(o.previousItem(e.data, i, !0)._model, a, o.nextItem(e.data, i, !0)._model, a.tension);
              a.controlPointPreviousX = Math.max(Math.min(r.previous.x, t.right), t.left), a.controlPointPreviousY = Math.max(Math.min(r.previous.y, t.bottom), t.top), a.controlPointNextX = Math.max(Math.min(r.next.x, t.right), t.left), a.controlPointNextY = Math.max(Math.min(r.next.y, t.bottom), t.top), n.pivot();
            });
          },
          setHoverStyle: function setHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t.custom || {},
                i = t._index,
                a = t._model;
            a.radius = n.hoverRadius ? n.hoverRadius : o.valueAtIndexOrDefault(e.pointHoverRadius, i, this.chart.options.elements.point.hoverRadius), a.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : o.valueAtIndexOrDefault(e.pointHoverBackgroundColor, i, o.getHoverColor(a.backgroundColor)), a.borderColor = n.hoverBorderColor ? n.hoverBorderColor : o.valueAtIndexOrDefault(e.pointHoverBorderColor, i, o.getHoverColor(a.borderColor)), a.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : o.valueAtIndexOrDefault(e.pointHoverBorderWidth, i, a.borderWidth);
          },
          removeHoverStyle: function removeHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t.custom || {},
                i = t._index,
                a = t._model,
                r = this.chart.options.elements.point;
            a.radius = n.radius ? n.radius : o.valueAtIndexOrDefault(e.pointRadius, i, r.radius), a.backgroundColor = n.backgroundColor ? n.backgroundColor : o.valueAtIndexOrDefault(e.pointBackgroundColor, i, r.backgroundColor), a.borderColor = n.borderColor ? n.borderColor : o.valueAtIndexOrDefault(e.pointBorderColor, i, r.borderColor), a.borderWidth = n.borderWidth ? n.borderWidth : o.valueAtIndexOrDefault(e.pointBorderWidth, i, r.borderWidth);
          }
        });
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    21: [function (t, e, n) {
      "use strict";

      t(25)._set("scatter", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            id: "x-axis-1",
            type: "linear",
            position: "bottom"
          }],
          yAxes: [{
            id: "y-axis-1",
            type: "linear",
            position: "left"
          }]
        },
        showLines: !1,
        tooltips: {
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(t) {
              return "(" + t.xLabel + ", " + t.yLabel + ")";
            }
          }
        }
      }), e.exports = function (t) {
        t.controllers.scatter = t.controllers.line;
      };
    }, {
      25: 25
    }],
    22: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        animation: {
          duration: 1e3,
          easing: "easeOutQuart",
          onProgress: o.noop,
          onComplete: o.noop
        }
      }), e.exports = function (t) {
        t.Animation = a.extend({
          chart: null,
          currentStep: 0,
          numSteps: 60,
          easing: "",
          render: null,
          onAnimationProgress: null,
          onAnimationComplete: null
        }), t.animationService = {
          frameDuration: 17,
          animations: [],
          dropFrames: 0,
          request: null,
          addAnimation: function addAnimation(t, e, n, i) {
            var a,
                o,
                r = this.animations;

            for (e.chart = t, i || (t.animating = !0), a = 0, o = r.length; a < o; ++a) {
              if (r[a].chart === t) return void (r[a] = e);
            }

            r.push(e), 1 === r.length && this.requestAnimationFrame();
          },
          cancelAnimation: function cancelAnimation(t) {
            var e = o.findIndex(this.animations, function (e) {
              return e.chart === t;
            });
            -1 !== e && (this.animations.splice(e, 1), t.animating = !1);
          },
          requestAnimationFrame: function requestAnimationFrame() {
            var t = this;
            null === t.request && (t.request = o.requestAnimFrame.call(window, function () {
              t.request = null, t.startDigest();
            }));
          },
          startDigest: function startDigest() {
            var t = this,
                e = Date.now(),
                n = 0;
            t.dropFrames > 1 && (n = Math.floor(t.dropFrames), t.dropFrames = t.dropFrames % 1), t.advance(1 + n);
            var i = Date.now();
            t.dropFrames += (i - e) / t.frameDuration, t.animations.length > 0 && t.requestAnimationFrame();
          },
          advance: function advance(t) {
            for (var e, n, i = this.animations, a = 0; a < i.length;) {
              n = (e = i[a]).chart, e.currentStep = (e.currentStep || 0) + t, e.currentStep = Math.min(e.currentStep, e.numSteps), o.callback(e.render, [n, e], n), o.callback(e.onAnimationProgress, [e], n), e.currentStep >= e.numSteps ? (o.callback(e.onAnimationComplete, [e], n), n.animating = !1, i.splice(a, 1)) : ++a;
            }
          }
        }, Object.defineProperty(t.Animation.prototype, "animationObject", {
          get: function get() {
            return this;
          }
        }), Object.defineProperty(t.Animation.prototype, "chartInstance", {
          get: function get() {
            return this.chart;
          },
          set: function set(t) {
            this.chart = t;
          }
        });
      };
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    23: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(45),
          o = t(28),
          r = t(48);

      e.exports = function (t) {
        function e(t) {
          var e = (t = t || {}).data = t.data || {};
          return e.datasets = e.datasets || [], e.labels = e.labels || [], t.options = a.configMerge(i.global, i[t.type], t.options || {}), t;
        }

        function n(t) {
          var e = t.options;
          e.scale ? t.scale.options = e.scale : e.scales && e.scales.xAxes.concat(e.scales.yAxes).forEach(function (e) {
            t.scales[e.id].options = e;
          }), t.tooltip._options = e.tooltips;
        }

        function l(t) {
          return "top" === t || "bottom" === t;
        }

        var s = t.plugins;
        t.types = {}, t.instances = {}, t.controllers = {}, a.extend(t.prototype, {
          construct: function construct(n, i) {
            var o = this;
            i = e(i);
            var l = r.acquireContext(n, i),
                s = l && l.canvas,
                u = s && s.height,
                d = s && s.width;
            o.id = a.uid(), o.ctx = l, o.canvas = s, o.config = i, o.width = d, o.height = u, o.aspectRatio = u ? d / u : null, o.options = i.options, o._bufferedRender = !1, o.chart = o, o.controller = o, t.instances[o.id] = o, Object.defineProperty(o, "data", {
              get: function get() {
                return o.config.data;
              },
              set: function set(t) {
                o.config.data = t;
              }
            }), l && s ? (o.initialize(), o.update()) : console.error("Failed to create chart: can't acquire context from the given item");
          },
          initialize: function initialize() {
            var t = this;
            return s.notify(t, "beforeInit"), a.retinaScale(t, t.options.devicePixelRatio), t.bindEvents(), t.options.responsive && t.resize(!0), t.ensureScalesHaveIDs(), t.buildScales(), t.initToolTip(), s.notify(t, "afterInit"), t;
          },
          clear: function clear() {
            return a.canvas.clear(this), this;
          },
          stop: function stop() {
            return t.animationService.cancelAnimation(this), this;
          },
          resize: function resize(t) {
            var e = this,
                n = e.options,
                i = e.canvas,
                o = n.maintainAspectRatio && e.aspectRatio || null,
                r = Math.max(0, Math.floor(a.getMaximumWidth(i))),
                l = Math.max(0, Math.floor(o ? r / o : a.getMaximumHeight(i)));

            if ((e.width !== r || e.height !== l) && (i.width = e.width = r, i.height = e.height = l, i.style.width = r + "px", i.style.height = l + "px", a.retinaScale(e, n.devicePixelRatio), !t)) {
              var u = {
                width: r,
                height: l
              };
              s.notify(e, "resize", [u]), e.options.onResize && e.options.onResize(e, u), e.stop(), e.update(e.options.responsiveAnimationDuration);
            }
          },
          ensureScalesHaveIDs: function ensureScalesHaveIDs() {
            var t = this.options,
                e = t.scales || {},
                n = t.scale;
            a.each(e.xAxes, function (t, e) {
              t.id = t.id || "x-axis-" + e;
            }), a.each(e.yAxes, function (t, e) {
              t.id = t.id || "y-axis-" + e;
            }), n && (n.id = n.id || "scale");
          },
          buildScales: function buildScales() {
            var e = this,
                n = e.options,
                i = e.scales = {},
                o = [];
            n.scales && (o = o.concat((n.scales.xAxes || []).map(function (t) {
              return {
                options: t,
                dtype: "category",
                dposition: "bottom"
              };
            }), (n.scales.yAxes || []).map(function (t) {
              return {
                options: t,
                dtype: "linear",
                dposition: "left"
              };
            }))), n.scale && o.push({
              options: n.scale,
              dtype: "radialLinear",
              isDefault: !0,
              dposition: "chartArea"
            }), a.each(o, function (n) {
              var o = n.options,
                  r = a.valueOrDefault(o.type, n.dtype),
                  s = t.scaleService.getScaleConstructor(r);

              if (s) {
                l(o.position) !== l(n.dposition) && (o.position = n.dposition);
                var u = new s({
                  id: o.id,
                  options: o,
                  ctx: e.ctx,
                  chart: e
                });
                i[u.id] = u, u.mergeTicksOptions(), n.isDefault && (e.scale = u);
              }
            }), t.scaleService.addScalesToLayout(this);
          },
          buildOrUpdateControllers: function buildOrUpdateControllers() {
            var e = this,
                n = [],
                i = [];
            return a.each(e.data.datasets, function (a, o) {
              var r = e.getDatasetMeta(o),
                  l = a.type || e.config.type;
              if (r.type && r.type !== l && (e.destroyDatasetMeta(o), r = e.getDatasetMeta(o)), r.type = l, n.push(r.type), r.controller) r.controller.updateIndex(o);else {
                var s = t.controllers[r.type];
                if (void 0 === s) throw new Error('"' + r.type + '" is not a chart type.');
                r.controller = new s(e, o), i.push(r.controller);
              }
            }, e), i;
          },
          resetElements: function resetElements() {
            var t = this;
            a.each(t.data.datasets, function (e, n) {
              t.getDatasetMeta(n).controller.reset();
            }, t);
          },
          reset: function reset() {
            this.resetElements(), this.tooltip.initialize();
          },
          update: function update(t) {
            var e = this;

            if (t && "object" == _typeof(t) || (t = {
              duration: t,
              lazy: arguments[1]
            }), n(e), !1 !== s.notify(e, "beforeUpdate")) {
              e.tooltip._data = e.data;
              var i = e.buildOrUpdateControllers();
              a.each(e.data.datasets, function (t, n) {
                e.getDatasetMeta(n).controller.buildOrUpdateElements();
              }, e), e.updateLayout(), a.each(i, function (t) {
                t.reset();
              }), e.updateDatasets(), s.notify(e, "afterUpdate"), e._bufferedRender ? e._bufferedRequest = {
                duration: t.duration,
                easing: t.easing,
                lazy: t.lazy
              } : e.render(t);
            }
          },
          updateLayout: function updateLayout() {
            var e = this;
            !1 !== s.notify(e, "beforeLayout") && (t.layoutService.update(this, this.width, this.height), s.notify(e, "afterScaleUpdate"), s.notify(e, "afterLayout"));
          },
          updateDatasets: function updateDatasets() {
            var t = this;

            if (!1 !== s.notify(t, "beforeDatasetsUpdate")) {
              for (var e = 0, n = t.data.datasets.length; e < n; ++e) {
                t.updateDataset(e);
              }

              s.notify(t, "afterDatasetsUpdate");
            }
          },
          updateDataset: function updateDataset(t) {
            var e = this,
                n = e.getDatasetMeta(t),
                i = {
              meta: n,
              index: t
            };
            !1 !== s.notify(e, "beforeDatasetUpdate", [i]) && (n.controller.update(), s.notify(e, "afterDatasetUpdate", [i]));
          },
          render: function render(e) {
            var n = this;
            e && "object" == _typeof(e) || (e = {
              duration: e,
              lazy: arguments[1]
            });
            var i = e.duration,
                o = e.lazy;

            if (!1 !== s.notify(n, "beforeRender")) {
              var r = n.options.animation,
                  l = function l(t) {
                s.notify(n, "afterRender"), a.callback(r && r.onComplete, [t], n);
              };

              if (r && (void 0 !== i && 0 !== i || void 0 === i && 0 !== r.duration)) {
                var u = new t.Animation({
                  numSteps: (i || r.duration) / 16.66,
                  easing: e.easing || r.easing,
                  render: function render(t, e) {
                    var n = a.easing.effects[e.easing],
                        i = e.currentStep,
                        o = i / e.numSteps;
                    t.draw(n(o), o, i);
                  },
                  onAnimationProgress: r.onProgress,
                  onAnimationComplete: l
                });
                t.animationService.addAnimation(n, u, i, o);
              } else n.draw(), l(new t.Animation({
                numSteps: 0,
                chart: n
              }));

              return n;
            }
          },
          draw: function draw(t) {
            var e = this;
            e.clear(), a.isNullOrUndef(t) && (t = 1), e.transition(t), !1 !== s.notify(e, "beforeDraw", [t]) && (a.each(e.boxes, function (t) {
              t.draw(e.chartArea);
            }, e), e.scale && e.scale.draw(), e.drawDatasets(t), e.tooltip.draw(), s.notify(e, "afterDraw", [t]));
          },
          transition: function transition(t) {
            for (var e = this, n = 0, i = (e.data.datasets || []).length; n < i; ++n) {
              e.isDatasetVisible(n) && e.getDatasetMeta(n).controller.transition(t);
            }

            e.tooltip.transition(t);
          },
          drawDatasets: function drawDatasets(t) {
            var e = this;

            if (!1 !== s.notify(e, "beforeDatasetsDraw", [t])) {
              for (var n = (e.data.datasets || []).length - 1; n >= 0; --n) {
                e.isDatasetVisible(n) && e.drawDataset(n, t);
              }

              s.notify(e, "afterDatasetsDraw", [t]);
            }
          },
          drawDataset: function drawDataset(t, e) {
            var n = this,
                i = n.getDatasetMeta(t),
                a = {
              meta: i,
              index: t,
              easingValue: e
            };
            !1 !== s.notify(n, "beforeDatasetDraw", [a]) && (i.controller.draw(e), s.notify(n, "afterDatasetDraw", [a]));
          },
          getElementAtEvent: function getElementAtEvent(t) {
            return o.modes.single(this, t);
          },
          getElementsAtEvent: function getElementsAtEvent(t) {
            return o.modes.label(this, t, {
              intersect: !0
            });
          },
          getElementsAtXAxis: function getElementsAtXAxis(t) {
            return o.modes["x-axis"](this, t, {
              intersect: !0
            });
          },
          getElementsAtEventForMode: function getElementsAtEventForMode(t, e, n) {
            var i = o.modes[e];
            return "function" == typeof i ? i(this, t, n) : [];
          },
          getDatasetAtEvent: function getDatasetAtEvent(t) {
            return o.modes.dataset(this, t, {
              intersect: !0
            });
          },
          getDatasetMeta: function getDatasetMeta(t) {
            var e = this,
                n = e.data.datasets[t];
            n._meta || (n._meta = {});
            var i = n._meta[e.id];
            return i || (i = n._meta[e.id] = {
              type: null,
              data: [],
              dataset: null,
              controller: null,
              hidden: null,
              xAxisID: null,
              yAxisID: null
            }), i;
          },
          getVisibleDatasetCount: function getVisibleDatasetCount() {
            for (var t = 0, e = 0, n = this.data.datasets.length; e < n; ++e) {
              this.isDatasetVisible(e) && t++;
            }

            return t;
          },
          isDatasetVisible: function isDatasetVisible(t) {
            var e = this.getDatasetMeta(t);
            return "boolean" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;
          },
          generateLegend: function generateLegend() {
            return this.options.legendCallback(this);
          },
          destroyDatasetMeta: function destroyDatasetMeta(t) {
            var e = this.id,
                n = this.data.datasets[t],
                i = n._meta && n._meta[e];
            i && (i.controller.destroy(), delete n._meta[e]);
          },
          destroy: function destroy() {
            var e,
                n,
                i = this,
                o = i.canvas;

            for (i.stop(), e = 0, n = i.data.datasets.length; e < n; ++e) {
              i.destroyDatasetMeta(e);
            }

            o && (i.unbindEvents(), a.canvas.clear(i), r.releaseContext(i.ctx), i.canvas = null, i.ctx = null), s.notify(i, "destroy"), delete t.instances[i.id];
          },
          toBase64Image: function toBase64Image() {
            return this.canvas.toDataURL.apply(this.canvas, arguments);
          },
          initToolTip: function initToolTip() {
            var e = this;
            e.tooltip = new t.Tooltip({
              _chart: e,
              _chartInstance: e,
              _data: e.data,
              _options: e.options.tooltips
            }, e);
          },
          bindEvents: function bindEvents() {
            var t = this,
                e = t._listeners = {},
                n = function n() {
              t.eventHandler.apply(t, arguments);
            };

            a.each(t.options.events, function (i) {
              r.addEventListener(t, i, n), e[i] = n;
            }), t.options.responsive && (n = function n() {
              t.resize();
            }, r.addEventListener(t, "resize", n), e.resize = n);
          },
          unbindEvents: function unbindEvents() {
            var t = this,
                e = t._listeners;
            e && (delete t._listeners, a.each(e, function (e, n) {
              r.removeEventListener(t, n, e);
            }));
          },
          updateHoverStyle: function updateHoverStyle(t, e, n) {
            var i,
                a,
                o,
                r = n ? "setHoverStyle" : "removeHoverStyle";

            for (a = 0, o = t.length; a < o; ++a) {
              (i = t[a]) && this.getDatasetMeta(i._datasetIndex).controller[r](i);
            }
          },
          eventHandler: function eventHandler(t) {
            var e = this,
                n = e.tooltip;

            if (!1 !== s.notify(e, "beforeEvent", [t])) {
              e._bufferedRender = !0, e._bufferedRequest = null;
              var i = e.handleEvent(t);
              i |= n && n.handleEvent(t), s.notify(e, "afterEvent", [t]);
              var a = e._bufferedRequest;
              return a ? e.render(a) : i && !e.animating && (e.stop(), e.render(e.options.hover.animationDuration, !0)), e._bufferedRender = !1, e._bufferedRequest = null, e;
            }
          },
          handleEvent: function handleEvent(t) {
            var e = this,
                n = e.options || {},
                i = n.hover,
                o = !1;
            return e.lastActive = e.lastActive || [], "mouseout" === t.type ? e.active = [] : e.active = e.getElementsAtEventForMode(t, i.mode, i), a.callback(n.onHover || n.hover.onHover, [t["native"], e.active], e), "mouseup" !== t.type && "click" !== t.type || n.onClick && n.onClick.call(e, t["native"], e.active), e.lastActive.length && e.updateHoverStyle(e.lastActive, i.mode, !1), e.active.length && i.mode && e.updateHoverStyle(e.active, i.mode, !0), o = !a.arrayEquals(e.active, e.lastActive), e.lastActive = e.active, o;
          }
        }), t.Controller = t;
      };
    }, {
      25: 25,
      28: 28,
      45: 45,
      48: 48
    }],
    24: [function (t, e, n) {
      "use strict";

      var i = t(45);

      e.exports = function (t) {
        function e(t, e) {
          t._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, "_chartjs", {
            configurable: !0,
            enumerable: !1,
            value: {
              listeners: [e]
            }
          }), a.forEach(function (e) {
            var n = "onData" + e.charAt(0).toUpperCase() + e.slice(1),
                a = t[e];
            Object.defineProperty(t, e, {
              configurable: !0,
              enumerable: !1,
              value: function value() {
                var e = Array.prototype.slice.call(arguments),
                    o = a.apply(this, e);
                return i.each(t._chartjs.listeners, function (t) {
                  "function" == typeof t[n] && t[n].apply(t, e);
                }), o;
              }
            });
          }));
        }

        function n(t, e) {
          var n = t._chartjs;

          if (n) {
            var i = n.listeners,
                o = i.indexOf(e);
            -1 !== o && i.splice(o, 1), i.length > 0 || (a.forEach(function (e) {
              delete t[e];
            }), delete t._chartjs);
          }
        }

        var a = ["push", "pop", "shift", "splice", "unshift"];
        t.DatasetController = function (t, e) {
          this.initialize(t, e);
        }, i.extend(t.DatasetController.prototype, {
          datasetElementType: null,
          dataElementType: null,
          initialize: function initialize(t, e) {
            var n = this;
            n.chart = t, n.index = e, n.linkScales(), n.addElements();
          },
          updateIndex: function updateIndex(t) {
            this.index = t;
          },
          linkScales: function linkScales() {
            var t = this,
                e = t.getMeta(),
                n = t.getDataset();
            null === e.xAxisID && (e.xAxisID = n.xAxisID || t.chart.options.scales.xAxes[0].id), null === e.yAxisID && (e.yAxisID = n.yAxisID || t.chart.options.scales.yAxes[0].id);
          },
          getDataset: function getDataset() {
            return this.chart.data.datasets[this.index];
          },
          getMeta: function getMeta() {
            return this.chart.getDatasetMeta(this.index);
          },
          getScaleForId: function getScaleForId(t) {
            return this.chart.scales[t];
          },
          reset: function reset() {
            this.update(!0);
          },
          destroy: function destroy() {
            this._data && n(this._data, this);
          },
          createMetaDataset: function createMetaDataset() {
            var t = this,
                e = t.datasetElementType;
            return e && new e({
              _chart: t.chart,
              _datasetIndex: t.index
            });
          },
          createMetaData: function createMetaData(t) {
            var e = this,
                n = e.dataElementType;
            return n && new n({
              _chart: e.chart,
              _datasetIndex: e.index,
              _index: t
            });
          },
          addElements: function addElements() {
            var t,
                e,
                n = this,
                i = n.getMeta(),
                a = n.getDataset().data || [],
                o = i.data;

            for (t = 0, e = a.length; t < e; ++t) {
              o[t] = o[t] || n.createMetaData(t);
            }

            i.dataset = i.dataset || n.createMetaDataset();
          },
          addElementAndReset: function addElementAndReset(t) {
            var e = this.createMetaData(t);
            this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);
          },
          buildOrUpdateElements: function buildOrUpdateElements() {
            var t = this,
                i = t.getDataset(),
                a = i.data || (i.data = []);
            t._data !== a && (t._data && n(t._data, t), e(a, t), t._data = a), t.resyncElements();
          },
          update: i.noop,
          transition: function transition(t) {
            for (var e = this.getMeta(), n = e.data || [], i = n.length, a = 0; a < i; ++a) {
              n[a].transition(t);
            }

            e.dataset && e.dataset.transition(t);
          },
          draw: function draw() {
            var t = this.getMeta(),
                e = t.data || [],
                n = e.length,
                i = 0;

            for (t.dataset && t.dataset.draw(); i < n; ++i) {
              e[i].draw();
            }
          },
          removeHoverStyle: function removeHoverStyle(t, e) {
            var n = this.chart.data.datasets[t._datasetIndex],
                a = t._index,
                o = t.custom || {},
                r = i.valueAtIndexOrDefault,
                l = t._model;
            l.backgroundColor = o.backgroundColor ? o.backgroundColor : r(n.backgroundColor, a, e.backgroundColor), l.borderColor = o.borderColor ? o.borderColor : r(n.borderColor, a, e.borderColor), l.borderWidth = o.borderWidth ? o.borderWidth : r(n.borderWidth, a, e.borderWidth);
          },
          setHoverStyle: function setHoverStyle(t) {
            var e = this.chart.data.datasets[t._datasetIndex],
                n = t._index,
                a = t.custom || {},
                o = i.valueAtIndexOrDefault,
                r = i.getHoverColor,
                l = t._model;
            l.backgroundColor = a.hoverBackgroundColor ? a.hoverBackgroundColor : o(e.hoverBackgroundColor, n, r(l.backgroundColor)), l.borderColor = a.hoverBorderColor ? a.hoverBorderColor : o(e.hoverBorderColor, n, r(l.borderColor)), l.borderWidth = a.hoverBorderWidth ? a.hoverBorderWidth : o(e.hoverBorderWidth, n, l.borderWidth);
          },
          resyncElements: function resyncElements() {
            var t = this,
                e = t.getMeta(),
                n = t.getDataset().data,
                i = e.data.length,
                a = n.length;
            a < i ? e.data.splice(a, i - a) : a > i && t.insertElements(i, a - i);
          },
          insertElements: function insertElements(t, e) {
            for (var n = 0; n < e; ++n) {
              this.addElementAndReset(t + n);
            }
          },
          onDataPush: function onDataPush() {
            this.insertElements(this.getDataset().data.length - 1, arguments.length);
          },
          onDataPop: function onDataPop() {
            this.getMeta().data.pop();
          },
          onDataShift: function onDataShift() {
            this.getMeta().data.shift();
          },
          onDataSplice: function onDataSplice(t, e) {
            this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);
          },
          onDataUnshift: function onDataUnshift() {
            this.insertElements(0, arguments.length);
          }
        }), t.DatasetController.extend = i.inherits;
      };
    }, {
      45: 45
    }],
    25: [function (t, e, n) {
      "use strict";

      var i = t(45);
      e.exports = {
        _set: function _set(t, e) {
          return i.merge(this[t] || (this[t] = {}), e);
        }
      };
    }, {
      45: 45
    }],
    26: [function (t, e, n) {
      "use strict";

      function i(t, e, n, i) {
        var o,
            r,
            l,
            s,
            u,
            d,
            c,
            h,
            f,
            g = Object.keys(n);

        for (o = 0, r = g.length; o < r; ++o) {
          if (l = g[o], d = n[l], e.hasOwnProperty(l) || (e[l] = d), (s = e[l]) !== d && "_" !== l[0]) {
            if (t.hasOwnProperty(l) || (t[l] = s), u = t[l], (c = _typeof(d)) === _typeof(u)) if ("string" === c) {
              if ((h = a(u)).valid && (f = a(d)).valid) {
                e[l] = f.mix(h, i).rgbString();
                continue;
              }
            } else if ("number" === c && isFinite(u) && isFinite(d)) {
              e[l] = u + (d - u) * i;
              continue;
            }
            e[l] = d;
          }
        }
      }

      var a = t(3),
          o = t(45),
          r = function r(t) {
        o.extend(this, t), this.initialize.apply(this, arguments);
      };

      o.extend(r.prototype, {
        initialize: function initialize() {
          this.hidden = !1;
        },
        pivot: function pivot() {
          var t = this;
          return t._view || (t._view = o.clone(t._model)), t._start = {}, t;
        },
        transition: function transition(t) {
          var e = this,
              n = e._model,
              a = e._start,
              o = e._view;
          return n && 1 !== t ? (o || (o = e._view = {}), a || (a = e._start = {}), i(a, o, n, t), e) : (e._view = n, e._start = null, e);
        },
        tooltipPosition: function tooltipPosition() {
          return {
            x: this._model.x,
            y: this._model.y
          };
        },
        hasValue: function hasValue() {
          return o.isNumber(this._model.x) && o.isNumber(this._model.y);
        }
      }), r.extend = o.inherits, e.exports = r;
    }, {
      3: 3,
      45: 45
    }],
    27: [function (t, e, n) {
      "use strict";

      var i = t(3),
          a = t(25),
          o = t(45);

      e.exports = function (t) {
        function e(t, e, n) {
          var i;
          return "string" == typeof t ? (i = parseInt(t, 10), -1 !== t.indexOf("%") && (i = i / 100 * e.parentNode[n])) : i = t, i;
        }

        function n(t) {
          return void 0 !== t && null !== t && "none" !== t;
        }

        function r(t, i, a) {
          var o = document.defaultView,
              r = t.parentNode,
              l = o.getComputedStyle(t)[i],
              s = o.getComputedStyle(r)[i],
              u = n(l),
              d = n(s),
              c = Number.POSITIVE_INFINITY;
          return u || d ? Math.min(u ? e(l, t, a) : c, d ? e(s, r, a) : c) : "none";
        }

        o.extend = function (t) {
          for (var e = 1, n = arguments.length; e < n; e++) {
            o.each(arguments[e], function (e, n) {
              t[n] = e;
            });
          }

          return t;
        }, o.configMerge = function () {
          return o.merge(o.clone(arguments[0]), [].slice.call(arguments, 1), {
            merger: function merger(e, n, i, a) {
              var r = n[e] || {},
                  l = i[e];
              "scales" === e ? n[e] = o.scaleMerge(r, l) : "scale" === e ? n[e] = o.merge(r, [t.scaleService.getScaleDefaults(l.type), l]) : o._merger(e, n, i, a);
            }
          });
        }, o.scaleMerge = function () {
          return o.merge(o.clone(arguments[0]), [].slice.call(arguments, 1), {
            merger: function merger(e, n, i, a) {
              if ("xAxes" === e || "yAxes" === e) {
                var r,
                    l,
                    s,
                    u = i[e].length;

                for (n[e] || (n[e] = []), r = 0; r < u; ++r) {
                  s = i[e][r], l = o.valueOrDefault(s.type, "xAxes" === e ? "category" : "linear"), r >= n[e].length && n[e].push({}), !n[e][r].type || s.type && s.type !== n[e][r].type ? o.merge(n[e][r], [t.scaleService.getScaleDefaults(l), s]) : o.merge(n[e][r], s);
                }
              } else o._merger(e, n, i, a);
            }
          });
        }, o.where = function (t, e) {
          if (o.isArray(t) && Array.prototype.filter) return t.filter(e);
          var n = [];
          return o.each(t, function (t) {
            e(t) && n.push(t);
          }), n;
        }, o.findIndex = Array.prototype.findIndex ? function (t, e, n) {
          return t.findIndex(e, n);
        } : function (t, e, n) {
          n = void 0 === n ? t : n;

          for (var i = 0, a = t.length; i < a; ++i) {
            if (e.call(n, t[i], i, t)) return i;
          }

          return -1;
        }, o.findNextWhere = function (t, e, n) {
          o.isNullOrUndef(n) && (n = -1);

          for (var i = n + 1; i < t.length; i++) {
            var a = t[i];
            if (e(a)) return a;
          }
        }, o.findPreviousWhere = function (t, e, n) {
          o.isNullOrUndef(n) && (n = t.length);

          for (var i = n - 1; i >= 0; i--) {
            var a = t[i];
            if (e(a)) return a;
          }
        }, o.inherits = function (t) {
          var e = this,
              n = t && t.hasOwnProperty("constructor") ? t.constructor : function () {
            return e.apply(this, arguments);
          },
              i = function i() {
            this.constructor = n;
          };

          return i.prototype = e.prototype, n.prototype = new i(), n.extend = o.inherits, t && o.extend(n.prototype, t), n.__super__ = e.prototype, n;
        }, o.isNumber = function (t) {
          return !isNaN(parseFloat(t)) && isFinite(t);
        }, o.almostEquals = function (t, e, n) {
          return Math.abs(t - e) < n;
        }, o.almostWhole = function (t, e) {
          var n = Math.round(t);
          return n - e < t && n + e > t;
        }, o.max = function (t) {
          return t.reduce(function (t, e) {
            return isNaN(e) ? t : Math.max(t, e);
          }, Number.NEGATIVE_INFINITY);
        }, o.min = function (t) {
          return t.reduce(function (t, e) {
            return isNaN(e) ? t : Math.min(t, e);
          }, Number.POSITIVE_INFINITY);
        }, o.sign = Math.sign ? function (t) {
          return Math.sign(t);
        } : function (t) {
          return 0 == (t = +t) || isNaN(t) ? t : t > 0 ? 1 : -1;
        }, o.log10 = Math.log10 ? function (t) {
          return Math.log10(t);
        } : function (t) {
          return Math.log(t) / Math.LN10;
        }, o.toRadians = function (t) {
          return t * (Math.PI / 180);
        }, o.toDegrees = function (t) {
          return t * (180 / Math.PI);
        }, o.getAngleFromPoint = function (t, e) {
          var n = e.x - t.x,
              i = e.y - t.y,
              a = Math.sqrt(n * n + i * i),
              o = Math.atan2(i, n);
          return o < -.5 * Math.PI && (o += 2 * Math.PI), {
            angle: o,
            distance: a
          };
        }, o.distanceBetweenPoints = function (t, e) {
          return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
        }, o.aliasPixel = function (t) {
          return t % 2 == 0 ? 0 : .5;
        }, o.splineCurve = function (t, e, n, i) {
          var a = t.skip ? e : t,
              o = e,
              r = n.skip ? e : n,
              l = Math.sqrt(Math.pow(o.x - a.x, 2) + Math.pow(o.y - a.y, 2)),
              s = Math.sqrt(Math.pow(r.x - o.x, 2) + Math.pow(r.y - o.y, 2)),
              u = l / (l + s),
              d = s / (l + s),
              c = i * (u = isNaN(u) ? 0 : u),
              h = i * (d = isNaN(d) ? 0 : d);
          return {
            previous: {
              x: o.x - c * (r.x - a.x),
              y: o.y - c * (r.y - a.y)
            },
            next: {
              x: o.x + h * (r.x - a.x),
              y: o.y + h * (r.y - a.y)
            }
          };
        }, o.EPSILON = Number.EPSILON || 1e-14, o.splineCurveMonotone = function (t) {
          var e,
              n,
              i,
              a,
              r = (t || []).map(function (t) {
            return {
              model: t._model,
              deltaK: 0,
              mK: 0
            };
          }),
              l = r.length;

          for (e = 0; e < l; ++e) {
            if (!(i = r[e]).model.skip) {
              if (n = e > 0 ? r[e - 1] : null, (a = e < l - 1 ? r[e + 1] : null) && !a.model.skip) {
                var s = a.model.x - i.model.x;
                i.deltaK = 0 !== s ? (a.model.y - i.model.y) / s : 0;
              }

              !n || n.model.skip ? i.mK = i.deltaK : !a || a.model.skip ? i.mK = n.deltaK : this.sign(n.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (n.deltaK + i.deltaK) / 2;
            }
          }

          var u, d, c, h;

          for (e = 0; e < l - 1; ++e) {
            i = r[e], a = r[e + 1], i.model.skip || a.model.skip || (o.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = a.mK = 0 : (u = i.mK / i.deltaK, d = a.mK / i.deltaK, (h = Math.pow(u, 2) + Math.pow(d, 2)) <= 9 || (c = 3 / Math.sqrt(h), i.mK = u * c * i.deltaK, a.mK = d * c * i.deltaK)));
          }

          var f;

          for (e = 0; e < l; ++e) {
            (i = r[e]).model.skip || (n = e > 0 ? r[e - 1] : null, a = e < l - 1 ? r[e + 1] : null, n && !n.model.skip && (f = (i.model.x - n.model.x) / 3, i.model.controlPointPreviousX = i.model.x - f, i.model.controlPointPreviousY = i.model.y - f * i.mK), a && !a.model.skip && (f = (a.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + f, i.model.controlPointNextY = i.model.y + f * i.mK));
          }
        }, o.nextItem = function (t, e, n) {
          return n ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];
        }, o.previousItem = function (t, e, n) {
          return n ? e <= 0 ? t[t.length - 1] : t[e - 1] : e <= 0 ? t[0] : t[e - 1];
        }, o.niceNum = function (t, e) {
          var n = Math.floor(o.log10(t)),
              i = t / Math.pow(10, n);
          return (e ? i < 1.5 ? 1 : i < 3 ? 2 : i < 7 ? 5 : 10 : i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * Math.pow(10, n);
        }, o.requestAnimFrame = "undefined" == typeof window ? function (t) {
          t();
        } : window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {
          return window.setTimeout(t, 1e3 / 60);
        }, o.getRelativePosition = function (t, e) {
          var n,
              i,
              a = t.originalEvent || t,
              r = t.currentTarget || t.srcElement,
              l = r.getBoundingClientRect(),
              s = a.touches;
          s && s.length > 0 ? (n = s[0].clientX, i = s[0].clientY) : (n = a.clientX, i = a.clientY);
          var u = parseFloat(o.getStyle(r, "padding-left")),
              d = parseFloat(o.getStyle(r, "padding-top")),
              c = parseFloat(o.getStyle(r, "padding-right")),
              h = parseFloat(o.getStyle(r, "padding-bottom")),
              f = l.right - l.left - u - c,
              g = l.bottom - l.top - d - h;
          return n = Math.round((n - l.left - u) / f * r.width / e.currentDevicePixelRatio), i = Math.round((i - l.top - d) / g * r.height / e.currentDevicePixelRatio), {
            x: n,
            y: i
          };
        }, o.getConstraintWidth = function (t) {
          return r(t, "max-width", "clientWidth");
        }, o.getConstraintHeight = function (t) {
          return r(t, "max-height", "clientHeight");
        }, o.getMaximumWidth = function (t) {
          var e = t.parentNode;
          if (!e) return t.clientWidth;
          var n = parseInt(o.getStyle(e, "padding-left"), 10),
              i = parseInt(o.getStyle(e, "padding-right"), 10),
              a = e.clientWidth - n - i,
              r = o.getConstraintWidth(t);
          return isNaN(r) ? a : Math.min(a, r);
        }, o.getMaximumHeight = function (t) {
          var e = t.parentNode;
          if (!e) return t.clientHeight;
          var n = parseInt(o.getStyle(e, "padding-top"), 10),
              i = parseInt(o.getStyle(e, "padding-bottom"), 10),
              a = e.clientHeight - n - i,
              r = o.getConstraintHeight(t);
          return isNaN(r) ? a : Math.min(a, r);
        }, o.getStyle = function (t, e) {
          return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);
        }, o.retinaScale = function (t, e) {
          var n = t.currentDevicePixelRatio = e || window.devicePixelRatio || 1;

          if (1 !== n) {
            var i = t.canvas,
                a = t.height,
                o = t.width;
            i.height = a * n, i.width = o * n, t.ctx.scale(n, n), i.style.height = a + "px", i.style.width = o + "px";
          }
        }, o.fontString = function (t, e, n) {
          return e + " " + t + "px " + n;
        }, o.longestText = function (t, e, n, i) {
          var a = (i = i || {}).data = i.data || {},
              r = i.garbageCollect = i.garbageCollect || [];
          i.font !== e && (a = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e;
          var l = 0;
          o.each(n, function (e) {
            void 0 !== e && null !== e && !0 !== o.isArray(e) ? l = o.measureText(t, a, r, l, e) : o.isArray(e) && o.each(e, function (e) {
              void 0 === e || null === e || o.isArray(e) || (l = o.measureText(t, a, r, l, e));
            });
          });
          var s = r.length / 2;

          if (s > n.length) {
            for (var u = 0; u < s; u++) {
              delete a[r[u]];
            }

            r.splice(0, s);
          }

          return l;
        }, o.measureText = function (t, e, n, i, a) {
          var o = e[a];
          return o || (o = e[a] = t.measureText(a).width, n.push(a)), o > i && (i = o), i;
        }, o.numberOfLabelLines = function (t) {
          var e = 1;
          return o.each(t, function (t) {
            o.isArray(t) && t.length > e && (e = t.length);
          }), e;
        }, o.color = i ? function (t) {
          return t instanceof CanvasGradient && (t = a.global.defaultColor), i(t);
        } : function (t) {
          return console.error("Color.js not found!"), t;
        }, o.getHoverColor = function (t) {
          return t instanceof CanvasPattern ? t : o.color(t).saturate(.5).darken(.1).rgbString();
        };
      };
    }, {
      25: 25,
      3: 3,
      45: 45
    }],
    28: [function (t, e, n) {
      "use strict";

      function i(t, e) {
        return t["native"] ? {
          x: t.x,
          y: t.y
        } : u.getRelativePosition(t, e);
      }

      function a(t, e) {
        var n, i, a, o, r;

        for (i = 0, o = t.data.datasets.length; i < o; ++i) {
          if (t.isDatasetVisible(i)) for (a = 0, r = (n = t.getDatasetMeta(i)).data.length; a < r; ++a) {
            var l = n.data[a];
            l._view.skip || e(l);
          }
        }
      }

      function o(t, e) {
        var n = [];
        return a(t, function (t) {
          t.inRange(e.x, e.y) && n.push(t);
        }), n;
      }

      function r(t, e, n, i) {
        var o = Number.POSITIVE_INFINITY,
            r = [];
        return a(t, function (t) {
          if (!n || t.inRange(e.x, e.y)) {
            var a = t.getCenterPoint(),
                l = i(e, a);
            l < o ? (r = [t], o = l) : l === o && r.push(t);
          }
        }), r;
      }

      function l(t) {
        var e = -1 !== t.indexOf("x"),
            n = -1 !== t.indexOf("y");
        return function (t, i) {
          var a = e ? Math.abs(t.x - i.x) : 0,
              o = n ? Math.abs(t.y - i.y) : 0;
          return Math.sqrt(Math.pow(a, 2) + Math.pow(o, 2));
        };
      }

      function s(t, e, n) {
        var a = i(e, t);
        n.axis = n.axis || "x";
        var s = l(n.axis),
            u = n.intersect ? o(t, a) : r(t, a, !1, s),
            d = [];
        return u.length ? (t.data.datasets.forEach(function (e, n) {
          if (t.isDatasetVisible(n)) {
            var i = t.getDatasetMeta(n).data[u[0]._index];

            i && !i._view.skip && d.push(i);
          }
        }), d) : [];
      }

      var u = t(45);
      e.exports = {
        modes: {
          single: function single(t, e) {
            var n = i(e, t),
                o = [];
            return a(t, function (t) {
              if (t.inRange(n.x, n.y)) return o.push(t), o;
            }), o.slice(0, 1);
          },
          label: s,
          index: s,
          dataset: function dataset(t, e, n) {
            var a = i(e, t);
            n.axis = n.axis || "xy";
            var s = l(n.axis),
                u = n.intersect ? o(t, a) : r(t, a, !1, s);
            return u.length > 0 && (u = t.getDatasetMeta(u[0]._datasetIndex).data), u;
          },
          "x-axis": function xAxis(t, e) {
            return s(t, e, {
              intersect: !0
            });
          },
          point: function point(t, e) {
            return o(t, i(e, t));
          },
          nearest: function nearest(t, e, n) {
            var a = i(e, t);
            n.axis = n.axis || "xy";
            var o = l(n.axis),
                s = r(t, a, n.intersect, o);
            return s.length > 1 && s.sort(function (t, e) {
              var n = t.getArea() - e.getArea();
              return 0 === n && (n = t._datasetIndex - e._datasetIndex), n;
            }), s.slice(0, 1);
          },
          x: function x(t, e, n) {
            var o = i(e, t),
                r = [],
                l = !1;
            return a(t, function (t) {
              t.inXRange(o.x) && r.push(t), t.inRange(o.x, o.y) && (l = !0);
            }), n.intersect && !l && (r = []), r;
          },
          y: function y(t, e, n) {
            var o = i(e, t),
                r = [],
                l = !1;
            return a(t, function (t) {
              t.inYRange(o.y) && r.push(t), t.inRange(o.x, o.y) && (l = !0);
            }), n.intersect && !l && (r = []), r;
          }
        }
      };
    }, {
      45: 45
    }],
    29: [function (t, e, n) {
      "use strict";

      t(25)._set("global", {
        responsive: !0,
        responsiveAnimationDuration: 0,
        maintainAspectRatio: !0,
        events: ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
        hover: {
          onHover: null,
          mode: "nearest",
          intersect: !0,
          animationDuration: 400
        },
        onClick: null,
        defaultColor: "rgba(0,0,0,0.1)",
        defaultFontColor: "#666",
        defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        defaultFontSize: 12,
        defaultFontStyle: "normal",
        showLines: !0,
        elements: {},
        layout: {
          padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          }
        }
      }), e.exports = function () {
        var t = function t(_t, e) {
          return this.construct(_t, e), this;
        };

        return t.Chart = t, t;
      };
    }, {
      25: 25
    }],
    30: [function (t, e, n) {
      "use strict";

      var i = t(45);

      e.exports = function (t) {
        function e(t, e) {
          return i.where(t, function (t) {
            return t.position === e;
          });
        }

        function n(t, e) {
          t.forEach(function (t, e) {
            return t._tmpIndex_ = e, t;
          }), t.sort(function (t, n) {
            var i = e ? n : t,
                a = e ? t : n;
            return i.weight === a.weight ? i._tmpIndex_ - a._tmpIndex_ : i.weight - a.weight;
          }), t.forEach(function (t) {
            delete t._tmpIndex_;
          });
        }

        t.layoutService = {
          defaults: {},
          addBox: function addBox(t, e) {
            t.boxes || (t.boxes = []), e.fullWidth = e.fullWidth || !1, e.position = e.position || "top", e.weight = e.weight || 0, t.boxes.push(e);
          },
          removeBox: function removeBox(t, e) {
            var n = t.boxes ? t.boxes.indexOf(e) : -1;
            -1 !== n && t.boxes.splice(n, 1);
          },
          configure: function configure(t, e, n) {
            for (var i, a = ["fullWidth", "position", "weight"], o = a.length, r = 0; r < o; ++r) {
              i = a[r], n.hasOwnProperty(i) && (e[i] = n[i]);
            }
          },
          update: function update(t, a, o) {
            function r(t) {
              var e = i.findNextWhere(_, function (e) {
                return e.box === t;
              });
              if (e) if (t.isHorizontal()) {
                var n = {
                  left: Math.max(T, D),
                  right: Math.max(F, I),
                  top: 0,
                  bottom: 0
                };
                t.update(t.fullWidth ? x : S, y / 2, n);
              } else t.update(e.minSize.width, C);
            }

            function l(t) {
              t.isHorizontal() ? (t.left = t.fullWidth ? d : T, t.right = t.fullWidth ? a - c : T + S, t.top = V, t.bottom = V + t.height, V = t.bottom) : (t.left = N, t.right = N + t.width, t.top = O, t.bottom = O + C, N = t.right);
            }

            if (t) {
              var s = t.options.layout || {},
                  u = i.options.toPadding(s.padding),
                  d = u.left,
                  c = u.right,
                  h = u.top,
                  f = u.bottom,
                  g = e(t.boxes, "left"),
                  p = e(t.boxes, "right"),
                  v = e(t.boxes, "top"),
                  m = e(t.boxes, "bottom"),
                  b = e(t.boxes, "chartArea");
              n(g, !0), n(p, !1), n(v, !0), n(m, !1);
              var x = a - d - c,
                  y = o - h - f,
                  k = y / 2,
                  w = (a - x / 2) / (g.length + p.length),
                  M = (o - k) / (v.length + m.length),
                  S = x,
                  C = y,
                  _ = [];
              i.each(g.concat(p, v, m), function (t) {
                var e,
                    n = t.isHorizontal();
                n ? (e = t.update(t.fullWidth ? x : S, M), C -= e.height) : (e = t.update(w, k), S -= e.width), _.push({
                  horizontal: n,
                  minSize: e,
                  box: t
                });
              });
              var D = 0,
                  I = 0,
                  P = 0,
                  A = 0;
              i.each(v.concat(m), function (t) {
                if (t.getPadding) {
                  var e = t.getPadding();
                  D = Math.max(D, e.left), I = Math.max(I, e.right);
                }
              }), i.each(g.concat(p), function (t) {
                if (t.getPadding) {
                  var e = t.getPadding();
                  P = Math.max(P, e.top), A = Math.max(A, e.bottom);
                }
              });
              var T = d,
                  F = c,
                  O = h,
                  R = f;
              i.each(g.concat(p), r), i.each(g, function (t) {
                T += t.width;
              }), i.each(p, function (t) {
                F += t.width;
              }), i.each(v.concat(m), r), i.each(v, function (t) {
                O += t.height;
              }), i.each(m, function (t) {
                R += t.height;
              }), i.each(g.concat(p), function (t) {
                var e = i.findNextWhere(_, function (e) {
                  return e.box === t;
                }),
                    n = {
                  left: 0,
                  right: 0,
                  top: O,
                  bottom: R
                };
                e && t.update(e.minSize.width, C, n);
              }), T = d, F = c, O = h, R = f, i.each(g, function (t) {
                T += t.width;
              }), i.each(p, function (t) {
                F += t.width;
              }), i.each(v, function (t) {
                O += t.height;
              }), i.each(m, function (t) {
                R += t.height;
              });
              var L = Math.max(D - T, 0);
              T += L, F += Math.max(I - F, 0);
              var z = Math.max(P - O, 0);
              O += z, R += Math.max(A - R, 0);
              var B = o - O - R,
                  W = a - T - F;
              W === S && B === C || (i.each(g, function (t) {
                t.height = B;
              }), i.each(p, function (t) {
                t.height = B;
              }), i.each(v, function (t) {
                t.fullWidth || (t.width = W);
              }), i.each(m, function (t) {
                t.fullWidth || (t.width = W);
              }), C = B, S = W);
              var N = d + L,
                  V = h + z;
              i.each(g.concat(v), l), N += S, V += C, i.each(p, l), i.each(m, l), t.chartArea = {
                left: T,
                top: O,
                right: T + S,
                bottom: O + C
              }, i.each(b, function (e) {
                e.left = t.chartArea.left, e.top = t.chartArea.top, e.right = t.chartArea.right, e.bottom = t.chartArea.bottom, e.update(S, C);
              });
            }
          }
        };
      };
    }, {
      45: 45
    }],
    31: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        plugins: {}
      }), e.exports = function (t) {
        t.plugins = {
          _plugins: [],
          _cacheId: 0,
          register: function register(t) {
            var e = this._plugins;
            [].concat(t).forEach(function (t) {
              -1 === e.indexOf(t) && e.push(t);
            }), this._cacheId++;
          },
          unregister: function unregister(t) {
            var e = this._plugins;
            [].concat(t).forEach(function (t) {
              var n = e.indexOf(t);
              -1 !== n && e.splice(n, 1);
            }), this._cacheId++;
          },
          clear: function clear() {
            this._plugins = [], this._cacheId++;
          },
          count: function count() {
            return this._plugins.length;
          },
          getAll: function getAll() {
            return this._plugins;
          },
          notify: function notify(t, e, n) {
            var i,
                a,
                o,
                r,
                l,
                s = this.descriptors(t),
                u = s.length;

            for (i = 0; i < u; ++i) {
              if (a = s[i], o = a.plugin, "function" == typeof (l = o[e]) && ((r = [t].concat(n || [])).push(a.options), !1 === l.apply(o, r))) return !1;
            }

            return !0;
          },
          descriptors: function descriptors(t) {
            var e = t._plugins || (t._plugins = {});
            if (e.id === this._cacheId) return e.descriptors;
            var n = [],
                a = [],
                r = t && t.config || {},
                l = r.options && r.options.plugins || {};
            return this._plugins.concat(r.plugins || []).forEach(function (t) {
              if (-1 === n.indexOf(t)) {
                var e = t.id,
                    r = l[e];
                !1 !== r && (!0 === r && (r = o.clone(i.global.plugins[e])), n.push(t), a.push({
                  plugin: t,
                  options: r || {}
                }));
              }
            }), e.descriptors = a, e.id = this._cacheId, a;
          }
        }, t.pluginService = t.plugins, t.PluginBase = a.extend({});
      };
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    32: [function (t, e, n) {
      "use strict";

      function i(t) {
        var e,
            n,
            i = [];

        for (e = 0, n = t.length; e < n; ++e) {
          i.push(t[e].label);
        }

        return i;
      }

      function a(t, e, n) {
        var i = t.getPixelForTick(e);
        return n && (i -= 0 === e ? (t.getPixelForTick(1) - i) / 2 : (i - t.getPixelForTick(e - 1)) / 2), i;
      }

      var o = t(25),
          r = t(26),
          l = t(45),
          s = t(34);
      o._set("scale", {
        display: !0,
        position: "left",
        offset: !1,
        gridLines: {
          display: !0,
          color: "rgba(0, 0, 0, 0.1)",
          lineWidth: 1,
          drawBorder: !0,
          drawOnChartArea: !0,
          drawTicks: !0,
          tickMarkLength: 10,
          zeroLineWidth: 1,
          zeroLineColor: "rgba(0,0,0,0.25)",
          zeroLineBorderDash: [],
          zeroLineBorderDashOffset: 0,
          offsetGridLines: !1,
          borderDash: [],
          borderDashOffset: 0
        },
        scaleLabel: {
          display: !1,
          labelString: "",
          lineHeight: 1.2,
          padding: {
            top: 4,
            bottom: 4
          }
        },
        ticks: {
          beginAtZero: !1,
          minRotation: 0,
          maxRotation: 50,
          mirror: !1,
          padding: 0,
          reverse: !1,
          display: !0,
          autoSkip: !0,
          autoSkipPadding: 0,
          labelOffset: 0,
          callback: s.formatters.values,
          minor: {},
          major: {}
        }
      }), e.exports = function (t) {
        function e(t, e, n) {
          return l.isArray(e) ? l.longestText(t, n, e) : t.measureText(e).width;
        }

        function n(t) {
          var e = l.valueOrDefault,
              n = o.global,
              i = e(t.fontSize, n.defaultFontSize),
              a = e(t.fontStyle, n.defaultFontStyle),
              r = e(t.fontFamily, n.defaultFontFamily);
          return {
            size: i,
            style: a,
            family: r,
            font: l.fontString(i, a, r)
          };
        }

        function s(t) {
          return l.options.toLineHeight(l.valueOrDefault(t.lineHeight, 1.2), l.valueOrDefault(t.fontSize, o.global.defaultFontSize));
        }

        t.Scale = r.extend({
          getPadding: function getPadding() {
            var t = this;
            return {
              left: t.paddingLeft || 0,
              top: t.paddingTop || 0,
              right: t.paddingRight || 0,
              bottom: t.paddingBottom || 0
            };
          },
          getTicks: function getTicks() {
            return this._ticks;
          },
          mergeTicksOptions: function mergeTicksOptions() {
            var t = this.options.ticks;
            !1 === t.minor && (t.minor = {
              display: !1
            }), !1 === t.major && (t.major = {
              display: !1
            });

            for (var e in t) {
              "major" !== e && "minor" !== e && (void 0 === t.minor[e] && (t.minor[e] = t[e]), void 0 === t.major[e] && (t.major[e] = t[e]));
            }
          },
          beforeUpdate: function beforeUpdate() {
            l.callback(this.options.beforeUpdate, [this]);
          },
          update: function update(t, e, n) {
            var i,
                a,
                o,
                r,
                s,
                u,
                d = this;

            for (d.beforeUpdate(), d.maxWidth = t, d.maxHeight = e, d.margins = l.extend({
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            }, n), d.longestTextCache = d.longestTextCache || {}, d.beforeSetDimensions(), d.setDimensions(), d.afterSetDimensions(), d.beforeDataLimits(), d.determineDataLimits(), d.afterDataLimits(), d.beforeBuildTicks(), s = d.buildTicks() || [], d.afterBuildTicks(), d.beforeTickToLabelConversion(), o = d.convertTicksToLabels(s) || d.ticks, d.afterTickToLabelConversion(), d.ticks = o, i = 0, a = o.length; i < a; ++i) {
              r = o[i], (u = s[i]) ? u.label = r : s.push(u = {
                label: r,
                major: !1
              });
            }

            return d._ticks = s, d.beforeCalculateTickRotation(), d.calculateTickRotation(), d.afterCalculateTickRotation(), d.beforeFit(), d.fit(), d.afterFit(), d.afterUpdate(), d.minSize;
          },
          afterUpdate: function afterUpdate() {
            l.callback(this.options.afterUpdate, [this]);
          },
          beforeSetDimensions: function beforeSetDimensions() {
            l.callback(this.options.beforeSetDimensions, [this]);
          },
          setDimensions: function setDimensions() {
            var t = this;
            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;
          },
          afterSetDimensions: function afterSetDimensions() {
            l.callback(this.options.afterSetDimensions, [this]);
          },
          beforeDataLimits: function beforeDataLimits() {
            l.callback(this.options.beforeDataLimits, [this]);
          },
          determineDataLimits: l.noop,
          afterDataLimits: function afterDataLimits() {
            l.callback(this.options.afterDataLimits, [this]);
          },
          beforeBuildTicks: function beforeBuildTicks() {
            l.callback(this.options.beforeBuildTicks, [this]);
          },
          buildTicks: l.noop,
          afterBuildTicks: function afterBuildTicks() {
            l.callback(this.options.afterBuildTicks, [this]);
          },
          beforeTickToLabelConversion: function beforeTickToLabelConversion() {
            l.callback(this.options.beforeTickToLabelConversion, [this]);
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var t = this,
                e = t.options.ticks;
            t.ticks = t.ticks.map(e.userCallback || e.callback, this);
          },
          afterTickToLabelConversion: function afterTickToLabelConversion() {
            l.callback(this.options.afterTickToLabelConversion, [this]);
          },
          beforeCalculateTickRotation: function beforeCalculateTickRotation() {
            l.callback(this.options.beforeCalculateTickRotation, [this]);
          },
          calculateTickRotation: function calculateTickRotation() {
            var t = this,
                e = t.ctx,
                a = t.options.ticks,
                o = i(t._ticks),
                r = n(a);
            e.font = r.font;
            var s = a.minRotation || 0;
            if (o.length && t.options.display && t.isHorizontal()) for (var u, d = l.longestText(e, r.font, o, t.longestTextCache), c = d, h = t.getPixelForTick(1) - t.getPixelForTick(0) - 6; c > h && s < a.maxRotation;) {
              var f = l.toRadians(s);

              if (u = Math.cos(f), Math.sin(f) * d > t.maxHeight) {
                s--;
                break;
              }

              s++, c = u * d;
            }
            t.labelRotation = s;
          },
          afterCalculateTickRotation: function afterCalculateTickRotation() {
            l.callback(this.options.afterCalculateTickRotation, [this]);
          },
          beforeFit: function beforeFit() {
            l.callback(this.options.beforeFit, [this]);
          },
          fit: function fit() {
            var t = this,
                a = t.minSize = {
              width: 0,
              height: 0
            },
                o = i(t._ticks),
                r = t.options,
                u = r.ticks,
                d = r.scaleLabel,
                c = r.gridLines,
                h = r.display,
                f = t.isHorizontal(),
                g = n(u),
                p = r.gridLines.tickMarkLength;

            if (a.width = f ? t.isFullWidth() ? t.maxWidth - t.margins.left - t.margins.right : t.maxWidth : h && c.drawTicks ? p : 0, a.height = f ? h && c.drawTicks ? p : 0 : t.maxHeight, d.display && h) {
              var v = s(d) + l.options.toPadding(d.padding).height;
              f ? a.height += v : a.width += v;
            }

            if (u.display && h) {
              var m = l.longestText(t.ctx, g.font, o, t.longestTextCache),
                  b = l.numberOfLabelLines(o),
                  x = .5 * g.size,
                  y = t.options.ticks.padding;

              if (f) {
                t.longestLabelWidth = m;
                var k = l.toRadians(t.labelRotation),
                    w = Math.cos(k),
                    M = Math.sin(k) * m + g.size * b + x * (b - 1) + x;
                a.height = Math.min(t.maxHeight, a.height + M + y), t.ctx.font = g.font;
                var S = e(t.ctx, o[0], g.font),
                    C = e(t.ctx, o[o.length - 1], g.font);
                0 !== t.labelRotation ? (t.paddingLeft = "bottom" === r.position ? w * S + 3 : w * x + 3, t.paddingRight = "bottom" === r.position ? w * x + 3 : w * C + 3) : (t.paddingLeft = S / 2 + 3, t.paddingRight = C / 2 + 3);
              } else u.mirror ? m = 0 : m += y + x, a.width = Math.min(t.maxWidth, a.width + m), t.paddingTop = g.size / 2, t.paddingBottom = g.size / 2;
            }

            t.handleMargins(), t.width = a.width, t.height = a.height;
          },
          handleMargins: function handleMargins() {
            var t = this;
            t.margins && (t.paddingLeft = Math.max(t.paddingLeft - t.margins.left, 0), t.paddingTop = Math.max(t.paddingTop - t.margins.top, 0), t.paddingRight = Math.max(t.paddingRight - t.margins.right, 0), t.paddingBottom = Math.max(t.paddingBottom - t.margins.bottom, 0));
          },
          afterFit: function afterFit() {
            l.callback(this.options.afterFit, [this]);
          },
          isHorizontal: function isHorizontal() {
            return "top" === this.options.position || "bottom" === this.options.position;
          },
          isFullWidth: function isFullWidth() {
            return this.options.fullWidth;
          },
          getRightValue: function getRightValue(t) {
            if (l.isNullOrUndef(t)) return NaN;
            if ("number" == typeof t && !isFinite(t)) return NaN;
            if (t) if (this.isHorizontal()) {
              if (void 0 !== t.x) return this.getRightValue(t.x);
            } else if (void 0 !== t.y) return this.getRightValue(t.y);
            return t;
          },
          getLabelForIndex: l.noop,
          getPixelForValue: l.noop,
          getValueForPixel: l.noop,
          getPixelForTick: function getPixelForTick(t) {
            var e = this,
                n = e.options.offset;

            if (e.isHorizontal()) {
              var i = (e.width - (e.paddingLeft + e.paddingRight)) / Math.max(e._ticks.length - (n ? 0 : 1), 1),
                  a = i * t + e.paddingLeft;
              n && (a += i / 2);
              var o = e.left + Math.round(a);
              return o += e.isFullWidth() ? e.margins.left : 0;
            }

            var r = e.height - (e.paddingTop + e.paddingBottom);
            return e.top + t * (r / (e._ticks.length - 1));
          },
          getPixelForDecimal: function getPixelForDecimal(t) {
            var e = this;

            if (e.isHorizontal()) {
              var n = (e.width - (e.paddingLeft + e.paddingRight)) * t + e.paddingLeft,
                  i = e.left + Math.round(n);
              return i += e.isFullWidth() ? e.margins.left : 0;
            }

            return e.top + t * e.height;
          },
          getBasePixel: function getBasePixel() {
            return this.getPixelForValue(this.getBaseValue());
          },
          getBaseValue: function getBaseValue() {
            var t = this,
                e = t.min,
                n = t.max;
            return t.beginAtZero ? 0 : e < 0 && n < 0 ? n : e > 0 && n > 0 ? e : 0;
          },
          _autoSkip: function _autoSkip(t) {
            var e,
                n,
                i,
                a,
                o = this,
                r = o.isHorizontal(),
                s = o.options.ticks.minor,
                u = t.length,
                d = l.toRadians(o.labelRotation),
                c = Math.cos(d),
                h = o.longestLabelWidth * c,
                f = [];

            for (s.maxTicksLimit && (a = s.maxTicksLimit), r && (e = !1, (h + s.autoSkipPadding) * u > o.width - (o.paddingLeft + o.paddingRight) && (e = 1 + Math.floor((h + s.autoSkipPadding) * u / (o.width - (o.paddingLeft + o.paddingRight)))), a && u > a && (e = Math.max(e, Math.floor(u / a)))), n = 0; n < u; n++) {
              i = t[n], ((e > 1 && n % e > 0 || n % e == 0 && n + e >= u) && n !== u - 1 || l.isNullOrUndef(i.label)) && delete i.label, f.push(i);
            }

            return f;
          },
          draw: function draw(t) {
            var e = this,
                i = e.options;

            if (i.display) {
              var r = e.ctx,
                  u = o.global,
                  d = i.ticks.minor,
                  c = i.ticks.major || d,
                  h = i.gridLines,
                  f = i.scaleLabel,
                  g = 0 !== e.labelRotation,
                  p = e.isHorizontal(),
                  v = d.autoSkip ? e._autoSkip(e.getTicks()) : e.getTicks(),
                  m = l.valueOrDefault(d.fontColor, u.defaultFontColor),
                  b = n(d),
                  x = l.valueOrDefault(c.fontColor, u.defaultFontColor),
                  y = n(c),
                  k = h.drawTicks ? h.tickMarkLength : 0,
                  w = l.valueOrDefault(f.fontColor, u.defaultFontColor),
                  M = n(f),
                  S = l.options.toPadding(f.padding),
                  C = l.toRadians(e.labelRotation),
                  _ = [],
                  D = "right" === i.position ? e.left : e.right - k,
                  I = "right" === i.position ? e.left + k : e.right,
                  P = "bottom" === i.position ? e.top : e.bottom - k,
                  A = "bottom" === i.position ? e.top + k : e.bottom;

              if (l.each(v, function (n, o) {
                if (void 0 !== n.label) {
                  var r,
                      s,
                      c,
                      f,
                      m = n.label;
                  o === e.zeroLineIndex && i.offset === h.offsetGridLines ? (r = h.zeroLineWidth, s = h.zeroLineColor, c = h.zeroLineBorderDash, f = h.zeroLineBorderDashOffset) : (r = l.valueAtIndexOrDefault(h.lineWidth, o), s = l.valueAtIndexOrDefault(h.color, o), c = l.valueOrDefault(h.borderDash, u.borderDash), f = l.valueOrDefault(h.borderDashOffset, u.borderDashOffset));
                  var b,
                      x,
                      y,
                      w,
                      M,
                      S,
                      T,
                      F,
                      O,
                      R,
                      L = "middle",
                      z = "middle",
                      B = d.padding;

                  if (p) {
                    var W = k + B;
                    "bottom" === i.position ? (z = g ? "middle" : "top", L = g ? "right" : "center", R = e.top + W) : (z = g ? "middle" : "bottom", L = g ? "left" : "center", R = e.bottom - W);
                    var N = a(e, o, h.offsetGridLines && v.length > 1);
                    N < e.left && (s = "rgba(0,0,0,0)"), N += l.aliasPixel(r), O = e.getPixelForTick(o) + d.labelOffset, b = y = M = T = N, x = P, w = A, S = t.top, F = t.bottom;
                  } else {
                    var V,
                        E = "left" === i.position;
                    d.mirror ? (L = E ? "left" : "right", V = B) : (L = E ? "right" : "left", V = k + B), O = E ? e.right - V : e.left + V;
                    var H = a(e, o, h.offsetGridLines && v.length > 1);
                    H < e.top && (s = "rgba(0,0,0,0)"), H += l.aliasPixel(r), R = e.getPixelForTick(o) + d.labelOffset, b = D, y = I, M = t.left, T = t.right, x = w = S = F = H;
                  }

                  _.push({
                    tx1: b,
                    ty1: x,
                    tx2: y,
                    ty2: w,
                    x1: M,
                    y1: S,
                    x2: T,
                    y2: F,
                    labelX: O,
                    labelY: R,
                    glWidth: r,
                    glColor: s,
                    glBorderDash: c,
                    glBorderDashOffset: f,
                    rotation: -1 * C,
                    label: m,
                    major: n.major,
                    textBaseline: z,
                    textAlign: L
                  });
                }
              }), l.each(_, function (t) {
                if (h.display && (r.save(), r.lineWidth = t.glWidth, r.strokeStyle = t.glColor, r.setLineDash && (r.setLineDash(t.glBorderDash), r.lineDashOffset = t.glBorderDashOffset), r.beginPath(), h.drawTicks && (r.moveTo(t.tx1, t.ty1), r.lineTo(t.tx2, t.ty2)), h.drawOnChartArea && (r.moveTo(t.x1, t.y1), r.lineTo(t.x2, t.y2)), r.stroke(), r.restore()), d.display) {
                  r.save(), r.translate(t.labelX, t.labelY), r.rotate(t.rotation), r.font = t.major ? y.font : b.font, r.fillStyle = t.major ? x : m, r.textBaseline = t.textBaseline, r.textAlign = t.textAlign;
                  var e = t.label;
                  if (l.isArray(e)) for (var n = 0, i = 0; n < e.length; ++n) {
                    r.fillText("" + e[n], 0, i), i += 1.5 * b.size;
                  } else r.fillText(e, 0, 0);
                  r.restore();
                }
              }), f.display) {
                var T,
                    F,
                    O = 0,
                    R = s(f) / 2;
                if (p) T = e.left + (e.right - e.left) / 2, F = "bottom" === i.position ? e.bottom - R - S.bottom : e.top + R + S.top;else {
                  var L = "left" === i.position;
                  T = L ? e.left + R + S.top : e.right - R - S.top, F = e.top + (e.bottom - e.top) / 2, O = L ? -.5 * Math.PI : .5 * Math.PI;
                }
                r.save(), r.translate(T, F), r.rotate(O), r.textAlign = "center", r.textBaseline = "middle", r.fillStyle = w, r.font = M.font, r.fillText(f.labelString, 0, 0), r.restore();
              }

              if (h.drawBorder) {
                r.lineWidth = l.valueAtIndexOrDefault(h.lineWidth, 0), r.strokeStyle = l.valueAtIndexOrDefault(h.color, 0);
                var z = e.left,
                    B = e.right,
                    W = e.top,
                    N = e.bottom,
                    V = l.aliasPixel(r.lineWidth);
                p ? (W = N = "top" === i.position ? e.bottom : e.top, W += V, N += V) : (z = B = "left" === i.position ? e.right : e.left, z += V, B += V), r.beginPath(), r.moveTo(z, W), r.lineTo(B, N), r.stroke();
              }
            }
          }
        });
      };
    }, {
      25: 25,
      26: 26,
      34: 34,
      45: 45
    }],
    33: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(45);

      e.exports = function (t) {
        t.scaleService = {
          constructors: {},
          defaults: {},
          registerScaleType: function registerScaleType(t, e, n) {
            this.constructors[t] = e, this.defaults[t] = a.clone(n);
          },
          getScaleConstructor: function getScaleConstructor(t) {
            return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;
          },
          getScaleDefaults: function getScaleDefaults(t) {
            return this.defaults.hasOwnProperty(t) ? a.merge({}, [i.scale, this.defaults[t]]) : {};
          },
          updateScaleDefaults: function updateScaleDefaults(t, e) {
            var n = this;
            n.defaults.hasOwnProperty(t) && (n.defaults[t] = a.extend(n.defaults[t], e));
          },
          addScalesToLayout: function addScalesToLayout(e) {
            a.each(e.scales, function (n) {
              n.fullWidth = n.options.fullWidth, n.position = n.options.position, n.weight = n.options.weight, t.layoutService.addBox(e, n);
            });
          }
        };
      };
    }, {
      25: 25,
      45: 45
    }],
    34: [function (t, e, n) {
      "use strict";

      var i = t(45);
      e.exports = {
        generators: {
          linear: function linear(t, e) {
            var n,
                a = [];
            if (t.stepSize && t.stepSize > 0) n = t.stepSize;else {
              var o = i.niceNum(e.max - e.min, !1);
              n = i.niceNum(o / (t.maxTicks - 1), !0);
            }
            var r = Math.floor(e.min / n) * n,
                l = Math.ceil(e.max / n) * n;
            t.min && t.max && t.stepSize && i.almostWhole((t.max - t.min) / t.stepSize, n / 1e3) && (r = t.min, l = t.max);
            var s = (l - r) / n;
            s = i.almostEquals(s, Math.round(s), n / 1e3) ? Math.round(s) : Math.ceil(s), a.push(void 0 !== t.min ? t.min : r);

            for (var u = 1; u < s; ++u) {
              a.push(r + u * n);
            }

            return a.push(void 0 !== t.max ? t.max : l), a;
          },
          logarithmic: function logarithmic(t, e) {
            var n,
                a,
                o = [],
                r = i.valueOrDefault,
                l = r(t.min, Math.pow(10, Math.floor(i.log10(e.min)))),
                s = Math.floor(i.log10(e.max)),
                u = Math.ceil(e.max / Math.pow(10, s));
            0 === l ? (n = Math.floor(i.log10(e.minNotZero)), a = Math.floor(e.minNotZero / Math.pow(10, n)), o.push(l), l = a * Math.pow(10, n)) : (n = Math.floor(i.log10(l)), a = Math.floor(l / Math.pow(10, n)));

            do {
              o.push(l), 10 === ++a && (a = 1, ++n), l = a * Math.pow(10, n);
            } while (n < s || n === s && a < u);

            var d = r(t.max, l);
            return o.push(d), o;
          }
        },
        formatters: {
          values: function values(t) {
            return i.isArray(t) ? t : "" + t;
          },
          linear: function linear(t, e, n) {
            var a = n.length > 3 ? n[2] - n[1] : n[1] - n[0];
            Math.abs(a) > 1 && t !== Math.floor(t) && (a = t - Math.floor(t));
            var o = i.log10(Math.abs(a)),
                r = "";

            if (0 !== t) {
              var l = -1 * Math.floor(o);
              l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l);
            } else r = "0";

            return r;
          },
          logarithmic: function logarithmic(t, e, n) {
            var a = t / Math.pow(10, Math.floor(i.log10(t)));
            return 0 === t ? "0" : 1 === a || 2 === a || 5 === a || 0 === e || e === n.length - 1 ? t.toExponential() : "";
          }
        }
      };
    }, {
      45: 45
    }],
    35: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        tooltips: {
          enabled: !0,
          custom: null,
          mode: "nearest",
          position: "average",
          intersect: !0,
          backgroundColor: "rgba(0,0,0,0.8)",
          titleFontStyle: "bold",
          titleSpacing: 2,
          titleMarginBottom: 6,
          titleFontColor: "#fff",
          titleAlign: "left",
          bodySpacing: 2,
          bodyFontColor: "#fff",
          bodyAlign: "left",
          footerFontStyle: "bold",
          footerSpacing: 2,
          footerMarginTop: 6,
          footerFontColor: "#fff",
          footerAlign: "left",
          yPadding: 6,
          xPadding: 6,
          caretPadding: 2,
          caretSize: 5,
          cornerRadius: 6,
          multiKeyBackground: "#fff",
          displayColors: !0,
          borderColor: "rgba(0,0,0,0)",
          borderWidth: 0,
          callbacks: {
            beforeTitle: o.noop,
            title: function title(t, e) {
              var n = "",
                  i = e.labels,
                  a = i ? i.length : 0;

              if (t.length > 0) {
                var o = t[0];
                o.xLabel ? n = o.xLabel : a > 0 && o.index < a && (n = i[o.index]);
              }

              return n;
            },
            afterTitle: o.noop,
            beforeBody: o.noop,
            beforeLabel: o.noop,
            label: function label(t, e) {
              var n = e.datasets[t.datasetIndex].label || "";
              return n && (n += ": "), n += t.yLabel;
            },
            labelColor: function labelColor(t, e) {
              var n = e.getDatasetMeta(t.datasetIndex).data[t.index]._view;

              return {
                borderColor: n.borderColor,
                backgroundColor: n.backgroundColor
              };
            },
            labelTextColor: function labelTextColor() {
              return this._options.bodyFontColor;
            },
            afterLabel: o.noop,
            afterBody: o.noop,
            beforeFooter: o.noop,
            footer: o.noop,
            afterFooter: o.noop
          }
        }
      }), e.exports = function (t) {
        function e(t, e) {
          var n = o.color(t);
          return n.alpha(e * n.alpha()).rgbaString();
        }

        function n(t, e) {
          return e && (o.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
        }

        function r(t) {
          var e = t._xScale,
              n = t._yScale || t._scale,
              i = t._index,
              a = t._datasetIndex;
          return {
            xLabel: e ? e.getLabelForIndex(i, a) : "",
            yLabel: n ? n.getLabelForIndex(i, a) : "",
            index: i,
            datasetIndex: a,
            x: t._model.x,
            y: t._model.y
          };
        }

        function l(t) {
          var e = i.global,
              n = o.valueOrDefault;
          return {
            xPadding: t.xPadding,
            yPadding: t.yPadding,
            xAlign: t.xAlign,
            yAlign: t.yAlign,
            bodyFontColor: t.bodyFontColor,
            _bodyFontFamily: n(t.bodyFontFamily, e.defaultFontFamily),
            _bodyFontStyle: n(t.bodyFontStyle, e.defaultFontStyle),
            _bodyAlign: t.bodyAlign,
            bodyFontSize: n(t.bodyFontSize, e.defaultFontSize),
            bodySpacing: t.bodySpacing,
            titleFontColor: t.titleFontColor,
            _titleFontFamily: n(t.titleFontFamily, e.defaultFontFamily),
            _titleFontStyle: n(t.titleFontStyle, e.defaultFontStyle),
            titleFontSize: n(t.titleFontSize, e.defaultFontSize),
            _titleAlign: t.titleAlign,
            titleSpacing: t.titleSpacing,
            titleMarginBottom: t.titleMarginBottom,
            footerFontColor: t.footerFontColor,
            _footerFontFamily: n(t.footerFontFamily, e.defaultFontFamily),
            _footerFontStyle: n(t.footerFontStyle, e.defaultFontStyle),
            footerFontSize: n(t.footerFontSize, e.defaultFontSize),
            _footerAlign: t.footerAlign,
            footerSpacing: t.footerSpacing,
            footerMarginTop: t.footerMarginTop,
            caretSize: t.caretSize,
            cornerRadius: t.cornerRadius,
            backgroundColor: t.backgroundColor,
            opacity: 0,
            legendColorBackground: t.multiKeyBackground,
            displayColors: t.displayColors,
            borderColor: t.borderColor,
            borderWidth: t.borderWidth
          };
        }

        function s(t, e) {
          var n = t._chart.ctx,
              i = 2 * e.yPadding,
              a = 0,
              r = e.body,
              l = r.reduce(function (t, e) {
            return t + e.before.length + e.lines.length + e.after.length;
          }, 0);
          l += e.beforeBody.length + e.afterBody.length;
          var s = e.title.length,
              u = e.footer.length,
              d = e.titleFontSize,
              c = e.bodyFontSize,
              h = e.footerFontSize;
          i += s * d, i += s ? (s - 1) * e.titleSpacing : 0, i += s ? e.titleMarginBottom : 0, i += l * c, i += l ? (l - 1) * e.bodySpacing : 0, i += u ? e.footerMarginTop : 0, i += u * h, i += u ? (u - 1) * e.footerSpacing : 0;

          var f = 0,
              g = function g(t) {
            a = Math.max(a, n.measureText(t).width + f);
          };

          return n.font = o.fontString(d, e._titleFontStyle, e._titleFontFamily), o.each(e.title, g), n.font = o.fontString(c, e._bodyFontStyle, e._bodyFontFamily), o.each(e.beforeBody.concat(e.afterBody), g), f = e.displayColors ? c + 2 : 0, o.each(r, function (t) {
            o.each(t.before, g), o.each(t.lines, g), o.each(t.after, g);
          }), f = 0, n.font = o.fontString(h, e._footerFontStyle, e._footerFontFamily), o.each(e.footer, g), a += 2 * e.xPadding, {
            width: a,
            height: i
          };
        }

        function u(t, e) {
          var n = t._model,
              i = t._chart,
              a = t._chart.chartArea,
              o = "center",
              r = "center";
          n.y < e.height ? r = "top" : n.y > i.height - e.height && (r = "bottom");
          var l,
              s,
              u,
              d,
              c,
              h = (a.left + a.right) / 2,
              f = (a.top + a.bottom) / 2;
          "center" === r ? (l = function l(t) {
            return t <= h;
          }, s = function s(t) {
            return t > h;
          }) : (l = function l(t) {
            return t <= e.width / 2;
          }, s = function s(t) {
            return t >= i.width - e.width / 2;
          }), u = function u(t) {
            return t + e.width > i.width;
          }, d = function d(t) {
            return t - e.width < 0;
          }, c = function c(t) {
            return t <= f ? "top" : "bottom";
          }, l(n.x) ? (o = "left", u(n.x) && (o = "center", r = c(n.y))) : s(n.x) && (o = "right", d(n.x) && (o = "center", r = c(n.y)));
          var g = t._options;
          return {
            xAlign: g.xAlign ? g.xAlign : o,
            yAlign: g.yAlign ? g.yAlign : r
          };
        }

        function d(t, e, n) {
          var i = t.x,
              a = t.y,
              o = t.caretSize,
              r = t.caretPadding,
              l = t.cornerRadius,
              s = n.xAlign,
              u = n.yAlign,
              d = o + r,
              c = l + r;
          return "right" === s ? i -= e.width : "center" === s && (i -= e.width / 2), "top" === u ? a += d : a -= "bottom" === u ? e.height + d : e.height / 2, "center" === u ? "left" === s ? i += d : "right" === s && (i -= d) : "left" === s ? i -= c : "right" === s && (i += c), {
            x: i,
            y: a
          };
        }

        t.Tooltip = a.extend({
          initialize: function initialize() {
            this._model = l(this._options);
          },
          getTitle: function getTitle() {
            var t = this,
                e = t._options.callbacks,
                i = e.beforeTitle.apply(t, arguments),
                a = e.title.apply(t, arguments),
                o = e.afterTitle.apply(t, arguments),
                r = [];
            return r = n(r, i), r = n(r, a), r = n(r, o);
          },
          getBeforeBody: function getBeforeBody() {
            var t = this._options.callbacks.beforeBody.apply(this, arguments);

            return o.isArray(t) ? t : void 0 !== t ? [t] : [];
          },
          getBody: function getBody(t, e) {
            var i = this,
                a = i._options.callbacks,
                r = [];
            return o.each(t, function (t) {
              var o = {
                before: [],
                lines: [],
                after: []
              };
              n(o.before, a.beforeLabel.call(i, t, e)), n(o.lines, a.label.call(i, t, e)), n(o.after, a.afterLabel.call(i, t, e)), r.push(o);
            }), r;
          },
          getAfterBody: function getAfterBody() {
            var t = this._options.callbacks.afterBody.apply(this, arguments);

            return o.isArray(t) ? t : void 0 !== t ? [t] : [];
          },
          getFooter: function getFooter() {
            var t = this,
                e = t._options.callbacks,
                i = e.beforeFooter.apply(t, arguments),
                a = e.footer.apply(t, arguments),
                o = e.afterFooter.apply(t, arguments),
                r = [];
            return r = n(r, i), r = n(r, a), r = n(r, o);
          },
          update: function update(e) {
            var n,
                i,
                a = this,
                c = a._options,
                h = a._model,
                f = a._model = l(c),
                g = a._active,
                p = a._data,
                v = {
              xAlign: h.xAlign,
              yAlign: h.yAlign
            },
                m = {
              x: h.x,
              y: h.y
            },
                b = {
              width: h.width,
              height: h.height
            },
                x = {
              x: h.caretX,
              y: h.caretY
            };

            if (g.length) {
              f.opacity = 1;
              var y = [],
                  k = [];
              x = t.Tooltip.positioners[c.position](g, a._eventPosition);
              var w = [];

              for (n = 0, i = g.length; n < i; ++n) {
                w.push(r(g[n]));
              }

              c.filter && (w = w.filter(function (t) {
                return c.filter(t, p);
              })), c.itemSort && (w = w.sort(function (t, e) {
                return c.itemSort(t, e, p);
              })), o.each(w, function (t) {
                y.push(c.callbacks.labelColor.call(a, t, a._chart)), k.push(c.callbacks.labelTextColor.call(a, t, a._chart));
              }), f.title = a.getTitle(w, p), f.beforeBody = a.getBeforeBody(w, p), f.body = a.getBody(w, p), f.afterBody = a.getAfterBody(w, p), f.footer = a.getFooter(w, p), f.x = Math.round(x.x), f.y = Math.round(x.y), f.caretPadding = c.caretPadding, f.labelColors = y, f.labelTextColors = k, f.dataPoints = w, m = d(f, b = s(this, f), v = u(this, b));
            } else f.opacity = 0;

            return f.xAlign = v.xAlign, f.yAlign = v.yAlign, f.x = m.x, f.y = m.y, f.width = b.width, f.height = b.height, f.caretX = x.x, f.caretY = x.y, a._model = f, e && c.custom && c.custom.call(a, f), a;
          },
          drawCaret: function drawCaret(t, e) {
            var n = this._chart.ctx,
                i = this._view,
                a = this.getCaretPosition(t, e, i);
            n.lineTo(a.x1, a.y1), n.lineTo(a.x2, a.y2), n.lineTo(a.x3, a.y3);
          },
          getCaretPosition: function getCaretPosition(t, e, n) {
            var i,
                a,
                o,
                r,
                l,
                s,
                u = n.caretSize,
                d = n.cornerRadius,
                c = n.xAlign,
                h = n.yAlign,
                f = t.x,
                g = t.y,
                p = e.width,
                v = e.height;
            if ("center" === h) l = g + v / 2, "left" === c ? (a = (i = f) - u, o = i, r = l + u, s = l - u) : (a = (i = f + p) + u, o = i, r = l - u, s = l + u);else if ("left" === c ? (i = (a = f + d + u) - u, o = a + u) : "right" === c ? (i = (a = f + p - d - u) - u, o = a + u) : (i = (a = f + p / 2) - u, o = a + u), "top" === h) l = (r = g) - u, s = r;else {
              l = (r = g + v) + u, s = r;
              var m = o;
              o = i, i = m;
            }
            return {
              x1: i,
              x2: a,
              x3: o,
              y1: r,
              y2: l,
              y3: s
            };
          },
          drawTitle: function drawTitle(t, n, i, a) {
            var r = n.title;

            if (r.length) {
              i.textAlign = n._titleAlign, i.textBaseline = "top";
              var l = n.titleFontSize,
                  s = n.titleSpacing;
              i.fillStyle = e(n.titleFontColor, a), i.font = o.fontString(l, n._titleFontStyle, n._titleFontFamily);
              var u, d;

              for (u = 0, d = r.length; u < d; ++u) {
                i.fillText(r[u], t.x, t.y), t.y += l + s, u + 1 === r.length && (t.y += n.titleMarginBottom - s);
              }
            }
          },
          drawBody: function drawBody(t, n, i, a) {
            var r = n.bodyFontSize,
                l = n.bodySpacing,
                s = n.body;
            i.textAlign = n._bodyAlign, i.textBaseline = "top", i.font = o.fontString(r, n._bodyFontStyle, n._bodyFontFamily);

            var u = 0,
                d = function d(e) {
              i.fillText(e, t.x + u, t.y), t.y += r + l;
            };

            o.each(n.beforeBody, d);
            var c = n.displayColors;
            u = c ? r + 2 : 0, o.each(s, function (l, s) {
              o.each(l.before, d), o.each(l.lines, function (o) {
                if (c) {
                  i.fillStyle = e(n.legendColorBackground, a), i.fillRect(t.x, t.y, r, r), i.lineWidth = 1, i.strokeStyle = e(n.labelColors[s].borderColor, a), i.strokeRect(t.x, t.y, r, r), i.fillStyle = e(n.labelColors[s].backgroundColor, a), i.fillRect(t.x + 1, t.y + 1, r - 2, r - 2);
                  var l = e(n.labelTextColors[s], a);
                  i.fillStyle = l;
                }

                d(o);
              }), o.each(l.after, d);
            }), u = 0, o.each(n.afterBody, d), t.y -= l;
          },
          drawFooter: function drawFooter(t, n, i, a) {
            var r = n.footer;
            r.length && (t.y += n.footerMarginTop, i.textAlign = n._footerAlign, i.textBaseline = "top", i.fillStyle = e(n.footerFontColor, a), i.font = o.fontString(n.footerFontSize, n._footerFontStyle, n._footerFontFamily), o.each(r, function (e) {
              i.fillText(e, t.x, t.y), t.y += n.footerFontSize + n.footerSpacing;
            }));
          },
          drawBackground: function drawBackground(t, n, i, a, o) {
            i.fillStyle = e(n.backgroundColor, o), i.strokeStyle = e(n.borderColor, o), i.lineWidth = n.borderWidth;
            var r = n.xAlign,
                l = n.yAlign,
                s = t.x,
                u = t.y,
                d = a.width,
                c = a.height,
                h = n.cornerRadius;
            i.beginPath(), i.moveTo(s + h, u), "top" === l && this.drawCaret(t, a), i.lineTo(s + d - h, u), i.quadraticCurveTo(s + d, u, s + d, u + h), "center" === l && "right" === r && this.drawCaret(t, a), i.lineTo(s + d, u + c - h), i.quadraticCurveTo(s + d, u + c, s + d - h, u + c), "bottom" === l && this.drawCaret(t, a), i.lineTo(s + h, u + c), i.quadraticCurveTo(s, u + c, s, u + c - h), "center" === l && "left" === r && this.drawCaret(t, a), i.lineTo(s, u + h), i.quadraticCurveTo(s, u, s + h, u), i.closePath(), i.fill(), n.borderWidth > 0 && i.stroke();
          },
          draw: function draw() {
            var t = this._chart.ctx,
                e = this._view;

            if (0 !== e.opacity) {
              var n = {
                width: e.width,
                height: e.height
              },
                  i = {
                x: e.x,
                y: e.y
              },
                  a = Math.abs(e.opacity < .001) ? 0 : e.opacity,
                  o = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length;
              this._options.enabled && o && (this.drawBackground(i, e, t, n, a), i.x += e.xPadding, i.y += e.yPadding, this.drawTitle(i, e, t, a), this.drawBody(i, e, t, a), this.drawFooter(i, e, t, a));
            }
          },
          handleEvent: function handleEvent(t) {
            var e = this,
                n = e._options,
                i = !1;
            if (e._lastActive = e._lastActive || [], "mouseout" === t.type ? e._active = [] : e._active = e._chart.getElementsAtEventForMode(t, n.mode, n), !(i = !o.arrayEquals(e._active, e._lastActive))) return !1;

            if (e._lastActive = e._active, n.enabled || n.custom) {
              e._eventPosition = {
                x: t.x,
                y: t.y
              };
              var a = e._model;
              e.update(!0), e.pivot(), i |= a.x !== e._model.x || a.y !== e._model.y;
            }

            return i;
          }
        }), t.Tooltip.positioners = {
          average: function average(t) {
            if (!t.length) return !1;
            var e,
                n,
                i = 0,
                a = 0,
                o = 0;

            for (e = 0, n = t.length; e < n; ++e) {
              var r = t[e];

              if (r && r.hasValue()) {
                var l = r.tooltipPosition();
                i += l.x, a += l.y, ++o;
              }
            }

            return {
              x: Math.round(i / o),
              y: Math.round(a / o)
            };
          },
          nearest: function nearest(t, e) {
            var n,
                i,
                a,
                r = e.x,
                l = e.y,
                s = Number.POSITIVE_INFINITY;

            for (n = 0, i = t.length; n < i; ++n) {
              var u = t[n];

              if (u && u.hasValue()) {
                var d = u.getCenterPoint(),
                    c = o.distanceBetweenPoints(e, d);
                c < s && (s = c, a = u);
              }
            }

            if (a) {
              var h = a.tooltipPosition();
              r = h.x, l = h.y;
            }

            return {
              x: r,
              y: l
            };
          }
        };
      };
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    36: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        elements: {
          arc: {
            backgroundColor: i.global.defaultColor,
            borderColor: "#fff",
            borderWidth: 2
          }
        }
      }), e.exports = a.extend({
        inLabelRange: function inLabelRange(t) {
          var e = this._view;
          return !!e && Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2);
        },
        inRange: function inRange(t, e) {
          var n = this._view;

          if (n) {
            for (var i = o.getAngleFromPoint(n, {
              x: t,
              y: e
            }), a = i.angle, r = i.distance, l = n.startAngle, s = n.endAngle; s < l;) {
              s += 2 * Math.PI;
            }

            for (; a > s;) {
              a -= 2 * Math.PI;
            }

            for (; a < l;) {
              a += 2 * Math.PI;
            }

            var u = a >= l && a <= s,
                d = r >= n.innerRadius && r <= n.outerRadius;
            return u && d;
          }

          return !1;
        },
        getCenterPoint: function getCenterPoint() {
          var t = this._view,
              e = (t.startAngle + t.endAngle) / 2,
              n = (t.innerRadius + t.outerRadius) / 2;
          return {
            x: t.x + Math.cos(e) * n,
            y: t.y + Math.sin(e) * n
          };
        },
        getArea: function getArea() {
          var t = this._view;
          return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));
        },
        tooltipPosition: function tooltipPosition() {
          var t = this._view,
              e = t.startAngle + (t.endAngle - t.startAngle) / 2,
              n = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;
          return {
            x: t.x + Math.cos(e) * n,
            y: t.y + Math.sin(e) * n
          };
        },
        draw: function draw() {
          var t = this._chart.ctx,
              e = this._view,
              n = e.startAngle,
              i = e.endAngle;
          t.beginPath(), t.arc(e.x, e.y, e.outerRadius, n, i), t.arc(e.x, e.y, e.innerRadius, i, n, !0), t.closePath(), t.strokeStyle = e.borderColor, t.lineWidth = e.borderWidth, t.fillStyle = e.backgroundColor, t.fill(), t.lineJoin = "bevel", e.borderWidth && t.stroke();
        }
      });
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    37: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45),
          r = i.global;
      i._set("global", {
        elements: {
          line: {
            tension: .4,
            backgroundColor: r.defaultColor,
            borderWidth: 3,
            borderColor: r.defaultColor,
            borderCapStyle: "butt",
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: "miter",
            capBezierPoints: !0,
            fill: !0
          }
        }
      }), e.exports = a.extend({
        draw: function draw() {
          var t,
              e,
              n,
              i,
              a = this,
              l = a._view,
              s = a._chart.ctx,
              u = l.spanGaps,
              d = a._children.slice(),
              c = r.elements.line,
              h = -1;

          for (a._loop && d.length && d.push(d[0]), s.save(), s.lineCap = l.borderCapStyle || c.borderCapStyle, s.setLineDash && s.setLineDash(l.borderDash || c.borderDash), s.lineDashOffset = l.borderDashOffset || c.borderDashOffset, s.lineJoin = l.borderJoinStyle || c.borderJoinStyle, s.lineWidth = l.borderWidth || c.borderWidth, s.strokeStyle = l.borderColor || r.defaultColor, s.beginPath(), h = -1, t = 0; t < d.length; ++t) {
            e = d[t], n = o.previousItem(d, t), i = e._view, 0 === t ? i.skip || (s.moveTo(i.x, i.y), h = t) : (n = -1 === h ? n : d[h], i.skip || (h !== t - 1 && !u || -1 === h ? s.moveTo(i.x, i.y) : o.canvas.lineTo(s, n._view, e._view), h = t));
          }

          s.stroke(), s.restore();
        }
      });
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    38: [function (t, e, n) {
      "use strict";

      function i(t) {
        var e = this._view;
        return !!e && Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hitRadius, 2);
      }

      var a = t(25),
          o = t(26),
          r = t(45),
          l = a.global.defaultColor;
      a._set("global", {
        elements: {
          point: {
            radius: 3,
            pointStyle: "circle",
            backgroundColor: l,
            borderColor: l,
            borderWidth: 1,
            hitRadius: 1,
            hoverRadius: 4,
            hoverBorderWidth: 1
          }
        }
      }), e.exports = o.extend({
        inRange: function inRange(t, e) {
          var n = this._view;
          return !!n && Math.pow(t - n.x, 2) + Math.pow(e - n.y, 2) < Math.pow(n.hitRadius + n.radius, 2);
        },
        inLabelRange: i,
        inXRange: i,
        inYRange: function inYRange(t) {
          var e = this._view;
          return !!e && Math.pow(t - e.y, 2) < Math.pow(e.radius + e.hitRadius, 2);
        },
        getCenterPoint: function getCenterPoint() {
          var t = this._view;
          return {
            x: t.x,
            y: t.y
          };
        },
        getArea: function getArea() {
          return Math.PI * Math.pow(this._view.radius, 2);
        },
        tooltipPosition: function tooltipPosition() {
          var t = this._view;
          return {
            x: t.x,
            y: t.y,
            padding: t.radius + t.borderWidth
          };
        },
        draw: function draw(t) {
          var e = this._view,
              n = this._model,
              i = this._chart.ctx,
              o = e.pointStyle,
              s = e.radius,
              u = e.x,
              d = e.y,
              c = r.color,
              h = 0;
          e.skip || (i.strokeStyle = e.borderColor || l, i.lineWidth = r.valueOrDefault(e.borderWidth, a.global.elements.point.borderWidth), i.fillStyle = e.backgroundColor || l, void 0 !== t && (n.x < t.left || 1.01 * t.right < n.x || n.y < t.top || 1.01 * t.bottom < n.y) && (n.x < t.left ? h = (u - n.x) / (t.left - n.x) : 1.01 * t.right < n.x ? h = (n.x - u) / (n.x - t.right) : n.y < t.top ? h = (d - n.y) / (t.top - n.y) : 1.01 * t.bottom < n.y && (h = (n.y - d) / (n.y - t.bottom)), h = Math.round(100 * h) / 100, i.strokeStyle = c(i.strokeStyle).alpha(h).rgbString(), i.fillStyle = c(i.fillStyle).alpha(h).rgbString()), r.canvas.drawPoint(i, o, s, u, d));
        }
      });
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    39: [function (t, e, n) {
      "use strict";

      function i(t) {
        return void 0 !== t._view.width;
      }

      function a(t) {
        var e,
            n,
            a,
            o,
            r = t._view;

        if (i(t)) {
          var l = r.width / 2;
          e = r.x - l, n = r.x + l, a = Math.min(r.y, r.base), o = Math.max(r.y, r.base);
        } else {
          var s = r.height / 2;
          e = Math.min(r.x, r.base), n = Math.max(r.x, r.base), a = r.y - s, o = r.y + s;
        }

        return {
          left: e,
          top: a,
          right: n,
          bottom: o
        };
      }

      var o = t(25),
          r = t(26);
      o._set("global", {
        elements: {
          rectangle: {
            backgroundColor: o.global.defaultColor,
            borderColor: o.global.defaultColor,
            borderSkipped: "bottom",
            borderWidth: 0
          }
        }
      }), e.exports = r.extend({
        draw: function draw() {
          function t(t) {
            return m[(b + t) % 4];
          }

          var e,
              n,
              i,
              a,
              o,
              r,
              l,
              s = this._chart.ctx,
              u = this._view,
              d = u.borderWidth;

          if (u.horizontal ? (e = u.base, n = u.x, i = u.y - u.height / 2, a = u.y + u.height / 2, o = n > e ? 1 : -1, r = 1, l = u.borderSkipped || "left") : (e = u.x - u.width / 2, n = u.x + u.width / 2, i = u.y, o = 1, r = (a = u.base) > i ? 1 : -1, l = u.borderSkipped || "bottom"), d) {
            var c = Math.min(Math.abs(e - n), Math.abs(i - a)),
                h = (d = d > c ? c : d) / 2,
                f = e + ("left" !== l ? h * o : 0),
                g = n + ("right" !== l ? -h * o : 0),
                p = i + ("top" !== l ? h * r : 0),
                v = a + ("bottom" !== l ? -h * r : 0);
            f !== g && (i = p, a = v), p !== v && (e = f, n = g);
          }

          s.beginPath(), s.fillStyle = u.backgroundColor, s.strokeStyle = u.borderColor, s.lineWidth = d;
          var m = [[e, a], [e, i], [n, i], [n, a]],
              b = ["bottom", "left", "top", "right"].indexOf(l, 0);
          -1 === b && (b = 0);
          var x = t(0);
          s.moveTo(x[0], x[1]);

          for (var y = 1; y < 4; y++) {
            x = t(y), s.lineTo(x[0], x[1]);
          }

          s.fill(), d && s.stroke();
        },
        height: function height() {
          var t = this._view;
          return t.base - t.y;
        },
        inRange: function inRange(t, e) {
          var n = !1;

          if (this._view) {
            var i = a(this);
            n = t >= i.left && t <= i.right && e >= i.top && e <= i.bottom;
          }

          return n;
        },
        inLabelRange: function inLabelRange(t, e) {
          var n = this;
          if (!n._view) return !1;
          var o = a(n);
          return i(n) ? t >= o.left && t <= o.right : e >= o.top && e <= o.bottom;
        },
        inXRange: function inXRange(t) {
          var e = a(this);
          return t >= e.left && t <= e.right;
        },
        inYRange: function inYRange(t) {
          var e = a(this);
          return t >= e.top && t <= e.bottom;
        },
        getCenterPoint: function getCenterPoint() {
          var t,
              e,
              n = this._view;
          return i(this) ? (t = n.x, e = (n.y + n.base) / 2) : (t = (n.x + n.base) / 2, e = n.y), {
            x: t,
            y: e
          };
        },
        getArea: function getArea() {
          var t = this._view;
          return t.width * Math.abs(t.y - t.base);
        },
        tooltipPosition: function tooltipPosition() {
          var t = this._view;
          return {
            x: t.x,
            y: t.y
          };
        }
      });
    }, {
      25: 25,
      26: 26
    }],
    40: [function (t, e, n) {
      "use strict";

      e.exports = {}, e.exports.Arc = t(36), e.exports.Line = t(37), e.exports.Point = t(38), e.exports.Rectangle = t(39);
    }, {
      36: 36,
      37: 37,
      38: 38,
      39: 39
    }],
    41: [function (t, e, n) {
      "use strict";

      var i = t(42),
          n = e.exports = {
        clear: function clear(t) {
          t.ctx.clearRect(0, 0, t.width, t.height);
        },
        roundedRect: function roundedRect(t, e, n, i, a, o) {
          if (o) {
            var r = Math.min(o, i / 2),
                l = Math.min(o, a / 2);
            t.moveTo(e + r, n), t.lineTo(e + i - r, n), t.quadraticCurveTo(e + i, n, e + i, n + l), t.lineTo(e + i, n + a - l), t.quadraticCurveTo(e + i, n + a, e + i - r, n + a), t.lineTo(e + r, n + a), t.quadraticCurveTo(e, n + a, e, n + a - l), t.lineTo(e, n + l), t.quadraticCurveTo(e, n, e + r, n);
          } else t.rect(e, n, i, a);
        },
        drawPoint: function drawPoint(t, e, n, i, a) {
          var o, r, l, s, u, d;

          if ("object" != _typeof(e) || "[object HTMLImageElement]" !== (o = e.toString()) && "[object HTMLCanvasElement]" !== o) {
            if (!(isNaN(n) || n <= 0)) {
              switch (e) {
                default:
                  t.beginPath(), t.arc(i, a, n, 0, 2 * Math.PI), t.closePath(), t.fill();
                  break;

                case "triangle":
                  t.beginPath(), u = (r = 3 * n / Math.sqrt(3)) * Math.sqrt(3) / 2, t.moveTo(i - r / 2, a + u / 3), t.lineTo(i + r / 2, a + u / 3), t.lineTo(i, a - 2 * u / 3), t.closePath(), t.fill();
                  break;

                case "rect":
                  d = 1 / Math.SQRT2 * n, t.beginPath(), t.fillRect(i - d, a - d, 2 * d, 2 * d), t.strokeRect(i - d, a - d, 2 * d, 2 * d);
                  break;

                case "rectRounded":
                  var c = n / Math.SQRT2,
                      h = i - c,
                      f = a - c,
                      g = Math.SQRT2 * n;
                  t.beginPath(), this.roundedRect(t, h, f, g, g, n / 2), t.closePath(), t.fill();
                  break;

                case "rectRot":
                  d = 1 / Math.SQRT2 * n, t.beginPath(), t.moveTo(i - d, a), t.lineTo(i, a + d), t.lineTo(i + d, a), t.lineTo(i, a - d), t.closePath(), t.fill();
                  break;

                case "cross":
                  t.beginPath(), t.moveTo(i, a + n), t.lineTo(i, a - n), t.moveTo(i - n, a), t.lineTo(i + n, a), t.closePath();
                  break;

                case "crossRot":
                  t.beginPath(), l = Math.cos(Math.PI / 4) * n, s = Math.sin(Math.PI / 4) * n, t.moveTo(i - l, a - s), t.lineTo(i + l, a + s), t.moveTo(i - l, a + s), t.lineTo(i + l, a - s), t.closePath();
                  break;

                case "star":
                  t.beginPath(), t.moveTo(i, a + n), t.lineTo(i, a - n), t.moveTo(i - n, a), t.lineTo(i + n, a), l = Math.cos(Math.PI / 4) * n, s = Math.sin(Math.PI / 4) * n, t.moveTo(i - l, a - s), t.lineTo(i + l, a + s), t.moveTo(i - l, a + s), t.lineTo(i + l, a - s), t.closePath();
                  break;

                case "line":
                  t.beginPath(), t.moveTo(i - n, a), t.lineTo(i + n, a), t.closePath();
                  break;

                case "dash":
                  t.beginPath(), t.moveTo(i, a), t.lineTo(i + n, a), t.closePath();
              }

              t.stroke();
            }
          } else t.drawImage(e, i - e.width / 2, a - e.height / 2, e.width, e.height);
        },
        clipArea: function clipArea(t, e) {
          t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();
        },
        unclipArea: function unclipArea(t) {
          t.restore();
        },
        lineTo: function lineTo(t, e, n, i) {
          if (n.steppedLine) return "after" === n.steppedLine && !i || "after" !== n.steppedLine && i ? t.lineTo(e.x, n.y) : t.lineTo(n.x, e.y), void t.lineTo(n.x, n.y);
          n.tension ? t.bezierCurveTo(i ? e.controlPointPreviousX : e.controlPointNextX, i ? e.controlPointPreviousY : e.controlPointNextY, i ? n.controlPointNextX : n.controlPointPreviousX, i ? n.controlPointNextY : n.controlPointPreviousY, n.x, n.y) : t.lineTo(n.x, n.y);
        }
      };
      i.clear = n.clear, i.drawRoundedRectangle = function (t) {
        t.beginPath(), n.roundedRect.apply(n, arguments), t.closePath();
      };
    }, {
      42: 42
    }],
    42: [function (t, e, n) {
      "use strict";

      var i = {
        noop: function noop() {},
        uid: function () {
          var t = 0;
          return function () {
            return t++;
          };
        }(),
        isNullOrUndef: function isNullOrUndef(t) {
          return null === t || void 0 === t;
        },
        isArray: Array.isArray ? Array.isArray : function (t) {
          return "[object Array]" === Object.prototype.toString.call(t);
        },
        isObject: function isObject(t) {
          return null !== t && "[object Object]" === Object.prototype.toString.call(t);
        },
        valueOrDefault: function valueOrDefault(t, e) {
          return void 0 === t ? e : t;
        },
        valueAtIndexOrDefault: function valueAtIndexOrDefault(t, e, n) {
          return i.valueOrDefault(i.isArray(t) ? t[e] : t, n);
        },
        callback: function callback(t, e, n) {
          if (t && "function" == typeof t.call) return t.apply(n, e);
        },
        each: function each(t, e, n, a) {
          var o, r, l;
          if (i.isArray(t)) {
            if (r = t.length, a) for (o = r - 1; o >= 0; o--) {
              e.call(n, t[o], o);
            } else for (o = 0; o < r; o++) {
              e.call(n, t[o], o);
            }
          } else if (i.isObject(t)) for (r = (l = Object.keys(t)).length, o = 0; o < r; o++) {
            e.call(n, t[l[o]], l[o]);
          }
        },
        arrayEquals: function arrayEquals(t, e) {
          var n, a, o, r;
          if (!t || !e || t.length !== e.length) return !1;

          for (n = 0, a = t.length; n < a; ++n) {
            if (o = t[n], r = e[n], o instanceof Array && r instanceof Array) {
              if (!i.arrayEquals(o, r)) return !1;
            } else if (o !== r) return !1;
          }

          return !0;
        },
        clone: function clone(t) {
          if (i.isArray(t)) return t.map(i.clone);

          if (i.isObject(t)) {
            for (var e = {}, n = Object.keys(t), a = n.length, o = 0; o < a; ++o) {
              e[n[o]] = i.clone(t[n[o]]);
            }

            return e;
          }

          return t;
        },
        _merger: function _merger(t, e, n, a) {
          var o = e[t],
              r = n[t];
          i.isObject(o) && i.isObject(r) ? i.merge(o, r, a) : e[t] = i.clone(r);
        },
        _mergerIf: function _mergerIf(t, e, n) {
          var a = e[t],
              o = n[t];
          i.isObject(a) && i.isObject(o) ? i.mergeIf(a, o) : e.hasOwnProperty(t) || (e[t] = i.clone(o));
        },
        merge: function merge(t, e, n) {
          var a,
              o,
              r,
              l,
              s,
              u = i.isArray(e) ? e : [e],
              d = u.length;
          if (!i.isObject(t)) return t;

          for (a = (n = n || {}).merger || i._merger, o = 0; o < d; ++o) {
            if (e = u[o], i.isObject(e)) for (s = 0, l = (r = Object.keys(e)).length; s < l; ++s) {
              a(r[s], t, e, n);
            }
          }

          return t;
        },
        mergeIf: function mergeIf(t, e) {
          return i.merge(t, e, {
            merger: i._mergerIf
          });
        }
      };
      e.exports = i, i.callCallback = i.callback, i.indexOf = function (t, e, n) {
        return Array.prototype.indexOf.call(t, e, n);
      }, i.getValueOrDefault = i.valueOrDefault, i.getValueAtIndexOrDefault = i.valueAtIndexOrDefault;
    }, {}],
    43: [function (t, e, n) {
      "use strict";

      var i = t(42),
          a = {
        linear: function linear(t) {
          return t;
        },
        easeInQuad: function easeInQuad(t) {
          return t * t;
        },
        easeOutQuad: function easeOutQuad(t) {
          return -t * (t - 2);
        },
        easeInOutQuad: function easeInOutQuad(t) {
          return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
        },
        easeInCubic: function easeInCubic(t) {
          return t * t * t;
        },
        easeOutCubic: function easeOutCubic(t) {
          return (t -= 1) * t * t + 1;
        },
        easeInOutCubic: function easeInOutCubic(t) {
          return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function easeInQuart(t) {
          return t * t * t * t;
        },
        easeOutQuart: function easeOutQuart(t) {
          return -((t -= 1) * t * t * t - 1);
        },
        easeInOutQuart: function easeInOutQuart(t) {
          return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function easeInQuint(t) {
          return t * t * t * t * t;
        },
        easeOutQuint: function easeOutQuint(t) {
          return (t -= 1) * t * t * t * t + 1;
        },
        easeInOutQuint: function easeInOutQuint(t) {
          return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function easeInSine(t) {
          return 1 - Math.cos(t * (Math.PI / 2));
        },
        easeOutSine: function easeOutSine(t) {
          return Math.sin(t * (Math.PI / 2));
        },
        easeInOutSine: function easeInOutSine(t) {
          return -.5 * (Math.cos(Math.PI * t) - 1);
        },
        easeInExpo: function easeInExpo(t) {
          return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
        },
        easeOutExpo: function easeOutExpo(t) {
          return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
        },
        easeInOutExpo: function easeInOutExpo(t) {
          return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));
        },
        easeInCirc: function easeInCirc(t) {
          return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);
        },
        easeOutCirc: function easeOutCirc(t) {
          return Math.sqrt(1 - (t -= 1) * t);
        },
        easeInOutCirc: function easeInOutCirc(t) {
          return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function easeInElastic(t) {
          var e = 1.70158,
              n = 0,
              i = 1;
          return 0 === t ? 0 : 1 === t ? 1 : (n || (n = .3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), -i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n));
        },
        easeOutElastic: function easeOutElastic(t) {
          var e = 1.70158,
              n = 0,
              i = 1;
          return 0 === t ? 0 : 1 === t ? 1 : (n || (n = .3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / n) + 1);
        },
        easeInOutElastic: function easeInOutElastic(t) {
          var e = 1.70158,
              n = 0,
              i = 1;
          return 0 === t ? 0 : 2 == (t /= .5) ? 1 : (n || (n = .45), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), t < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * -.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * .5 + 1);
        },
        easeInBack: function easeInBack(t) {
          var e = 1.70158;
          return t * t * ((e + 1) * t - e);
        },
        easeOutBack: function easeOutBack(t) {
          var e = 1.70158;
          return (t -= 1) * t * ((e + 1) * t + e) + 1;
        },
        easeInOutBack: function easeInOutBack(t) {
          var e = 1.70158;
          return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);
        },
        easeInBounce: function easeInBounce(t) {
          return 1 - a.easeOutBounce(1 - t);
        },
        easeOutBounce: function easeOutBounce(t) {
          return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
        },
        easeInOutBounce: function easeInOutBounce(t) {
          return t < .5 ? .5 * a.easeInBounce(2 * t) : .5 * a.easeOutBounce(2 * t - 1) + .5;
        }
      };
      e.exports = {
        effects: a
      }, i.easingEffects = a;
    }, {
      42: 42
    }],
    44: [function (t, e, n) {
      "use strict";

      var i = t(42);
      e.exports = {
        toLineHeight: function toLineHeight(t, e) {
          var n = ("" + t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
          if (!n || "normal" === n[1]) return 1.2 * e;

          switch (t = +n[2], n[3]) {
            case "px":
              return t;

            case "%":
              t /= 100;
          }

          return e * t;
        },
        toPadding: function toPadding(t) {
          var e, n, a, o;
          return i.isObject(t) ? (e = +t.top || 0, n = +t.right || 0, a = +t.bottom || 0, o = +t.left || 0) : e = n = a = o = +t || 0, {
            top: e,
            right: n,
            bottom: a,
            left: o,
            height: e + a,
            width: o + n
          };
        },
        resolve: function resolve(t, e, n) {
          var a, o, r;

          for (a = 0, o = t.length; a < o; ++a) {
            if (void 0 !== (r = t[a]) && (void 0 !== e && "function" == typeof r && (r = r(e)), void 0 !== n && i.isArray(r) && (r = r[n]), void 0 !== r)) return r;
          }
        }
      };
    }, {
      42: 42
    }],
    45: [function (t, e, n) {
      "use strict";

      e.exports = t(42), e.exports.easing = t(43), e.exports.canvas = t(41), e.exports.options = t(44);
    }, {
      41: 41,
      42: 42,
      43: 43,
      44: 44
    }],
    46: [function (t, e, n) {
      e.exports = {
        acquireContext: function acquireContext(t) {
          return t && t.canvas && (t = t.canvas), t && t.getContext("2d") || null;
        }
      };
    }, {}],
    47: [function (t, e, n) {
      "use strict";

      function i(t, e) {
        var n = v.getStyle(t, e),
            i = n && n.match(/^(\d+)(\.\d+)?px$/);
        return i ? Number(i[1]) : void 0;
      }

      function a(t, e) {
        var n = t.style,
            a = t.getAttribute("height"),
            o = t.getAttribute("width");

        if (t[m] = {
          initial: {
            height: a,
            width: o,
            style: {
              display: n.display,
              height: n.height,
              width: n.width
            }
          }
        }, n.display = n.display || "block", null === o || "" === o) {
          var r = i(t, "width");
          void 0 !== r && (t.width = r);
        }

        if (null === a || "" === a) if ("" === t.style.height) t.height = t.width / (e.options.aspectRatio || 2);else {
          var l = i(t, "height");
          void 0 !== r && (t.height = l);
        }
        return t;
      }

      function o(t, e, n) {
        t.addEventListener(e, n, M);
      }

      function r(t, e, n) {
        t.removeEventListener(e, n, M);
      }

      function l(t, e, n, i, a) {
        return {
          type: t,
          chart: e,
          "native": a || null,
          x: void 0 !== n ? n : null,
          y: void 0 !== i ? i : null
        };
      }

      function s(t, e) {
        var n = w[t.type] || t.type,
            i = v.getRelativePosition(t, e);
        return l(n, e, i.x, i.y, t);
      }

      function u(t, e) {
        var n = !1,
            i = [];
        return function () {
          i = Array.prototype.slice.call(arguments), e = e || this, n || (n = !0, v.requestAnimFrame.call(window, function () {
            n = !1, t.apply(e, i);
          }));
        };
      }

      function d(t) {
        var e = document.createElement("div"),
            n = b + "size-monitor",
            i = "position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";
        e.style.cssText = i, e.className = n, e.innerHTML = '<div class="' + n + '-expand" style="' + i + '"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="' + n + '-shrink" style="' + i + '"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';
        var a = e.childNodes[0],
            r = e.childNodes[1];

        e._reset = function () {
          a.scrollLeft = 1e6, a.scrollTop = 1e6, r.scrollLeft = 1e6, r.scrollTop = 1e6;
        };

        var l = function l() {
          e._reset(), t();
        };

        return o(a, "scroll", l.bind(a, "expand")), o(r, "scroll", l.bind(r, "shrink")), e;
      }

      function c(t, e) {
        var n = (t[m] || (t[m] = {})).renderProxy = function (t) {
          t.animationName === y && e();
        };

        v.each(k, function (e) {
          o(t, e, n);
        }), t.classList.add(x);
      }

      function h(t) {
        var e = t[m] || {},
            n = e.renderProxy;
        n && (v.each(k, function (e) {
          r(t, e, n);
        }), delete e.renderProxy), t.classList.remove(x);
      }

      function f(t, e, n) {
        var i = t[m] || (t[m] = {}),
            a = i.resizer = d(u(function () {
          if (i.resizer) return e(l("resize", n));
        }));
        c(t, function () {
          if (i.resizer) {
            var e = t.parentNode;
            e && e !== a.parentNode && e.insertBefore(a, e.firstChild), a._reset();
          }
        });
      }

      function g(t) {
        var e = t[m] || {},
            n = e.resizer;
        delete e.resizer, h(t), n && n.parentNode && n.parentNode.removeChild(n);
      }

      function p(t, e) {
        var n = t._style || document.createElement("style");
        t._style || (t._style = n, e = "/* Chart.js */\n" + e, n.setAttribute("type", "text/css"), document.getElementsByTagName("head")[0].appendChild(n)), n.appendChild(document.createTextNode(e));
      }

      var v = t(45),
          m = "$chartjs",
          b = "chartjs-",
          x = b + "render-monitor",
          y = b + "render-animation",
          k = ["animationstart", "webkitAnimationStart"],
          w = {
        touchstart: "mousedown",
        touchmove: "mousemove",
        touchend: "mouseup",
        pointerenter: "mouseenter",
        pointerdown: "mousedown",
        pointermove: "mousemove",
        pointerup: "mouseup",
        pointerleave: "mouseout",
        pointerout: "mouseout"
      },
          M = !!function () {
        var t = !1;

        try {
          var e = Object.defineProperty({}, "passive", {
            get: function get() {
              t = !0;
            }
          });
          window.addEventListener("e", null, e);
        } catch (t) {}

        return t;
      }() && {
        passive: !0
      };
      e.exports = {
        _enabled: "undefined" != typeof window && "undefined" != typeof document,
        initialize: function initialize() {
          var t = "from{opacity:0.99}to{opacity:1}";
          p(this, "@-webkit-keyframes " + y + "{" + t + "}@keyframes " + y + "{" + t + "}." + x + "{-webkit-animation:" + y + " 0.001s;animation:" + y + " 0.001s;}");
        },
        acquireContext: function acquireContext(t, e) {
          "string" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas);
          var n = t && t.getContext && t.getContext("2d");
          return n && n.canvas === t ? (a(t, e), n) : null;
        },
        releaseContext: function releaseContext(t) {
          var e = t.canvas;

          if (e[m]) {
            var n = e[m].initial;
            ["height", "width"].forEach(function (t) {
              var i = n[t];
              v.isNullOrUndef(i) ? e.removeAttribute(t) : e.setAttribute(t, i);
            }), v.each(n.style || {}, function (t, n) {
              e.style[n] = t;
            }), e.width = e.width, delete e[m];
          }
        },
        addEventListener: function addEventListener(t, e, n) {
          var i = t.canvas;

          if ("resize" !== e) {
            var a = n[m] || (n[m] = {});
            o(i, e, (a.proxies || (a.proxies = {}))[t.id + "_" + e] = function (e) {
              n(s(e, t));
            });
          } else f(i, n, t);
        },
        removeEventListener: function removeEventListener(t, e, n) {
          var i = t.canvas;

          if ("resize" !== e) {
            var a = ((n[m] || {}).proxies || {})[t.id + "_" + e];
            a && r(i, e, a);
          } else g(i);
        }
      }, v.addEvent = o, v.removeEvent = r;
    }, {
      45: 45
    }],
    48: [function (t, e, n) {
      "use strict";

      var i = t(45),
          a = t(46),
          o = t(47),
          r = o._enabled ? o : a;
      e.exports = i.extend({
        initialize: function initialize() {},
        acquireContext: function acquireContext() {},
        releaseContext: function releaseContext() {},
        addEventListener: function addEventListener() {},
        removeEventListener: function removeEventListener() {}
      }, r);
    }, {
      45: 45,
      46: 46,
      47: 47
    }],
    49: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(40),
          o = t(45);
      i._set("global", {
        plugins: {
          filler: {
            propagate: !0
          }
        }
      }), e.exports = function () {
        function t(t, e, n) {
          var i,
              a = t._model || {},
              o = a.fill;
          if (void 0 === o && (o = !!a.backgroundColor), !1 === o || null === o) return !1;
          if (!0 === o) return "origin";
          if (i = parseFloat(o, 10), isFinite(i) && Math.floor(i) === i) return "-" !== o[0] && "+" !== o[0] || (i = e + i), !(i === e || i < 0 || i >= n) && i;

          switch (o) {
            case "bottom":
              return "start";

            case "top":
              return "end";

            case "zero":
              return "origin";

            case "origin":
            case "start":
            case "end":
              return o;

            default:
              return !1;
          }
        }

        function e(t) {
          var e,
              n = t.el._model || {},
              i = t.el._scale || {},
              a = t.fill,
              o = null;
          if (isFinite(a)) return null;

          if ("start" === a ? o = void 0 === n.scaleBottom ? i.bottom : n.scaleBottom : "end" === a ? o = void 0 === n.scaleTop ? i.top : n.scaleTop : void 0 !== n.scaleZero ? o = n.scaleZero : i.getBasePosition ? o = i.getBasePosition() : i.getBasePixel && (o = i.getBasePixel()), void 0 !== o && null !== o) {
            if (void 0 !== o.x && void 0 !== o.y) return o;
            if ("number" == typeof o && isFinite(o)) return e = i.isHorizontal(), {
              x: e ? o : null,
              y: e ? null : o
            };
          }

          return null;
        }

        function n(t, e, n) {
          var i,
              a = t[e].fill,
              o = [e];
          if (!n) return a;

          for (; !1 !== a && -1 === o.indexOf(a);) {
            if (!isFinite(a)) return a;
            if (!(i = t[a])) return !1;
            if (i.visible) return a;
            o.push(a), a = i.fill;
          }

          return !1;
        }

        function r(t) {
          var e = t.fill,
              n = "dataset";
          return !1 === e ? null : (isFinite(e) || (n = "boundary"), d[n](t));
        }

        function l(t) {
          return t && !t.skip;
        }

        function s(t, e, n, i, a) {
          var r;

          if (i && a) {
            for (t.moveTo(e[0].x, e[0].y), r = 1; r < i; ++r) {
              o.canvas.lineTo(t, e[r - 1], e[r]);
            }

            for (t.lineTo(n[a - 1].x, n[a - 1].y), r = a - 1; r > 0; --r) {
              o.canvas.lineTo(t, n[r], n[r - 1], !0);
            }
          }
        }

        function u(t, e, n, i, a, o) {
          var r,
              u,
              d,
              c,
              h,
              f,
              g,
              p = e.length,
              v = i.spanGaps,
              m = [],
              b = [],
              x = 0,
              y = 0;

          for (t.beginPath(), r = 0, u = p + !!o; r < u; ++r) {
            h = n(c = e[d = r % p]._view, d, i), f = l(c), g = l(h), f && g ? (x = m.push(c), y = b.push(h)) : x && y && (v ? (f && m.push(c), g && b.push(h)) : (s(t, m, b, x, y), x = y = 0, m = [], b = []));
          }

          s(t, m, b, x, y), t.closePath(), t.fillStyle = a, t.fill();
        }

        var d = {
          dataset: function dataset(t) {
            var e = t.fill,
                n = t.chart,
                i = n.getDatasetMeta(e),
                a = i && n.isDatasetVisible(e) && i.dataset._children || [],
                o = a.length || 0;
            return o ? function (t, e) {
              return e < o && a[e]._view || null;
            } : null;
          },
          boundary: function boundary(t) {
            var e = t.boundary,
                n = e ? e.x : null,
                i = e ? e.y : null;
            return function (t) {
              return {
                x: null === n ? t.x : n,
                y: null === i ? t.y : i
              };
            };
          }
        };
        return {
          id: "filler",
          afterDatasetsUpdate: function afterDatasetsUpdate(i, o) {
            var l,
                s,
                u,
                d,
                c = (i.data.datasets || []).length,
                h = o.propagate,
                f = [];

            for (s = 0; s < c; ++s) {
              d = null, (u = (l = i.getDatasetMeta(s)).dataset) && u._model && u instanceof a.Line && (d = {
                visible: i.isDatasetVisible(s),
                fill: t(u, s, c),
                chart: i,
                el: u
              }), l.$filler = d, f.push(d);
            }

            for (s = 0; s < c; ++s) {
              (d = f[s]) && (d.fill = n(f, s, h), d.boundary = e(d), d.mapper = r(d));
            }
          },
          beforeDatasetDraw: function beforeDatasetDraw(t, e) {
            var n = e.meta.$filler;

            if (n) {
              var a = t.ctx,
                  r = n.el,
                  l = r._view,
                  s = r._children || [],
                  d = n.mapper,
                  c = l.backgroundColor || i.global.defaultColor;
              d && c && s.length && (o.canvas.clipArea(a, t.chartArea), u(a, s, d, l, c, r._loop), o.canvas.unclipArea(a));
            }
          }
        };
      };
    }, {
      25: 25,
      40: 40,
      45: 45
    }],
    50: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        legend: {
          display: !0,
          position: "top",
          fullWidth: !0,
          reverse: !1,
          weight: 1e3,
          onClick: function onClick(t, e) {
            var n = e.datasetIndex,
                i = this.chart,
                a = i.getDatasetMeta(n);
            a.hidden = null === a.hidden ? !i.data.datasets[n].hidden : null, i.update();
          },
          onHover: null,
          labels: {
            boxWidth: 40,
            padding: 10,
            generateLabels: function generateLabels(t) {
              var e = t.data;
              return o.isArray(e.datasets) ? e.datasets.map(function (e, n) {
                return {
                  text: e.label,
                  fillStyle: o.isArray(e.backgroundColor) ? e.backgroundColor[0] : e.backgroundColor,
                  hidden: !t.isDatasetVisible(n),
                  lineCap: e.borderCapStyle,
                  lineDash: e.borderDash,
                  lineDashOffset: e.borderDashOffset,
                  lineJoin: e.borderJoinStyle,
                  lineWidth: e.borderWidth,
                  strokeStyle: e.borderColor,
                  pointStyle: e.pointStyle,
                  datasetIndex: n
                };
              }, this) : [];
            }
          }
        },
        legendCallback: function legendCallback(t) {
          var e = [];
          e.push('<ul class="' + t.id + '-legend">');

          for (var n = 0; n < t.data.datasets.length; n++) {
            e.push('<li><span style="background-color:' + t.data.datasets[n].backgroundColor + '"></span>'), t.data.datasets[n].label && e.push(t.data.datasets[n].label), e.push("</li>");
          }

          return e.push("</ul>"), e.join("");
        }
      }), e.exports = function (t) {
        function e(t, e) {
          return t.usePointStyle ? e * Math.SQRT2 : t.boxWidth;
        }

        function n(e, n) {
          var i = new t.Legend({
            ctx: e.ctx,
            options: n,
            chart: e
          });
          r.configure(e, i, n), r.addBox(e, i), e.legend = i;
        }

        var r = t.layoutService,
            l = o.noop;
        return t.Legend = a.extend({
          initialize: function initialize(t) {
            o.extend(this, t), this.legendHitBoxes = [], this.doughnutMode = !1;
          },
          beforeUpdate: l,
          update: function update(t, e, n) {
            var i = this;
            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;
          },
          afterUpdate: l,
          beforeSetDimensions: l,
          setDimensions: function setDimensions() {
            var t = this;
            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {
              width: 0,
              height: 0
            };
          },
          afterSetDimensions: l,
          beforeBuildLabels: l,
          buildLabels: function buildLabels() {
            var t = this,
                e = t.options.labels || {},
                n = o.callback(e.generateLabels, [t.chart], t) || [];
            e.filter && (n = n.filter(function (n) {
              return e.filter(n, t.chart.data);
            })), t.options.reverse && n.reverse(), t.legendItems = n;
          },
          afterBuildLabels: l,
          beforeFit: l,
          fit: function fit() {
            var t = this,
                n = t.options,
                a = n.labels,
                r = n.display,
                l = t.ctx,
                s = i.global,
                u = o.valueOrDefault,
                d = u(a.fontSize, s.defaultFontSize),
                c = u(a.fontStyle, s.defaultFontStyle),
                h = u(a.fontFamily, s.defaultFontFamily),
                f = o.fontString(d, c, h),
                g = t.legendHitBoxes = [],
                p = t.minSize,
                v = t.isHorizontal();
            if (v ? (p.width = t.maxWidth, p.height = r ? 10 : 0) : (p.width = r ? 10 : 0, p.height = t.maxHeight), r) if (l.font = f, v) {
              var m = t.lineWidths = [0],
                  b = t.legendItems.length ? d + a.padding : 0;
              l.textAlign = "left", l.textBaseline = "top", o.each(t.legendItems, function (n, i) {
                var o = e(a, d) + d / 2 + l.measureText(n.text).width;
                m[m.length - 1] + o + a.padding >= t.width && (b += d + a.padding, m[m.length] = t.left), g[i] = {
                  left: 0,
                  top: 0,
                  width: o,
                  height: d
                }, m[m.length - 1] += o + a.padding;
              }), p.height += b;
            } else {
              var x = a.padding,
                  y = t.columnWidths = [],
                  k = a.padding,
                  w = 0,
                  M = 0,
                  S = d + x;
              o.each(t.legendItems, function (t, n) {
                var i = e(a, d) + d / 2 + l.measureText(t.text).width;
                M + S > p.height && (k += w + a.padding, y.push(w), w = 0, M = 0), w = Math.max(w, i), M += S, g[n] = {
                  left: 0,
                  top: 0,
                  width: i,
                  height: d
                };
              }), k += w, y.push(w), p.width += k;
            }
            t.width = p.width, t.height = p.height;
          },
          afterFit: l,
          isHorizontal: function isHorizontal() {
            return "top" === this.options.position || "bottom" === this.options.position;
          },
          draw: function draw() {
            var t = this,
                n = t.options,
                a = n.labels,
                r = i.global,
                l = r.elements.line,
                s = t.width,
                u = t.lineWidths;

            if (n.display) {
              var d,
                  c = t.ctx,
                  h = o.valueOrDefault,
                  f = h(a.fontColor, r.defaultFontColor),
                  g = h(a.fontSize, r.defaultFontSize),
                  p = h(a.fontStyle, r.defaultFontStyle),
                  v = h(a.fontFamily, r.defaultFontFamily),
                  m = o.fontString(g, p, v);
              c.textAlign = "left", c.textBaseline = "middle", c.lineWidth = .5, c.strokeStyle = f, c.fillStyle = f, c.font = m;

              var b = e(a, g),
                  x = t.legendHitBoxes,
                  y = function y(t, e, i) {
                if (!(isNaN(b) || b <= 0)) {
                  c.save(), c.fillStyle = h(i.fillStyle, r.defaultColor), c.lineCap = h(i.lineCap, l.borderCapStyle), c.lineDashOffset = h(i.lineDashOffset, l.borderDashOffset), c.lineJoin = h(i.lineJoin, l.borderJoinStyle), c.lineWidth = h(i.lineWidth, l.borderWidth), c.strokeStyle = h(i.strokeStyle, r.defaultColor);
                  var a = 0 === h(i.lineWidth, l.borderWidth);

                  if (c.setLineDash && c.setLineDash(h(i.lineDash, l.borderDash)), n.labels && n.labels.usePointStyle) {
                    var s = g * Math.SQRT2 / 2,
                        u = s / Math.SQRT2,
                        d = t + u,
                        f = e + u;
                    o.canvas.drawPoint(c, i.pointStyle, s, d, f);
                  } else a || c.strokeRect(t, e, b, g), c.fillRect(t, e, b, g);

                  c.restore();
                }
              },
                  k = function k(t, e, n, i) {
                var a = g / 2,
                    o = b + a + t,
                    r = e + a;
                c.fillText(n.text, o, r), n.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(o, r), c.lineTo(o + i, r), c.stroke());
              },
                  w = t.isHorizontal();

              d = w ? {
                x: t.left + (s - u[0]) / 2,
                y: t.top + a.padding,
                line: 0
              } : {
                x: t.left + a.padding,
                y: t.top + a.padding,
                line: 0
              };
              var M = g + a.padding;
              o.each(t.legendItems, function (e, n) {
                var i = c.measureText(e.text).width,
                    o = b + g / 2 + i,
                    r = d.x,
                    l = d.y;
                w ? r + o >= s && (l = d.y += M, d.line++, r = d.x = t.left + (s - u[d.line]) / 2) : l + M > t.bottom && (r = d.x = r + t.columnWidths[d.line] + a.padding, l = d.y = t.top + a.padding, d.line++), y(r, l, e), x[n].left = r, x[n].top = l, k(r, l, e, i), w ? d.x += o + a.padding : d.y += M;
              });
            }
          },
          handleEvent: function handleEvent(t) {
            var e = this,
                n = e.options,
                i = "mouseup" === t.type ? "click" : t.type,
                a = !1;

            if ("mousemove" === i) {
              if (!n.onHover) return;
            } else {
              if ("click" !== i) return;
              if (!n.onClick) return;
            }

            var o = t.x,
                r = t.y;
            if (o >= e.left && o <= e.right && r >= e.top && r <= e.bottom) for (var l = e.legendHitBoxes, s = 0; s < l.length; ++s) {
              var u = l[s];

              if (o >= u.left && o <= u.left + u.width && r >= u.top && r <= u.top + u.height) {
                if ("click" === i) {
                  n.onClick.call(e, t["native"], e.legendItems[s]), a = !0;
                  break;
                }

                if ("mousemove" === i) {
                  n.onHover.call(e, t["native"], e.legendItems[s]), a = !0;
                  break;
                }
              }
            }
            return a;
          }
        }), {
          id: "legend",
          beforeInit: function beforeInit(t) {
            var e = t.options.legend;
            e && n(t, e);
          },
          beforeUpdate: function beforeUpdate(t) {
            var e = t.options.legend,
                a = t.legend;
            e ? (o.mergeIf(e, i.global.legend), a ? (r.configure(t, a, e), a.options = e) : n(t, e)) : a && (r.removeBox(t, a), delete t.legend);
          },
          afterEvent: function afterEvent(t, e) {
            var n = t.legend;
            n && n.handleEvent(e);
          }
        };
      };
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    51: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(26),
          o = t(45);
      i._set("global", {
        title: {
          display: !1,
          fontStyle: "bold",
          fullWidth: !0,
          lineHeight: 1.2,
          padding: 10,
          position: "top",
          text: "",
          weight: 2e3
        }
      }), e.exports = function (t) {
        function e(e, i) {
          var a = new t.Title({
            ctx: e.ctx,
            options: i,
            chart: e
          });
          n.configure(e, a, i), n.addBox(e, a), e.titleBlock = a;
        }

        var n = t.layoutService,
            r = o.noop;
        return t.Title = a.extend({
          initialize: function initialize(t) {
            var e = this;
            o.extend(e, t), e.legendHitBoxes = [];
          },
          beforeUpdate: r,
          update: function update(t, e, n) {
            var i = this;
            return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;
          },
          afterUpdate: r,
          beforeSetDimensions: r,
          setDimensions: function setDimensions() {
            var t = this;
            t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {
              width: 0,
              height: 0
            };
          },
          afterSetDimensions: r,
          beforeBuildLabels: r,
          buildLabels: r,
          afterBuildLabels: r,
          beforeFit: r,
          fit: function fit() {
            var t = this,
                e = o.valueOrDefault,
                n = t.options,
                a = n.display,
                r = e(n.fontSize, i.global.defaultFontSize),
                l = t.minSize,
                s = o.isArray(n.text) ? n.text.length : 1,
                u = o.options.toLineHeight(n.lineHeight, r),
                d = a ? s * u + 2 * n.padding : 0;
            t.isHorizontal() ? (l.width = t.maxWidth, l.height = d) : (l.width = d, l.height = t.maxHeight), t.width = l.width, t.height = l.height;
          },
          afterFit: r,
          isHorizontal: function isHorizontal() {
            var t = this.options.position;
            return "top" === t || "bottom" === t;
          },
          draw: function draw() {
            var t = this,
                e = t.ctx,
                n = o.valueOrDefault,
                a = t.options,
                r = i.global;

            if (a.display) {
              var l,
                  s,
                  u,
                  d = n(a.fontSize, r.defaultFontSize),
                  c = n(a.fontStyle, r.defaultFontStyle),
                  h = n(a.fontFamily, r.defaultFontFamily),
                  f = o.fontString(d, c, h),
                  g = o.options.toLineHeight(a.lineHeight, d),
                  p = g / 2 + a.padding,
                  v = 0,
                  m = t.top,
                  b = t.left,
                  x = t.bottom,
                  y = t.right;
              e.fillStyle = n(a.fontColor, r.defaultFontColor), e.font = f, t.isHorizontal() ? (s = b + (y - b) / 2, u = m + p, l = y - b) : (s = "left" === a.position ? b + p : y - p, u = m + (x - m) / 2, l = x - m, v = Math.PI * ("left" === a.position ? -.5 : .5)), e.save(), e.translate(s, u), e.rotate(v), e.textAlign = "center", e.textBaseline = "middle";
              var k = a.text;
              if (o.isArray(k)) for (var w = 0, M = 0; M < k.length; ++M) {
                e.fillText(k[M], 0, w, l), w += g;
              } else e.fillText(k, 0, 0, l);
              e.restore();
            }
          }
        }), {
          id: "title",
          beforeInit: function beforeInit(t) {
            var n = t.options.title;
            n && e(t, n);
          },
          beforeUpdate: function beforeUpdate(a) {
            var r = a.options.title,
                l = a.titleBlock;
            r ? (o.mergeIf(r, i.global.title), l ? (n.configure(a, l, r), l.options = r) : e(a, r)) : l && (t.layoutService.removeBox(a, l), delete a.titleBlock);
          }
        };
      };
    }, {
      25: 25,
      26: 26,
      45: 45
    }],
    52: [function (t, e, n) {
      "use strict";

      e.exports = function (t) {
        var e = {
          position: "bottom"
        },
            n = t.Scale.extend({
          getLabels: function getLabels() {
            var t = this.chart.data;
            return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels;
          },
          determineDataLimits: function determineDataLimits() {
            var t = this,
                e = t.getLabels();
            t.minIndex = 0, t.maxIndex = e.length - 1;
            var n;
            void 0 !== t.options.ticks.min && (n = e.indexOf(t.options.ticks.min), t.minIndex = -1 !== n ? n : t.minIndex), void 0 !== t.options.ticks.max && (n = e.indexOf(t.options.ticks.max), t.maxIndex = -1 !== n ? n : t.maxIndex), t.min = e[t.minIndex], t.max = e[t.maxIndex];
          },
          buildTicks: function buildTicks() {
            var t = this,
                e = t.getLabels();
            t.ticks = 0 === t.minIndex && t.maxIndex === e.length - 1 ? e : e.slice(t.minIndex, t.maxIndex + 1);
          },
          getLabelForIndex: function getLabelForIndex(t, e) {
            var n = this,
                i = n.chart.data,
                a = n.isHorizontal();
            return i.yLabels && !a ? n.getRightValue(i.datasets[e].data[t]) : n.ticks[t - n.minIndex];
          },
          getPixelForValue: function getPixelForValue(t, e) {
            var n,
                i = this,
                a = i.options.offset,
                o = Math.max(i.maxIndex + 1 - i.minIndex - (a ? 0 : 1), 1);

            if (void 0 !== t && null !== t && (n = i.isHorizontal() ? t.x : t.y), void 0 !== n || void 0 !== t && isNaN(e)) {
              var r = i.getLabels();
              t = n || t;
              var l = r.indexOf(t);
              e = -1 !== l ? l : e;
            }

            if (i.isHorizontal()) {
              var s = i.width / o,
                  u = s * (e - i.minIndex);
              return a && (u += s / 2), i.left + Math.round(u);
            }

            var d = i.height / o,
                c = d * (e - i.minIndex);
            return a && (c += d / 2), i.top + Math.round(c);
          },
          getPixelForTick: function getPixelForTick(t) {
            return this.getPixelForValue(this.ticks[t], t + this.minIndex, null);
          },
          getValueForPixel: function getValueForPixel(t) {
            var e = this,
                n = e.options.offset,
                i = Math.max(e._ticks.length - (n ? 0 : 1), 1),
                a = e.isHorizontal(),
                o = (a ? e.width : e.height) / i;
            return t -= a ? e.left : e.top, n && (t -= o / 2), (t <= 0 ? 0 : Math.round(t / o)) + e.minIndex;
          },
          getBasePixel: function getBasePixel() {
            return this.bottom;
          }
        });
        t.scaleService.registerScaleType("category", n, e);
      };
    }, {}],
    53: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(45),
          o = t(34);

      e.exports = function (t) {
        var e = {
          position: "left",
          ticks: {
            callback: o.formatters.linear
          }
        },
            n = t.LinearScaleBase.extend({
          determineDataLimits: function determineDataLimits() {
            function t(t) {
              return r ? t.xAxisID === e.id : t.yAxisID === e.id;
            }

            var e = this,
                n = e.options,
                i = e.chart,
                o = i.data.datasets,
                r = e.isHorizontal();
            e.min = null, e.max = null;
            var l = n.stacked;

            if (void 0 === l && a.each(o, function (e, n) {
              if (!l) {
                var a = i.getDatasetMeta(n);
                i.isDatasetVisible(n) && t(a) && void 0 !== a.stack && (l = !0);
              }
            }), n.stacked || l) {
              var s = {};
              a.each(o, function (o, r) {
                var l = i.getDatasetMeta(r),
                    u = [l.type, void 0 === n.stacked && void 0 === l.stack ? r : "", l.stack].join(".");
                void 0 === s[u] && (s[u] = {
                  positiveValues: [],
                  negativeValues: []
                });
                var d = s[u].positiveValues,
                    c = s[u].negativeValues;
                i.isDatasetVisible(r) && t(l) && a.each(o.data, function (t, i) {
                  var a = +e.getRightValue(t);
                  isNaN(a) || l.data[i].hidden || (d[i] = d[i] || 0, c[i] = c[i] || 0, n.relativePoints ? d[i] = 100 : a < 0 ? c[i] += a : d[i] += a);
                });
              }), a.each(s, function (t) {
                var n = t.positiveValues.concat(t.negativeValues),
                    i = a.min(n),
                    o = a.max(n);
                e.min = null === e.min ? i : Math.min(e.min, i), e.max = null === e.max ? o : Math.max(e.max, o);
              });
            } else a.each(o, function (n, o) {
              var r = i.getDatasetMeta(o);
              i.isDatasetVisible(o) && t(r) && a.each(n.data, function (t, n) {
                var i = +e.getRightValue(t);
                isNaN(i) || r.data[n].hidden || (null === e.min ? e.min = i : i < e.min && (e.min = i), null === e.max ? e.max = i : i > e.max && (e.max = i));
              });
            });

            e.min = isFinite(e.min) && !isNaN(e.min) ? e.min : 0, e.max = isFinite(e.max) && !isNaN(e.max) ? e.max : 1, this.handleTickRangeOptions();
          },
          getTickLimit: function getTickLimit() {
            var t,
                e = this,
                n = e.options.ticks;
            if (e.isHorizontal()) t = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(e.width / 50));else {
              var o = a.valueOrDefault(n.fontSize, i.global.defaultFontSize);
              t = Math.min(n.maxTicksLimit ? n.maxTicksLimit : 11, Math.ceil(e.height / (2 * o)));
            }
            return t;
          },
          handleDirectionalChanges: function handleDirectionalChanges() {
            this.isHorizontal() || this.ticks.reverse();
          },
          getLabelForIndex: function getLabelForIndex(t, e) {
            return +this.getRightValue(this.chart.data.datasets[e].data[t]);
          },
          getPixelForValue: function getPixelForValue(t) {
            var e,
                n = this,
                i = n.start,
                a = +n.getRightValue(t),
                o = n.end - i;
            return n.isHorizontal() ? (e = n.left + n.width / o * (a - i), Math.round(e)) : (e = n.bottom - n.height / o * (a - i), Math.round(e));
          },
          getValueForPixel: function getValueForPixel(t) {
            var e = this,
                n = e.isHorizontal(),
                i = n ? e.width : e.height,
                a = (n ? t - e.left : e.bottom - t) / i;
            return e.start + (e.end - e.start) * a;
          },
          getPixelForTick: function getPixelForTick(t) {
            return this.getPixelForValue(this.ticksAsNumbers[t]);
          }
        });
        t.scaleService.registerScaleType("linear", n, e);
      };
    }, {
      25: 25,
      34: 34,
      45: 45
    }],
    54: [function (t, e, n) {
      "use strict";

      var i = t(45),
          a = t(34);

      e.exports = function (t) {
        var e = i.noop;
        t.LinearScaleBase = t.Scale.extend({
          getRightValue: function getRightValue(e) {
            return "string" == typeof e ? +e : t.Scale.prototype.getRightValue.call(this, e);
          },
          handleTickRangeOptions: function handleTickRangeOptions() {
            var t = this,
                e = t.options.ticks;

            if (e.beginAtZero) {
              var n = i.sign(t.min),
                  a = i.sign(t.max);
              n < 0 && a < 0 ? t.max = 0 : n > 0 && a > 0 && (t.min = 0);
            }

            var o = void 0 !== e.min || void 0 !== e.suggestedMin,
                r = void 0 !== e.max || void 0 !== e.suggestedMax;
            void 0 !== e.min ? t.min = e.min : void 0 !== e.suggestedMin && (null === t.min ? t.min = e.suggestedMin : t.min = Math.min(t.min, e.suggestedMin)), void 0 !== e.max ? t.max = e.max : void 0 !== e.suggestedMax && (null === t.max ? t.max = e.suggestedMax : t.max = Math.max(t.max, e.suggestedMax)), o !== r && t.min >= t.max && (o ? t.max = t.min + 1 : t.min = t.max - 1), t.min === t.max && (t.max++, e.beginAtZero || t.min--);
          },
          getTickLimit: e,
          handleDirectionalChanges: e,
          buildTicks: function buildTicks() {
            var t = this,
                e = t.options.ticks,
                n = t.getTickLimit(),
                o = {
              maxTicks: n = Math.max(2, n),
              min: e.min,
              max: e.max,
              stepSize: i.valueOrDefault(e.fixedStepSize, e.stepSize)
            },
                r = t.ticks = a.generators.linear(o, t);
            t.handleDirectionalChanges(), t.max = i.max(r), t.min = i.min(r), e.reverse ? (r.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max);
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var e = this;
            e.ticksAsNumbers = e.ticks.slice(), e.zeroLineIndex = e.ticks.indexOf(0), t.Scale.prototype.convertTicksToLabels.call(e);
          }
        });
      };
    }, {
      34: 34,
      45: 45
    }],
    55: [function (t, e, n) {
      "use strict";

      var i = t(45),
          a = t(34);

      e.exports = function (t) {
        var e = {
          position: "left",
          ticks: {
            callback: a.formatters.logarithmic
          }
        },
            n = t.Scale.extend({
          determineDataLimits: function determineDataLimits() {
            function t(t) {
              return s ? t.xAxisID === e.id : t.yAxisID === e.id;
            }

            var e = this,
                n = e.options,
                a = n.ticks,
                o = e.chart,
                r = o.data.datasets,
                l = i.valueOrDefault,
                s = e.isHorizontal();
            e.min = null, e.max = null, e.minNotZero = null;
            var u = n.stacked;

            if (void 0 === u && i.each(r, function (e, n) {
              if (!u) {
                var i = o.getDatasetMeta(n);
                o.isDatasetVisible(n) && t(i) && void 0 !== i.stack && (u = !0);
              }
            }), n.stacked || u) {
              var d = {};
              i.each(r, function (a, r) {
                var l = o.getDatasetMeta(r),
                    s = [l.type, void 0 === n.stacked && void 0 === l.stack ? r : "", l.stack].join(".");
                o.isDatasetVisible(r) && t(l) && (void 0 === d[s] && (d[s] = []), i.each(a.data, function (t, i) {
                  var a = d[s],
                      o = +e.getRightValue(t);
                  isNaN(o) || l.data[i].hidden || (a[i] = a[i] || 0, n.relativePoints ? a[i] = 100 : a[i] += o);
                }));
              }), i.each(d, function (t) {
                var n = i.min(t),
                    a = i.max(t);
                e.min = null === e.min ? n : Math.min(e.min, n), e.max = null === e.max ? a : Math.max(e.max, a);
              });
            } else i.each(r, function (n, a) {
              var r = o.getDatasetMeta(a);
              o.isDatasetVisible(a) && t(r) && i.each(n.data, function (t, n) {
                var i = +e.getRightValue(t);
                isNaN(i) || r.data[n].hidden || (null === e.min ? e.min = i : i < e.min && (e.min = i), null === e.max ? e.max = i : i > e.max && (e.max = i), 0 !== i && (null === e.minNotZero || i < e.minNotZero) && (e.minNotZero = i));
              });
            });

            e.min = l(a.min, e.min), e.max = l(a.max, e.max), e.min === e.max && (0 !== e.min && null !== e.min ? (e.min = Math.pow(10, Math.floor(i.log10(e.min)) - 1), e.max = Math.pow(10, Math.floor(i.log10(e.max)) + 1)) : (e.min = 1, e.max = 10));
          },
          buildTicks: function buildTicks() {
            var t = this,
                e = t.options.ticks,
                n = {
              min: e.min,
              max: e.max
            },
                o = t.ticks = a.generators.logarithmic(n, t);
            t.isHorizontal() || o.reverse(), t.max = i.max(o), t.min = i.min(o), e.reverse ? (o.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max);
          },
          convertTicksToLabels: function convertTicksToLabels() {
            this.tickValues = this.ticks.slice(), t.Scale.prototype.convertTicksToLabels.call(this);
          },
          getLabelForIndex: function getLabelForIndex(t, e) {
            return +this.getRightValue(this.chart.data.datasets[e].data[t]);
          },
          getPixelForTick: function getPixelForTick(t) {
            return this.getPixelForValue(this.tickValues[t]);
          },
          getPixelForValue: function getPixelForValue(t) {
            var e,
                n,
                a,
                o = this,
                r = o.start,
                l = +o.getRightValue(t),
                s = o.options.ticks;
            return o.isHorizontal() ? (a = i.log10(o.end) - i.log10(r), 0 === l ? n = o.left : (e = o.width, n = o.left + e / a * (i.log10(l) - i.log10(r)))) : (e = o.height, 0 !== r || s.reverse ? 0 === o.end && s.reverse ? (a = i.log10(o.start) - i.log10(o.minNotZero), n = l === o.end ? o.top : l === o.minNotZero ? o.top + .02 * e : o.top + .02 * e + .98 * e / a * (i.log10(l) - i.log10(o.minNotZero))) : 0 === l ? n = s.reverse ? o.top : o.bottom : (a = i.log10(o.end) - i.log10(r), e = o.height, n = o.bottom - e / a * (i.log10(l) - i.log10(r))) : (a = i.log10(o.end) - i.log10(o.minNotZero), n = l === r ? o.bottom : l === o.minNotZero ? o.bottom - .02 * e : o.bottom - .02 * e - .98 * e / a * (i.log10(l) - i.log10(o.minNotZero)))), n;
          },
          getValueForPixel: function getValueForPixel(t) {
            var e,
                n,
                a = this,
                o = i.log10(a.end) - i.log10(a.start);
            return a.isHorizontal() ? (n = a.width, e = a.start * Math.pow(10, (t - a.left) * o / n)) : (n = a.height, e = Math.pow(10, (a.bottom - t) * o / n) / a.start), e;
          }
        });
        t.scaleService.registerScaleType("logarithmic", n, e);
      };
    }, {
      34: 34,
      45: 45
    }],
    56: [function (t, e, n) {
      "use strict";

      var i = t(25),
          a = t(45),
          o = t(34);

      e.exports = function (t) {
        function e(t) {
          var e = t.options;
          return e.angleLines.display || e.pointLabels.display ? t.chart.data.labels.length : 0;
        }

        function n(t) {
          var e = t.options.pointLabels,
              n = a.valueOrDefault(e.fontSize, v.defaultFontSize),
              i = a.valueOrDefault(e.fontStyle, v.defaultFontStyle),
              o = a.valueOrDefault(e.fontFamily, v.defaultFontFamily);
          return {
            size: n,
            style: i,
            family: o,
            font: a.fontString(n, i, o)
          };
        }

        function r(t, e, n) {
          return a.isArray(n) ? {
            w: a.longestText(t, t.font, n),
            h: n.length * e + 1.5 * (n.length - 1) * e
          } : {
            w: t.measureText(n).width,
            h: e
          };
        }

        function l(t, e, n, i, a) {
          return t === i || t === a ? {
            start: e - n / 2,
            end: e + n / 2
          } : t < i || t > a ? {
            start: e - n - 5,
            end: e
          } : {
            start: e,
            end: e + n + 5
          };
        }

        function s(t) {
          var i,
              o,
              s,
              u = n(t),
              d = Math.min(t.height / 2, t.width / 2),
              c = {
            r: t.width,
            l: 0,
            t: t.height,
            b: 0
          },
              h = {};
          t.ctx.font = u.font, t._pointLabelSizes = [];
          var f = e(t);

          for (i = 0; i < f; i++) {
            s = t.getPointPosition(i, d), o = r(t.ctx, u.size, t.pointLabels[i] || ""), t._pointLabelSizes[i] = o;
            var g = t.getIndexAngle(i),
                p = a.toDegrees(g) % 360,
                v = l(p, s.x, o.w, 0, 180),
                m = l(p, s.y, o.h, 90, 270);
            v.start < c.l && (c.l = v.start, h.l = g), v.end > c.r && (c.r = v.end, h.r = g), m.start < c.t && (c.t = m.start, h.t = g), m.end > c.b && (c.b = m.end, h.b = g);
          }

          t.setReductions(d, c, h);
        }

        function u(t) {
          var e = Math.min(t.height / 2, t.width / 2);
          t.drawingArea = Math.round(e), t.setCenterPoint(0, 0, 0, 0);
        }

        function d(t) {
          return 0 === t || 180 === t ? "center" : t < 180 ? "left" : "right";
        }

        function c(t, e, n, i) {
          if (a.isArray(e)) for (var o = n.y, r = 1.5 * i, l = 0; l < e.length; ++l) {
            t.fillText(e[l], n.x, o), o += r;
          } else t.fillText(e, n.x, n.y);
        }

        function h(t, e, n) {
          90 === t || 270 === t ? n.y -= e.h / 2 : (t > 270 || t < 90) && (n.y -= e.h);
        }

        function f(t) {
          var i = t.ctx,
              o = a.valueOrDefault,
              r = t.options,
              l = r.angleLines,
              s = r.pointLabels;
          i.lineWidth = l.lineWidth, i.strokeStyle = l.color;
          var u = t.getDistanceFromCenterForValue(r.ticks.reverse ? t.min : t.max),
              f = n(t);
          i.textBaseline = "top";

          for (var g = e(t) - 1; g >= 0; g--) {
            if (l.display) {
              var p = t.getPointPosition(g, u);
              i.beginPath(), i.moveTo(t.xCenter, t.yCenter), i.lineTo(p.x, p.y), i.stroke(), i.closePath();
            }

            if (s.display) {
              var m = t.getPointPosition(g, u + 5),
                  b = o(s.fontColor, v.defaultFontColor);
              i.font = f.font, i.fillStyle = b;
              var x = t.getIndexAngle(g),
                  y = a.toDegrees(x);
              i.textAlign = d(y), h(y, t._pointLabelSizes[g], m), c(i, t.pointLabels[g] || "", m, f.size);
            }
          }
        }

        function g(t, n, i, o) {
          var r = t.ctx;
          if (r.strokeStyle = a.valueAtIndexOrDefault(n.color, o - 1), r.lineWidth = a.valueAtIndexOrDefault(n.lineWidth, o - 1), t.options.gridLines.circular) r.beginPath(), r.arc(t.xCenter, t.yCenter, i, 0, 2 * Math.PI), r.closePath(), r.stroke();else {
            var l = e(t);
            if (0 === l) return;
            r.beginPath();
            var s = t.getPointPosition(0, i);
            r.moveTo(s.x, s.y);

            for (var u = 1; u < l; u++) {
              s = t.getPointPosition(u, i), r.lineTo(s.x, s.y);
            }

            r.closePath(), r.stroke();
          }
        }

        function p(t) {
          return a.isNumber(t) ? t : 0;
        }

        var v = i.global,
            m = {
          display: !0,
          animate: !0,
          position: "chartArea",
          angleLines: {
            display: !0,
            color: "rgba(0, 0, 0, 0.1)",
            lineWidth: 1
          },
          gridLines: {
            circular: !1
          },
          ticks: {
            showLabelBackdrop: !0,
            backdropColor: "rgba(255,255,255,0.75)",
            backdropPaddingY: 2,
            backdropPaddingX: 2,
            callback: o.formatters.linear
          },
          pointLabels: {
            display: !0,
            fontSize: 10,
            callback: function callback(t) {
              return t;
            }
          }
        },
            b = t.LinearScaleBase.extend({
          setDimensions: function setDimensions() {
            var t = this,
                e = t.options,
                n = e.ticks;
            t.width = t.maxWidth, t.height = t.maxHeight, t.xCenter = Math.round(t.width / 2), t.yCenter = Math.round(t.height / 2);
            var i = a.min([t.height, t.width]),
                o = a.valueOrDefault(n.fontSize, v.defaultFontSize);
            t.drawingArea = e.display ? i / 2 - (o / 2 + n.backdropPaddingY) : i / 2;
          },
          determineDataLimits: function determineDataLimits() {
            var t = this,
                e = t.chart,
                n = Number.POSITIVE_INFINITY,
                i = Number.NEGATIVE_INFINITY;
            a.each(e.data.datasets, function (o, r) {
              if (e.isDatasetVisible(r)) {
                var l = e.getDatasetMeta(r);
                a.each(o.data, function (e, a) {
                  var o = +t.getRightValue(e);
                  isNaN(o) || l.data[a].hidden || (n = Math.min(o, n), i = Math.max(o, i));
                });
              }
            }), t.min = n === Number.POSITIVE_INFINITY ? 0 : n, t.max = i === Number.NEGATIVE_INFINITY ? 0 : i, t.handleTickRangeOptions();
          },
          getTickLimit: function getTickLimit() {
            var t = this.options.ticks,
                e = a.valueOrDefault(t.fontSize, v.defaultFontSize);
            return Math.min(t.maxTicksLimit ? t.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * e)));
          },
          convertTicksToLabels: function convertTicksToLabels() {
            var e = this;
            t.LinearScaleBase.prototype.convertTicksToLabels.call(e), e.pointLabels = e.chart.data.labels.map(e.options.pointLabels.callback, e);
          },
          getLabelForIndex: function getLabelForIndex(t, e) {
            return +this.getRightValue(this.chart.data.datasets[e].data[t]);
          },
          fit: function fit() {
            this.options.pointLabels.display ? s(this) : u(this);
          },
          setReductions: function setReductions(t, e, n) {
            var i = this,
                a = e.l / Math.sin(n.l),
                o = Math.max(e.r - i.width, 0) / Math.sin(n.r),
                r = -e.t / Math.cos(n.t),
                l = -Math.max(e.b - i.height, 0) / Math.cos(n.b);
            a = p(a), o = p(o), r = p(r), l = p(l), i.drawingArea = Math.min(Math.round(t - (a + o) / 2), Math.round(t - (r + l) / 2)), i.setCenterPoint(a, o, r, l);
          },
          setCenterPoint: function setCenterPoint(t, e, n, i) {
            var a = this,
                o = a.width - e - a.drawingArea,
                r = t + a.drawingArea,
                l = n + a.drawingArea,
                s = a.height - i - a.drawingArea;
            a.xCenter = Math.round((r + o) / 2 + a.left), a.yCenter = Math.round((l + s) / 2 + a.top);
          },
          getIndexAngle: function getIndexAngle(t) {
            return t * (2 * Math.PI / e(this)) + (this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0) * Math.PI * 2 / 360;
          },
          getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {
            var e = this;
            if (null === t) return 0;
            var n = e.drawingArea / (e.max - e.min);
            return e.options.ticks.reverse ? (e.max - t) * n : (t - e.min) * n;
          },
          getPointPosition: function getPointPosition(t, e) {
            var n = this,
                i = n.getIndexAngle(t) - Math.PI / 2;
            return {
              x: Math.round(Math.cos(i) * e) + n.xCenter,
              y: Math.round(Math.sin(i) * e) + n.yCenter
            };
          },
          getPointPositionForValue: function getPointPositionForValue(t, e) {
            return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));
          },
          getBasePosition: function getBasePosition() {
            var t = this,
                e = t.min,
                n = t.max;
            return t.getPointPositionForValue(0, t.beginAtZero ? 0 : e < 0 && n < 0 ? n : e > 0 && n > 0 ? e : 0);
          },
          draw: function draw() {
            var t = this,
                e = t.options,
                n = e.gridLines,
                i = e.ticks,
                o = a.valueOrDefault;

            if (e.display) {
              var r = t.ctx,
                  l = this.getIndexAngle(0),
                  s = o(i.fontSize, v.defaultFontSize),
                  u = o(i.fontStyle, v.defaultFontStyle),
                  d = o(i.fontFamily, v.defaultFontFamily),
                  c = a.fontString(s, u, d);
              a.each(t.ticks, function (e, a) {
                if (a > 0 || i.reverse) {
                  var u = t.getDistanceFromCenterForValue(t.ticksAsNumbers[a]);

                  if (n.display && 0 !== a && g(t, n, u, a), i.display) {
                    var d = o(i.fontColor, v.defaultFontColor);

                    if (r.font = c, r.save(), r.translate(t.xCenter, t.yCenter), r.rotate(l), i.showLabelBackdrop) {
                      var h = r.measureText(e).width;
                      r.fillStyle = i.backdropColor, r.fillRect(-h / 2 - i.backdropPaddingX, -u - s / 2 - i.backdropPaddingY, h + 2 * i.backdropPaddingX, s + 2 * i.backdropPaddingY);
                    }

                    r.textAlign = "center", r.textBaseline = "middle", r.fillStyle = d, r.fillText(e, 0, -u), r.restore();
                  }
                }
              }), (e.angleLines.display || e.pointLabels.display) && f(t);
            }
          }
        });
        t.scaleService.registerScaleType("radialLinear", b, m);
      };
    }, {
      25: 25,
      34: 34,
      45: 45
    }],
    57: [function (t, e, n) {
      "use strict";

      function i(t, e) {
        return t - e;
      }

      function a(t) {
        var e,
            n,
            i,
            a = {},
            o = [];

        for (e = 0, n = t.length; e < n; ++e) {
          a[i = t[e]] || (a[i] = !0, o.push(i));
        }

        return o;
      }

      function o(t, e, n, i) {
        if ("linear" === i || !t.length) return [{
          time: e,
          pos: 0
        }, {
          time: n,
          pos: 1
        }];
        var a,
            o,
            r,
            l,
            s,
            u = [],
            d = [e];

        for (a = 0, o = t.length; a < o; ++a) {
          (l = t[a]) > e && l < n && d.push(l);
        }

        for (d.push(n), a = 0, o = d.length; a < o; ++a) {
          s = d[a + 1], r = d[a - 1], l = d[a], void 0 !== r && void 0 !== s && Math.round((s + r) / 2) === l || u.push({
            time: l,
            pos: a / (o - 1)
          });
        }

        return u;
      }

      function r(t, e, n) {
        for (var i, a, o, r = 0, l = t.length - 1; r >= 0 && r <= l;) {
          if (i = r + l >> 1, a = t[i - 1] || null, o = t[i], !a) return {
            lo: null,
            hi: o
          };
          if (o[e] < n) r = i + 1;else {
            if (!(a[e] > n)) return {
              lo: a,
              hi: o
            };
            l = i - 1;
          }
        }

        return {
          lo: o,
          hi: null
        };
      }

      function l(t, e, n, i) {
        var a = r(t, e, n),
            o = a.lo ? a.hi ? a.lo : t[t.length - 2] : t[0],
            l = a.lo ? a.hi ? a.hi : t[t.length - 1] : t[1],
            s = l[e] - o[e],
            u = s ? (n - o[e]) / s : 0,
            d = (l[i] - o[i]) * u;
        return o[i] + d;
      }

      function s(t, e) {
        var n = e.parser,
            i = e.parser || e.format;
        return "function" == typeof n ? n(t) : "string" == typeof t && "string" == typeof i ? v(t, i) : (t instanceof v || (t = v(t)), t.isValid() ? t : "function" == typeof i ? i(t) : t);
      }

      function u(t, e) {
        if (b.isNullOrUndef(t)) return null;
        var n = e.options.time,
            i = s(e.getRightValue(t), n);
        return i.isValid() ? (n.round && i.startOf(n.round), i.valueOf()) : null;
      }

      function d(t, e, n, i) {
        var a,
            o,
            r,
            l = e - t,
            s = k[n],
            u = s.size,
            d = s.steps;
        if (!d) return Math.ceil(l / ((i || 1) * u));

        for (a = 0, o = d.length; a < o && (r = d[a], !(Math.ceil(l / (u * r)) <= i)); ++a) {
          ;
        }

        return r;
      }

      function c(t, e, n, i) {
        var a,
            o,
            r,
            l = w.length;

        for (a = w.indexOf(t); a < l - 1; ++a) {
          if (o = k[w[a]], r = o.steps ? o.steps[o.steps.length - 1] : y, Math.ceil((n - e) / (r * o.size)) <= i) return w[a];
        }

        return w[l - 1];
      }

      function h(t) {
        for (var e = w.indexOf(t) + 1, n = w.length; e < n; ++e) {
          if (k[w[e]].major) return w[e];
        }
      }

      function f(t, e, n, i, a, o) {
        var r,
            l = o.time,
            s = b.valueOrDefault(l.stepSize, l.unitStepSize),
            u = "week" === n && l.isoWeekday,
            c = o.ticks.major.enabled,
            h = k[n],
            f = v(t),
            g = v(e),
            p = [];

        for (s || (s = d(t, e, n, a)), u && (f = f.isoWeekday(u), g = g.isoWeekday(u)), f = f.startOf(u ? "day" : n), (g = g.startOf(u ? "day" : n)) < e && g.add(1, n), r = v(f), c && i && !u && !l.round && (r.startOf(i), r.add(~~((f - r) / (h.size * s)) * s, n)); r < g; r.add(s, n)) {
          p.push(+r);
        }

        return p.push(+r), p;
      }

      function g(t, e, n, i, a) {
        var o,
            r,
            s = 0,
            u = 0;
        return a.offset && e.length && (a.time.min || (o = e.length > 1 ? e[1] : i, r = e[0], s = (l(t, "time", o, "pos") - l(t, "time", r, "pos")) / 2), a.time.max || (o = e[e.length - 1], r = e.length > 1 ? e[e.length - 2] : n, u = (l(t, "time", o, "pos") - l(t, "time", r, "pos")) / 2)), {
          left: s,
          right: u
        };
      }

      function p(t, e) {
        var n,
            i,
            a,
            o,
            r = [];

        for (n = 0, i = t.length; n < i; ++n) {
          a = t[n], o = !!e && a === +v(a).startOf(e), r.push({
            value: a,
            major: o
          });
        }

        return r;
      }

      var v = t(1);
      v = "function" == typeof v ? v : window.moment;
      var m = t(25),
          b = t(45),
          x = Number.MIN_SAFE_INTEGER || -9007199254740991,
          y = Number.MAX_SAFE_INTEGER || 9007199254740991,
          k = {
        millisecond: {
          major: !0,
          size: 1,
          steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
        },
        second: {
          major: !0,
          size: 1e3,
          steps: [1, 2, 5, 10, 30]
        },
        minute: {
          major: !0,
          size: 6e4,
          steps: [1, 2, 5, 10, 30]
        },
        hour: {
          major: !0,
          size: 36e5,
          steps: [1, 2, 3, 6, 12]
        },
        day: {
          major: !0,
          size: 864e5,
          steps: [1, 2, 5]
        },
        week: {
          major: !1,
          size: 6048e5,
          steps: [1, 2, 3, 4]
        },
        month: {
          major: !0,
          size: 2628e6,
          steps: [1, 2, 3]
        },
        quarter: {
          major: !1,
          size: 7884e6,
          steps: [1, 2, 3, 4]
        },
        year: {
          major: !0,
          size: 3154e7
        }
      },
          w = Object.keys(k);

      e.exports = function (t) {
        var e = {
          position: "bottom",
          distribution: "linear",
          bounds: "data",
          time: {
            parser: !1,
            format: !1,
            unit: !1,
            round: !1,
            displayFormat: !1,
            isoWeekday: !1,
            minUnit: "millisecond",
            displayFormats: {
              millisecond: "h:mm:ss.SSS a",
              second: "h:mm:ss a",
              minute: "h:mm a",
              hour: "hA",
              day: "MMM D",
              week: "ll",
              month: "MMM YYYY",
              quarter: "[Q]Q - YYYY",
              year: "YYYY"
            }
          },
          ticks: {
            autoSkip: !1,
            source: "auto",
            major: {
              enabled: !1
            }
          }
        },
            n = t.Scale.extend({
          initialize: function initialize() {
            if (!v) throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");
            this.mergeTicksOptions(), t.Scale.prototype.initialize.call(this);
          },
          update: function update() {
            var e = this,
                n = e.options;
            return n.time && n.time.format && console.warn("options.time.format is deprecated and replaced by options.time.parser."), t.Scale.prototype.update.apply(e, arguments);
          },
          getRightValue: function getRightValue(e) {
            return e && void 0 !== e.t && (e = e.t), t.Scale.prototype.getRightValue.call(this, e);
          },
          determineDataLimits: function determineDataLimits() {
            var t,
                e,
                n,
                o,
                r,
                l,
                s = this,
                d = s.chart,
                c = s.options.time,
                h = u(c.min, s) || y,
                f = u(c.max, s) || x,
                g = [],
                p = [],
                m = [];

            for (t = 0, n = d.data.labels.length; t < n; ++t) {
              m.push(u(d.data.labels[t], s));
            }

            for (t = 0, n = (d.data.datasets || []).length; t < n; ++t) {
              if (d.isDatasetVisible(t)) {
                if (r = d.data.datasets[t].data, b.isObject(r[0])) for (p[t] = [], e = 0, o = r.length; e < o; ++e) {
                  l = u(r[e], s), g.push(l), p[t][e] = l;
                } else g.push.apply(g, m), p[t] = m.slice(0);
              } else p[t] = [];
            }

            m.length && (m = a(m).sort(i), h = Math.min(h, m[0]), f = Math.max(f, m[m.length - 1])), g.length && (g = a(g).sort(i), h = Math.min(h, g[0]), f = Math.max(f, g[g.length - 1])), h = h === y ? +v().startOf("day") : h, f = f === x ? +v().endOf("day") + 1 : f, s.min = Math.min(h, f), s.max = Math.max(h + 1, f), s._horizontal = s.isHorizontal(), s._table = [], s._timestamps = {
              data: g,
              datasets: p,
              labels: m
            };
          },
          buildTicks: function buildTicks() {
            var t,
                e,
                n,
                i = this,
                a = i.min,
                r = i.max,
                l = i.options,
                s = l.time,
                d = s.displayFormats,
                v = i.getLabelCapacity(a),
                m = s.unit || c(s.minUnit, a, r, v),
                b = h(m),
                x = [],
                y = [];

            switch (l.ticks.source) {
              case "data":
                x = i._timestamps.data;
                break;

              case "labels":
                x = i._timestamps.labels;
                break;

              case "auto":
              default:
                x = f(a, r, m, b, v, l);
            }

            for ("ticks" === l.bounds && x.length && (a = x[0], r = x[x.length - 1]), a = u(s.min, i) || a, r = u(s.max, i) || r, t = 0, e = x.length; t < e; ++t) {
              (n = x[t]) >= a && n <= r && y.push(n);
            }

            return i.min = a, i.max = r, i._unit = m, i._majorUnit = b, i._minorFormat = d[m], i._majorFormat = d[b], i._table = o(i._timestamps.data, a, r, l.distribution), i._offsets = g(i._table, y, a, r, l), p(y, b);
          },
          getLabelForIndex: function getLabelForIndex(t, e) {
            var n = this,
                i = n.chart.data,
                a = n.options.time,
                o = i.labels && t < i.labels.length ? i.labels[t] : "",
                r = i.datasets[e].data[t];
            return b.isObject(r) && (o = n.getRightValue(r)), a.tooltipFormat && (o = s(o, a).format(a.tooltipFormat)), o;
          },
          tickFormatFunction: function tickFormatFunction(t, e, n) {
            var i = this,
                a = i.options,
                o = t.valueOf(),
                r = i._majorUnit,
                l = i._majorFormat,
                s = t.clone().startOf(i._majorUnit).valueOf(),
                u = a.ticks.major,
                d = u.enabled && r && l && o === s,
                c = t.format(d ? l : i._minorFormat),
                h = d ? u : a.ticks.minor,
                f = b.valueOrDefault(h.callback, h.userCallback);
            return f ? f(c, e, n) : c;
          },
          convertTicksToLabels: function convertTicksToLabels(t) {
            var e,
                n,
                i = [];

            for (e = 0, n = t.length; e < n; ++e) {
              i.push(this.tickFormatFunction(v(t[e].value), e, t));
            }

            return i;
          },
          getPixelForOffset: function getPixelForOffset(t) {
            var e = this,
                n = e._horizontal ? e.width : e.height,
                i = e._horizontal ? e.left : e.top,
                a = l(e._table, "time", t, "pos");
            return i + n * (e._offsets.left + a) / (e._offsets.left + 1 + e._offsets.right);
          },
          getPixelForValue: function getPixelForValue(t, e, n) {
            var i = this,
                a = null;
            if (void 0 !== e && void 0 !== n && (a = i._timestamps.datasets[n][e]), null === a && (a = u(t, i)), null !== a) return i.getPixelForOffset(a);
          },
          getPixelForTick: function getPixelForTick(t) {
            var e = this.getTicks();
            return t >= 0 && t < e.length ? this.getPixelForOffset(e[t].value) : null;
          },
          getValueForPixel: function getValueForPixel(t) {
            var e = this,
                n = e._horizontal ? e.width : e.height,
                i = e._horizontal ? e.left : e.top,
                a = (n ? (t - i) / n : 0) * (e._offsets.left + 1 + e._offsets.left) - e._offsets.right,
                o = l(e._table, "pos", a, "time");
            return v(o);
          },
          getLabelWidth: function getLabelWidth(t) {
            var e = this,
                n = e.options.ticks,
                i = e.ctx.measureText(t).width,
                a = b.toRadians(n.maxRotation),
                o = Math.cos(a),
                r = Math.sin(a);
            return i * o + b.valueOrDefault(n.fontSize, m.global.defaultFontSize) * r;
          },
          getLabelCapacity: function getLabelCapacity(t) {
            var e = this;
            e._minorFormat = e.options.time.displayFormats.millisecond;
            var n = e.tickFormatFunction(v(t), 0, []),
                i = e.getLabelWidth(n),
                a = e.isHorizontal() ? e.width : e.height;
            return Math.floor(a / i);
          }
        });
        t.scaleService.registerScaleType("time", n, e);
      };
    }, {
      1: 1,
      25: 25,
      45: 45
    }]
  }, {}, [7])(7);
});

/***/ }),

/***/ "./assets/vendor/bootstrap-typeahead.js":
/*!**********************************************!*\
  !*** ./assets/vendor/bootstrap-typeahead.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

__webpack_require__(/*! core-js/modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * bootstrap-typeahead.js v0.0.5 (http://www.upbootstrap.com)
 * Copyright 2012-2015 Twitter Inc.
 * Licensed under MIT (https://github.com/biggora/bootstrap-ajax-typeahead/blob/master/LICENSE)
 * See Demo: http://plugins.upbootstrap.com/bootstrap-ajax-typeahead
 * Updated: 2015-04-05 11:43:56
 *
 * Modifications by Paul Warelis and Alexey Gordeyev
 */
!function ($) {
  "use strict"; // jshint ;_;

  /* TYPEAHEAD PUBLIC CLASS DEFINITION
   * ================================= */

  var Typeahead = function Typeahead(element, options) {
    //deal with scrollBar
    var defaultOptions = $.fn.typeahead.defaults;

    if (options.scrollBar) {
      options.items = 100;
      options.menu = '<ul class="typeahead dropdown-menu" style="max-height:220px;overflow:auto;"></ul>';
    }

    var that = this;
    that.$element = $(element);
    that.options = $.extend({}, $.fn.typeahead.defaults, options);
    that.$menu = $(that.options.menu).insertAfter(that.$element); // Method overrides

    that.eventSupported = that.options.eventSupported || that.eventSupported;
    that.grepper = that.options.grepper || that.grepper;
    that.highlighter = that.options.highlighter || that.highlighter;
    that.lookup = that.options.lookup || that.lookup;
    that.matcher = that.options.matcher || that.matcher;
    that.render = that.options.render || that.render;
    that.onSelect = that.options.onSelect || null;
    that.sorter = that.options.sorter || that.sorter;
    that.source = that.options.source || that.source;
    that.displayField = that.options.displayField || that.displayField;
    that.valueField = that.options.valueField || that.valueField;

    if (that.options.ajax) {
      var ajax = that.options.ajax;

      if (typeof ajax === 'string') {
        that.ajax = $.extend({}, $.fn.typeahead.defaults.ajax, {
          url: ajax
        });
      } else {
        if (typeof ajax.displayField === 'string') {
          that.displayField = that.options.displayField = ajax.displayField;
        }

        if (typeof ajax.valueField === 'string') {
          that.valueField = that.options.valueField = ajax.valueField;
        }

        that.ajax = $.extend({}, $.fn.typeahead.defaults.ajax, ajax);
      }

      if (!that.ajax.url) {
        that.ajax = null;
      }

      that.query = "";
    } else {
      that.source = that.options.source;
      that.ajax = null;
    }

    that.shown = false;
    that.listen();
  };

  Typeahead.prototype = {
    constructor: Typeahead,
    //=============================================================================================================
    //  Utils
    //  Check if an event is supported by the browser eg. 'keypress'
    //  * This was included to handle the "exhaustive deprecation" of jQuery.browser in jQuery 1.8
    //=============================================================================================================
    eventSupported: function eventSupported(eventName) {
      var isSupported = eventName in this.$element;

      if (!isSupported) {
        this.$element.setAttribute(eventName, 'return;');
        isSupported = typeof this.$element[eventName] === 'function';
      }

      return isSupported;
    },
    select: function select() {
      var $selectedItem = this.$menu.find('.active');
      var value = $selectedItem.attr('data-value');
      var text = this.$menu.find('.active a').text();

      if (this.options.onSelect) {
        this.options.onSelect({
          value: value,
          text: text
        });
      }

      this.$element.val(this.updater(text)).change();
      return this.hide();
    },
    updater: function updater(item) {
      return item;
    },
    show: function show() {
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      });
      this.$menu.css({
        top: pos.top + pos.height,
        left: pos.left
      });

      if (this.options.alignWidth) {
        var width = $(this.$element[0]).outerWidth();
        this.$menu.css({
          width: width
        });
      }

      this.$menu.show();
      this.shown = true;
      return this;
    },
    hide: function hide() {
      this.$menu.hide();
      this.shown = false;
      return this;
    },
    ajaxLookup: function ajaxLookup() {
      var query = $.trim(this.$element.val());

      if (query === this.query) {
        return this;
      } // Query changed


      this.query = query; // Cancel last timer if set

      if (this.ajax.timerId) {
        clearTimeout(this.ajax.timerId);
        this.ajax.timerId = null;
      }

      if (!query || query.length < this.ajax.triggerLength) {
        // cancel the ajax callback if in progress
        if (this.ajax.xhr) {
          this.ajax.xhr.abort();
          this.ajax.xhr = null;
          this.ajaxToggleLoadClass(false);
        }

        return this.shown ? this.hide() : this;
      }

      function execute() {
        this.ajaxToggleLoadClass(true); // Cancel last call if already in progress

        if (this.ajax.xhr) this.ajax.xhr.abort();
        var params = this.ajax.preDispatch ? this.ajax.preDispatch(query) : {
          query: query
        };
        this.ajax.xhr = $.ajax({
          url: this.ajax.url,
          data: params,
          success: $.proxy(this.ajaxSource, this),
          type: this.ajax.method || 'get',
          dataType: 'jsonp'
        });
        this.ajax.timerId = null;
      } // Query is good to send, set a timer


      this.ajax.timerId = setTimeout($.proxy(execute, this), this.ajax.timeout);
      return this;
    },
    ajaxSource: function ajaxSource(data) {
      this.ajaxToggleLoadClass(false);
      var that = this,
          items;
      if (!that.ajax.xhr) return;

      if (that.ajax.preProcess) {
        data = that.ajax.preProcess(data);
      } // Save for selection retreival


      that.ajax.data = data; // Manipulate objects

      items = that.grepper(that.ajax.data) || [];

      if (!items.length) {
        return that.shown ? that.hide() : that;
      }

      that.ajax.xhr = null;
      return that.render(items.slice(0, that.options.items)).show();
    },
    ajaxToggleLoadClass: function ajaxToggleLoadClass(enable) {
      if (!this.ajax.loadingClass) return;
      this.$element.toggleClass(this.ajax.loadingClass, enable);
    },
    lookup: function lookup(event) {
      var that = this,
          items;

      if (that.ajax) {
        that.ajaxer();
      } else {
        that.query = that.$element.val();

        if (!that.query) {
          return that.shown ? that.hide() : that;
        }

        items = that.grepper(that.source);

        if (!items) {
          return that.shown ? that.hide() : that;
        } //Bhanu added a custom message- Result not Found when no result is found


        if (items.length == 0) {
          items[0] = {
            'id': -21,
            'name': "Result not Found"
          };
        }

        return that.render(items.slice(0, that.options.items)).show();
      }
    },
    matcher: function matcher(item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase());
    },
    sorter: function sorter(items) {
      if (!this.options.ajax) {
        var beginswith = [],
            caseSensitive = [],
            caseInsensitive = [],
            item;

        while (item = items.shift()) {
          if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item);else if (~item.indexOf(this.query)) caseSensitive.push(item);else caseInsensitive.push(item);
        }

        return beginswith.concat(caseSensitive, caseInsensitive);
      } else {
        return items;
      }
    },
    highlighter: function highlighter(item) {
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
        return '<strong>' + match + '</strong>';
      });
    },
    render: function render(items) {
      var that = this,
          display,
          isString = typeof that.options.displayField === 'string';
      items = $(items).map(function (i, item) {
        if (_typeof(item) === 'object') {
          display = isString ? item[that.options.displayField] : that.options.displayField(item);
          i = $(that.options.item).attr('data-value', item[that.options.valueField]);
        } else {
          display = item;
          i = $(that.options.item).attr('data-value', item);
        }

        i.find('a').html(that.highlighter(display));
        return i[0];
      });
      items.first().addClass('active');
      this.$menu.html(items);
      return this;
    },
    //------------------------------------------------------------------
    //  Filters relevent results
    //
    grepper: function grepper(data) {
      var that = this,
          items,
          display,
          isString = typeof that.options.displayField === 'string';

      if (isString && data && data.length) {
        if (data[0].hasOwnProperty(that.options.displayField)) {
          items = $.grep(data, function (item) {
            display = isString ? item[that.options.displayField] : that.options.displayField(item);
            return that.matcher(display);
          });
        } else if (typeof data[0] === 'string') {
          items = $.grep(data, function (item) {
            return that.matcher(item);
          });
        } else {
          return null;
        }
      } else {
        return null;
      }

      return this.sorter(items);
    },
    next: function next(event) {
      var active = this.$menu.find('.active').removeClass('active'),
          next = active.next();

      if (!next.length) {
        next = $(this.$menu.find('li')[0]);
      }

      if (this.options.scrollBar) {
        var index = this.$menu.children("li").index(next);

        if (index % 8 == 0) {
          this.$menu.scrollTop(index * 26);
        }
      }

      next.addClass('active');
    },
    prev: function prev(event) {
      var active = this.$menu.find('.active').removeClass('active'),
          prev = active.prev();

      if (!prev.length) {
        prev = this.$menu.find('li').last();
      }

      if (this.options.scrollBar) {
        var $li = this.$menu.children("li");
        var total = $li.length - 1;
        var index = $li.index(prev);

        if ((total - index) % 8 == 0) {
          this.$menu.scrollTop((index - 7) * 26);
        }
      }

      prev.addClass('active');
    },
    listen: function listen() {
      this.$element.on('focus', $.proxy(this.focus, this)).on('blur', $.proxy(this.blur, this)).on('keypress', $.proxy(this.keypress, this)).on('keyup', $.proxy(this.keyup, this));

      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this));
      }

      this.$menu.on('click', $.proxy(this.click, this)).on('mouseenter', 'li', $.proxy(this.mouseenter, this)).on('mouseleave', 'li', $.proxy(this.mouseleave, this));
    },
    move: function move(e) {
      if (!this.shown) return;

      switch (e.keyCode) {
        case 9: // tab

        case 13: // enter

        case 27:
          // escape
          e.preventDefault();
          break;

        case 38:
          // up arrow
          e.preventDefault();
          this.prev();
          break;

        case 40:
          // down arrow
          e.preventDefault();
          this.next();
          break;
      }

      e.stopPropagation();
    },
    keydown: function keydown(e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      this.move(e);
    },
    keypress: function keypress(e) {
      if (this.suppressKeyPressRepeat) return;
      this.move(e);
    },
    keyup: function keyup(e) {
      switch (e.keyCode) {
        case 40: // down arrow

        case 38: // up arrow

        case 16: // shift

        case 17: // ctrl

        case 18:
          // alt
          break;

        case 9: // tab

        case 13:
          // enter
          if (!this.shown) return;
          this.select();
          break;

        case 27:
          // escape
          if (!this.shown) return;
          this.hide();
          break;

        default:
          if (this.ajax) this.ajaxLookup();else this.lookup();
      }

      e.stopPropagation();
      e.preventDefault();
    },
    focus: function focus(e) {
      this.focused = true;
    },
    blur: function blur(e) {
      this.focused = false;
      if (!this.mousedover && this.shown) this.hide();
    },
    click: function click(e) {
      e.stopPropagation();
      e.preventDefault();
      this.select();
      this.$element.focus();
    },
    mouseenter: function mouseenter(e) {
      this.mousedover = true;
      this.$menu.find('.active').removeClass('active');
      $(e.currentTarget).addClass('active');
    },
    mouseleave: function mouseleave(e) {
      this.mousedover = false;
      if (!this.focused && this.shown) this.hide();
    },
    destroy: function destroy() {
      this.$element.off('focus', $.proxy(this.focus, this)).off('blur', $.proxy(this.blur, this)).off('keypress', $.proxy(this.keypress, this)).off('keyup', $.proxy(this.keyup, this));

      if (this.eventSupported('keydown')) {
        this.$element.off('keydown', $.proxy(this.keydown, this));
      }

      this.$menu.off('click', $.proxy(this.click, this)).off('mouseenter', 'li', $.proxy(this.mouseenter, this)).off('mouseleave', 'li', $.proxy(this.mouseleave, this));
      this.$element.removeData('typeahead');
    }
  };
  /* TYPEAHEAD PLUGIN DEFINITION
   * =========================== */

  $.fn.typeahead = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('typeahead'),
          options = _typeof(option) === 'object' && option;
      if (!data) $this.data('typeahead', data = new Typeahead(this, options));
      if (typeof option === 'string') data[option]();
    });
  };

  $.fn.typeahead.defaults = {
    source: [],
    items: 10,
    scrollBar: false,
    alignWidth: true,
    menu: '<ul class="typeahead dropdown-menu"></ul>',
    item: '<li><a href="#"></a></li>',
    valueField: 'id',
    displayField: 'name',
    onSelect: function onSelect() {},
    ajax: {
      url: null,
      timeout: 300,
      method: 'get',
      triggerLength: 1,
      loadingClass: null,
      preDispatch: null,
      preProcess: null
    }
  };
  $.fn.typeahead.Constructor = Typeahead;
  /* TYPEAHEAD DATA-API
   * ================== */

  $(function () {
    $('body').on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
      var $this = $(this);
      if ($this.data('typeahead')) return;
      e.preventDefault();
      $this.typeahead($this.data());
    });
  });
}(window.jQuery);

/***/ }),

/***/ "./assets/vendor/jquery.i18n/jquery.i18n.dist.js":
/*!*******************************************************!*\
  !*** ./assets/vendor/jquery.i18n/jquery.i18n.dist.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.parse-float */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery Internationalization library
 *
 * Copyright (C) 2012 Santhosh Thottingal
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do
 * anything special to choose one license or the other and you don't have to
 * notify anyone which license you are using. You are free to use
 * UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */
(function ($) {
  'use strict';

  var nav,
      _I18N,
      slice = Array.prototype.slice;
  /**
   * @constructor
   * @param {Object} options
   */


  _I18N = function I18N(options) {
    // Load defaults
    this.options = $.extend({}, _I18N.defaults, options);
    this.parser = this.options.parser;
    this.locale = this.options.locale;
    this.messageStore = this.options.messageStore;
    this.languages = {};
    this.init();
  };

  _I18N.prototype = {
    /**
     * Initialize by loading locales and setting up
     * String.prototype.toLocaleString and String.locale.
     */
    init: function init() {
      var i18n = this; // Set locale of String environment

      String.locale = i18n.locale; // Override String.localeString method

      String.prototype.toLocaleString = function () {
        var localeParts, localePartIndex, value, locale, fallbackIndex, tryingLocale, message;
        value = this.valueOf();
        locale = i18n.locale;
        fallbackIndex = 0;

        while (locale) {
          // Iterate through locales starting at most-specific until
          // localization is found. As in fi-Latn-FI, fi-Latn and fi.
          localeParts = locale.split('-');
          localePartIndex = localeParts.length;

          do {
            tryingLocale = localeParts.slice(0, localePartIndex).join('-');
            message = i18n.messageStore.get(tryingLocale, value);

            if (message) {
              return message;
            }

            localePartIndex--;
          } while (localePartIndex);

          if (locale === 'en') {
            break;
          }

          locale = $.i18n.fallbacks[i18n.locale] && $.i18n.fallbacks[i18n.locale][fallbackIndex] || i18n.options.fallbackLocale;
          $.i18n.log('Trying fallback locale for ' + i18n.locale + ': ' + locale);
          fallbackIndex++;
        } // key not found


        return '';
      };
    },

    /*
     * Destroy the i18n instance.
     */
    destroy: function destroy() {
      $.removeData(document, 'i18n');
    },

    /**
     * General message loading API This can take a URL string for
     * the json formatted messages. Example:
     * <code>load('path/to/all_localizations.json');</code>
     *
     * To load a localization file for a locale:
     * <code>
     * load('path/to/de-messages.json', 'de' );
     * </code>
     *
     * To load a localization file from a directory:
     * <code>
     * load('path/to/i18n/directory', 'de' );
     * </code>
     * The above method has the advantage of fallback resolution.
     * ie, it will automatically load the fallback locales for de.
     * For most usecases, this is the recommended method.
     * It is optional to have trailing slash at end.
     *
     * A data object containing message key- message translation mappings
     * can also be passed. Example:
     * <code>
     * load( { 'hello' : 'Hello' }, optionalLocale );
     * </code>
     *
     * A source map containing key-value pair of languagename and locations
     * can also be passed. Example:
     * <code>
     * load( {
     * bn: 'i18n/bn.json',
     * he: 'i18n/he.json',
     * en: 'i18n/en.json'
     * } )
     * </code>
     *
     * If the data argument is null/undefined/false,
     * all cached messages for the i18n instance will get reset.
     *
     * @param {string|Object} source
     * @param {string} locale Language tag
     * @return {jQuery.Promise}
     */
    load: function load(source, locale) {
      var fallbackLocales,
          locIndex,
          fallbackLocale,
          sourceMap = {};

      if (!source && !locale) {
        source = 'i18n/' + $.i18n().locale + '.json';
        locale = $.i18n().locale;
      }

      if (typeof source === 'string' && source.split('.').pop() !== 'json') {
        // Load specified locale then check for fallbacks when directory is specified in load()
        sourceMap[locale] = source + '/' + locale + '.json';
        fallbackLocales = ($.i18n.fallbacks[locale] || []).concat(this.options.fallbackLocale);

        for (locIndex in fallbackLocales) {
          fallbackLocale = fallbackLocales[locIndex];
          sourceMap[fallbackLocale] = source + '/' + fallbackLocale + '.json';
        }

        return this.load(sourceMap);
      } else {
        return this.messageStore.load(source, locale);
      }
    },

    /**
     * Does parameter and magic word substitution.
     *
     * @param {string} key Message key
     * @param {Array} parameters Message parameters
     * @return {string}
     */
    parse: function parse(key, parameters) {
      var message = key.toLocaleString(); // FIXME: This changes the state of the I18N object,
      // should probably not change the 'this.parser' but just
      // pass it to the parser.

      this.parser.language = $.i18n.languages[$.i18n().locale] || $.i18n.languages['default'];

      if (message === '') {
        message = key;
      }

      return this.parser.parse(message, parameters);
    }
  };
  /**
   * Process a message from the $.I18N instance
   * for the current document, stored in jQuery.data(document).
   *
   * @param {string} key Key of the message.
   * @param {string} param1 [param...] Variadic list of parameters for {key}.
   * @return {string|$.I18N} Parsed message, or if no key was given
   * the instance of $.I18N is returned.
   */

  $.i18n = function (key, param1) {
    var parameters,
        i18n = $.data(document, 'i18n'),
        options = _typeof(key) === 'object' && key; // If the locale option for this call is different then the setup so far,
    // update it automatically. This doesn't just change the context for this
    // call but for all future call as well.
    // If there is no i18n setup yet, don't do this. It will be taken care of
    // by the `new I18N` construction below.
    // NOTE: It should only change language for this one call.
    // Then cache instances of I18N somewhere.

    if (options && options.locale && i18n && i18n.locale !== options.locale) {
      String.locale = i18n.locale = options.locale;
    }

    if (!i18n) {
      i18n = new _I18N(options);
      $.data(document, 'i18n', i18n);
    }

    if (typeof key === 'string') {
      if (param1 !== undefined) {
        parameters = slice.call(arguments, 1);
      } else {
        parameters = [];
      }

      return i18n.parse(key, parameters);
    } else {
      // FIXME: remove this feature/bug.
      return i18n;
    }
  };

  $.fn.i18n = function () {
    var i18n = $.data(document, 'i18n');

    if (!i18n) {
      i18n = new _I18N();
      $.data(document, 'i18n', i18n);
    }

    String.locale = i18n.locale;
    return this.each(function () {
      var $this = $(this),
          messageKey = $this.data('i18n'),
          lBracket,
          rBracket,
          type,
          key;

      if (messageKey) {
        lBracket = messageKey.indexOf('[');
        rBracket = messageKey.indexOf(']');

        if (lBracket !== -1 && rBracket !== -1 && lBracket < rBracket) {
          type = messageKey.slice(lBracket + 1, rBracket);
          key = messageKey.slice(rBracket + 1);

          if (type === 'html') {
            $this.html(i18n.parse(key));
          } else {
            $this.attr(type, i18n.parse(key));
          }
        } else {
          $this.text(i18n.parse(messageKey));
        }
      } else {
        $this.find('[data-i18n]').i18n();
      }
    });
  };

  String.locale = String.locale || $('html').attr('lang');

  if (!String.locale) {
    if (_typeof(window.navigator) !== undefined) {
      nav = window.navigator;
      String.locale = nav.language || nav.userLanguage || '';
    } else {
      String.locale = '';
    }
  }

  $.i18n.languages = {};
  $.i18n.messageStore = $.i18n.messageStore || {};
  $.i18n.parser = {
    // The default parser only handles variable substitution
    parse: function parse(message, parameters) {
      return message.replace(/\$(\d+)/g, function (str, match) {
        var index = parseInt(match, 10) - 1;
        return parameters[index] !== undefined ? parameters[index] : '$' + match;
      });
    },
    emitter: {}
  };
  $.i18n.fallbacks = {};
  $.i18n.debug = false;

  $.i18n.log = function ()
  /* arguments */
  {
    if (window.console && $.i18n.debug) {
      window.console.log.apply(window.console, arguments);
    }
  };
  /* Static members */


  _I18N.defaults = {
    locale: String.locale,
    fallbackLocale: 'en',
    parser: $.i18n.parser,
    messageStore: $.i18n.messageStore
  }; // Expose constructor

  $.i18n.constructor = _I18N;
})(jQuery);
/*!
 * jQuery Internationalization library - Message Store
 *
 * Copyright (C) 2012 Santhosh Thottingal
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do anything special to
 * choose one license or the other and you don't have to notify anyone which license you are using.
 * You are free to use UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */


(function ($, window, undefined) {
  'use strict';

  var MessageStore = function MessageStore() {
    this.messages = {};
    this.sources = {};
  };
  /**
   * See https://github.com/wikimedia/jquery.i18n/wiki/Specification#wiki-Message_File_Loading
   */


  MessageStore.prototype = {
    /**
     * General message loading API This can take a URL string for
     * the json formatted messages.
     * <code>load('path/to/all_localizations.json');</code>
     *
     * This can also load a localization file for a locale <code>
     * load( 'path/to/de-messages.json', 'de' );
     * </code>
     * A data object containing message key- message translation mappings
     * can also be passed Eg:
     * <code>
     * load( { 'hello' : 'Hello' }, optionalLocale );
     * </code> If the data argument is
     * null/undefined/false,
     * all cached messages for the i18n instance will get reset.
     *
     * @param {string|Object} source
     * @param {string} locale Language tag
     * @return {jQuery.Promise}
     */
    load: function load(source, locale) {
      var key = null,
          deferred = null,
          deferreds = [],
          messageStore = this;

      if (typeof source === 'string') {
        // This is a URL to the messages file.
        $.i18n.log('Loading messages from: ' + source);
        deferred = jsonMessageLoader(source).done(function (localization) {
          messageStore.set(locale, localization);
        });
        return deferred.promise();
      }

      if (locale) {
        // source is an key-value pair of messages for given locale
        messageStore.set(locale, source);
        return $.Deferred().resolve();
      } else {
        // source is a key-value pair of locales and their source
        for (key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            locale = key; // No {locale} given, assume data is a group of languages,
            // call this function again for each language.

            deferreds.push(messageStore.load(source[key], locale));
          }
        }

        return $.when.apply($, deferreds);
      }
    },

    /**
     * Set messages to the given locale.
     * If locale exists, add messages to the locale.
     *
     * @param {string} locale
     * @param {Object} messages
     */
    set: function set(locale, messages) {
      if (!this.messages[locale]) {
        this.messages[locale] = messages;
      } else {
        this.messages[locale] = $.extend(this.messages[locale], messages);
      }
    },

    /**
     *
     * @param {string} locale
     * @param {string} messageKey
     * @return {boolean}
     */
    get: function get(locale, messageKey) {
      return this.messages[locale] && this.messages[locale][messageKey];
    }
  };

  function jsonMessageLoader(url) {
    var deferred = $.Deferred();
    $.getJSON(url).done(deferred.resolve).fail(function (jqxhr, settings, exception) {
      $.i18n.log('Error in loading messages from ' + url + ' Exception: ' + exception); // Ignore 404 exception, because we are handling fallabacks explicitly

      deferred.resolve();
    });
    return deferred.promise();
  }

  $.extend($.i18n.messageStore, new MessageStore());
})(jQuery, window);
/*!
 * jQuery Internationalization library
 *
 * Copyright (C) 2012 Santhosh Thottingal
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do anything special to
 * choose one license or the other and you don't have to notify anyone which license you are using.
 * You are free to use UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */


(function ($, undefined) {
  'use strict';

  $.i18n = $.i18n || {};
  $.extend($.i18n.fallbacks, {
    ab: ['ru'],
    ace: ['id'],
    aln: ['sq'],
    // Not so standard - als is supposed to be Tosk Albanian,
    // but in Wikipedia it's used for a Germanic language.
    als: ['gsw', 'de'],
    an: ['es'],
    anp: ['hi'],
    arn: ['es'],
    arz: ['ar'],
    av: ['ru'],
    ay: ['es'],
    ba: ['ru'],
    bar: ['de'],
    'bat-smg': ['sgs', 'lt'],
    bcc: ['fa'],
    'be-x-old': ['be-tarask'],
    bh: ['bho'],
    bjn: ['id'],
    bm: ['fr'],
    bpy: ['bn'],
    bqi: ['fa'],
    bug: ['id'],
    'cbk-zam': ['es'],
    ce: ['ru'],
    crh: ['crh-latn'],
    'crh-cyrl': ['ru'],
    csb: ['pl'],
    cv: ['ru'],
    'de-at': ['de'],
    'de-ch': ['de'],
    'de-formal': ['de'],
    dsb: ['de'],
    dtp: ['ms'],
    egl: ['it'],
    eml: ['it'],
    ff: ['fr'],
    fit: ['fi'],
    'fiu-vro': ['vro', 'et'],
    frc: ['fr'],
    frp: ['fr'],
    frr: ['de'],
    fur: ['it'],
    gag: ['tr'],
    gan: ['gan-hant', 'zh-hant', 'zh-hans'],
    'gan-hans': ['zh-hans'],
    'gan-hant': ['zh-hant', 'zh-hans'],
    gl: ['pt'],
    glk: ['fa'],
    gn: ['es'],
    gsw: ['de'],
    hif: ['hif-latn'],
    hsb: ['de'],
    ht: ['fr'],
    ii: ['zh-cn', 'zh-hans'],
    inh: ['ru'],
    iu: ['ike-cans'],
    jut: ['da'],
    jv: ['id'],
    kaa: ['kk-latn', 'kk-cyrl'],
    kbd: ['kbd-cyrl'],
    khw: ['ur'],
    kiu: ['tr'],
    kk: ['kk-cyrl'],
    'kk-arab': ['kk-cyrl'],
    'kk-latn': ['kk-cyrl'],
    'kk-cn': ['kk-arab', 'kk-cyrl'],
    'kk-kz': ['kk-cyrl'],
    'kk-tr': ['kk-latn', 'kk-cyrl'],
    kl: ['da'],
    'ko-kp': ['ko'],
    koi: ['ru'],
    krc: ['ru'],
    ks: ['ks-arab'],
    ksh: ['de'],
    ku: ['ku-latn'],
    'ku-arab': ['ckb'],
    kv: ['ru'],
    lad: ['es'],
    lb: ['de'],
    lbe: ['ru'],
    lez: ['ru'],
    li: ['nl'],
    lij: ['it'],
    liv: ['et'],
    lmo: ['it'],
    ln: ['fr'],
    ltg: ['lv'],
    lzz: ['tr'],
    mai: ['hi'],
    'map-bms': ['jv', 'id'],
    mg: ['fr'],
    mhr: ['ru'],
    min: ['id'],
    mo: ['ro'],
    mrj: ['ru'],
    mwl: ['pt'],
    myv: ['ru'],
    mzn: ['fa'],
    nah: ['es'],
    nap: ['it'],
    nds: ['de'],
    'nds-nl': ['nl'],
    'nl-informal': ['nl'],
    no: ['nb'],
    os: ['ru'],
    pcd: ['fr'],
    pdc: ['de'],
    pdt: ['de'],
    pfl: ['de'],
    pms: ['it'],
    pt: ['pt-br'],
    'pt-br': ['pt'],
    qu: ['es'],
    qug: ['qu', 'es'],
    rgn: ['it'],
    rmy: ['ro'],
    'roa-rup': ['rup'],
    rue: ['uk', 'ru'],
    ruq: ['ruq-latn', 'ro'],
    'ruq-cyrl': ['mk'],
    'ruq-latn': ['ro'],
    sa: ['hi'],
    sah: ['ru'],
    scn: ['it'],
    sg: ['fr'],
    sgs: ['lt'],
    sli: ['de'],
    sr: ['sr-ec'],
    srn: ['nl'],
    stq: ['de'],
    su: ['id'],
    szl: ['pl'],
    tcy: ['kn'],
    tg: ['tg-cyrl'],
    tt: ['tt-cyrl', 'ru'],
    'tt-cyrl': ['ru'],
    ty: ['fr'],
    udm: ['ru'],
    ug: ['ug-arab'],
    uk: ['ru'],
    vec: ['it'],
    vep: ['et'],
    vls: ['nl'],
    vmf: ['de'],
    vot: ['fi'],
    vro: ['et'],
    wa: ['fr'],
    wo: ['fr'],
    wuu: ['zh-hans'],
    xal: ['ru'],
    xmf: ['ka'],
    yi: ['he'],
    za: ['zh-hans'],
    zea: ['nl'],
    zh: ['zh-hans'],
    'zh-classical': ['lzh'],
    'zh-cn': ['zh-hans'],
    'zh-hant': ['zh-hans'],
    'zh-hk': ['zh-hant', 'zh-hans'],
    'zh-min-nan': ['nan'],
    'zh-mo': ['zh-hk', 'zh-hant', 'zh-hans'],
    'zh-my': ['zh-sg', 'zh-hans'],
    'zh-sg': ['zh-hans'],
    'zh-tw': ['zh-hant', 'zh-hans'],
    'zh-yue': ['yue']
  });
})(jQuery);
/*!
 * jQuery Internationalization library
 *
 * Copyright (C) 2011-2013 Santhosh Thottingal, Neil Kandalgaonkar
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do
 * anything special to choose one license or the other and you don't have to
 * notify anyone which license you are using. You are free to use
 * UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */


(function ($) {
  'use strict';

  var MessageParser = function MessageParser(options) {
    this.options = $.extend({}, $.i18n.parser.defaults, options);
    this.language = $.i18n.languages[String.locale] || $.i18n.languages['default'];
    this.emitter = $.i18n.parser.emitter;
  };

  MessageParser.prototype = {
    constructor: MessageParser,
    simpleParse: function simpleParse(message, parameters) {
      return message.replace(/\$(\d+)/g, function (str, match) {
        var index = parseInt(match, 10) - 1;
        return parameters[index] !== undefined ? parameters[index] : '$' + match;
      });
    },
    parse: function parse(message, replacements) {
      if (message.indexOf('{{') < 0) {
        return this.simpleParse(message, replacements);
      }

      this.emitter.language = $.i18n.languages[$.i18n().locale] || $.i18n.languages['default'];
      return this.emitter.emit(this.ast(message), replacements);
    },
    ast: function ast(message) {
      var pipe,
          colon,
          backslash,
          anyCharacter,
          dollar,
          digits,
          regularLiteral,
          regularLiteralWithoutBar,
          regularLiteralWithoutSpace,
          escapedOrLiteralWithoutBar,
          escapedOrRegularLiteral,
          templateContents,
          templateName,
          openTemplate,
          closeTemplate,
          expression,
          paramExpression,
          result,
          pos = 0; // Try parsers until one works, if none work return null

      function choice(parserSyntax) {
        return function () {
          var i, result;

          for (i = 0; i < parserSyntax.length; i++) {
            result = parserSyntax[i]();

            if (result !== null) {
              return result;
            }
          }

          return null;
        };
      } // Try several parserSyntax-es in a row.
      // All must succeed; otherwise, return null.
      // This is the only eager one.


      function sequence(parserSyntax) {
        var i,
            res,
            originalPos = pos,
            result = [];

        for (i = 0; i < parserSyntax.length; i++) {
          res = parserSyntax[i]();

          if (res === null) {
            pos = originalPos;
            return null;
          }

          result.push(res);
        }

        return result;
      } // Run the same parser over and over until it fails.
      // Must succeed a minimum of n times; otherwise, return null.


      function nOrMore(n, p) {
        return function () {
          var originalPos = pos,
              result = [],
              parsed = p();

          while (parsed !== null) {
            result.push(parsed);
            parsed = p();
          }

          if (result.length < n) {
            pos = originalPos;
            return null;
          }

          return result;
        };
      } // Helpers -- just make parserSyntax out of simpler JS builtin types


      function makeStringParser(s) {
        var len = s.length;
        return function () {
          var result = null;

          if (message.slice(pos, pos + len) === s) {
            result = s;
            pos += len;
          }

          return result;
        };
      }

      function makeRegexParser(regex) {
        return function () {
          var matches = message.slice(pos).match(regex);

          if (matches === null) {
            return null;
          }

          pos += matches[0].length;
          return matches[0];
        };
      }

      pipe = makeStringParser('|');
      colon = makeStringParser(':');
      backslash = makeStringParser('\\');
      anyCharacter = makeRegexParser(/^./);
      dollar = makeStringParser('$');
      digits = makeRegexParser(/^\d+/);
      regularLiteral = makeRegexParser(/^[^{}\[\]$\\]/);
      regularLiteralWithoutBar = makeRegexParser(/^[^{}\[\]$\\|]/);
      regularLiteralWithoutSpace = makeRegexParser(/^[^{}\[\]$\s]/); // There is a general pattern:
      // parse a thing;
      // if it worked, apply transform,
      // otherwise return null.
      // But using this as a combinator seems to cause problems
      // when combined with nOrMore().
      // May be some scoping issue.

      function transform(p, fn) {
        return function () {
          var result = p();
          return result === null ? null : fn(result);
        };
      } // Used to define "literals" within template parameters. The pipe
      // character is the parameter delimeter, so by default
      // it is not a literal in the parameter


      function literalWithoutBar() {
        var result = nOrMore(1, escapedOrLiteralWithoutBar)();
        return result === null ? null : result.join('');
      }

      function literal() {
        var result = nOrMore(1, escapedOrRegularLiteral)();
        return result === null ? null : result.join('');
      }

      function escapedLiteral() {
        var result = sequence([backslash, anyCharacter]);
        return result === null ? null : result[1];
      }

      choice([escapedLiteral, regularLiteralWithoutSpace]);
      escapedOrLiteralWithoutBar = choice([escapedLiteral, regularLiteralWithoutBar]);
      escapedOrRegularLiteral = choice([escapedLiteral, regularLiteral]);

      function replacement() {
        var result = sequence([dollar, digits]);

        if (result === null) {
          return null;
        }

        return ['REPLACE', parseInt(result[1], 10) - 1];
      }

      templateName = transform( // see $wgLegalTitleChars
      // not allowing : due to the need to catch "PLURAL:$1"
      makeRegexParser(/^[ !"$&'()*,.\/0-9;=?@A-Z\^_`a-z~\x80-\xFF+\-]+/), function (result) {
        return result.toString();
      });

      function templateParam() {
        var expr,
            result = sequence([pipe, nOrMore(0, paramExpression)]);

        if (result === null) {
          return null;
        }

        expr = result[1]; // use a "CONCAT" operator if there are multiple nodes,
        // otherwise return the first node, raw.

        return expr.length > 1 ? ['CONCAT'].concat(expr) : expr[0];
      }

      function templateWithReplacement() {
        var result = sequence([templateName, colon, replacement]);
        return result === null ? null : [result[0], result[2]];
      }

      function templateWithOutReplacement() {
        var result = sequence([templateName, colon, paramExpression]);
        return result === null ? null : [result[0], result[2]];
      }

      templateContents = choice([function () {
        var res = sequence([// templates can have placeholders for dynamic
        // replacement eg: {{PLURAL:$1|one car|$1 cars}}
        // or no placeholders eg:
        // {{GRAMMAR:genitive|{{SITENAME}}}
        choice([templateWithReplacement, templateWithOutReplacement]), nOrMore(0, templateParam)]);
        return res === null ? null : res[0].concat(res[1]);
      }, function () {
        var res = sequence([templateName, nOrMore(0, templateParam)]);

        if (res === null) {
          return null;
        }

        return [res[0]].concat(res[1]);
      }]);
      openTemplate = makeStringParser('{{');
      closeTemplate = makeStringParser('}}');

      function template() {
        var result = sequence([openTemplate, templateContents, closeTemplate]);
        return result === null ? null : result[1];
      }

      expression = choice([template, replacement, literal]);
      paramExpression = choice([template, replacement, literalWithoutBar]);

      function start() {
        var result = nOrMore(0, expression)();

        if (result === null) {
          return null;
        }

        return ['CONCAT'].concat(result);
      }

      result = start();
      /*
       * For success, the pos must have gotten to the end of the input
       * and returned a non-null.
       * n.b. This is part of language infrastructure, so we do not throw an internationalizable message.
       */

      if (result === null || pos !== message.length) {
        throw new Error('Parse error at position ' + pos.toString() + ' in input: ' + message);
      }

      return result;
    }
  };
  $.extend($.i18n.parser, new MessageParser());
})(jQuery);
/*!
 * jQuery Internationalization library
 *
 * Copyright (C) 2011-2013 Santhosh Thottingal, Neil Kandalgaonkar
 *
 * jquery.i18n is dual licensed GPLv2 or later and MIT. You don't have to do
 * anything special to choose one license or the other and you don't have to
 * notify anyone which license you are using. You are free to use
 * UniversalLanguageSelector in commercial projects as long as the copyright
 * header is left intact. See files GPL-LICENSE and MIT-LICENSE for details.
 *
 * @licence GNU General Public Licence 2.0 or later
 * @licence MIT License
 */


(function ($) {
  'use strict';

  var MessageParserEmitter = function MessageParserEmitter() {
    this.language = $.i18n.languages[String.locale] || $.i18n.languages['default'];
  };

  MessageParserEmitter.prototype = {
    constructor: MessageParserEmitter,

    /**
     * (We put this method definition here, and not in prototype, to make
     * sure it's not overwritten by any magic.) Walk entire node structure,
     * applying replacements and template functions when appropriate
     *
     * @param {Mixed} node abstract syntax tree (top node or subnode)
     * @param {Array} replacements for $1, $2, ... $n
     * @return {Mixed} single-string node or array of nodes suitable for
     *  jQuery appending.
     */
    emit: function emit(node, replacements) {
      var ret,
          subnodes,
          operation,
          messageParserEmitter = this;

      switch (_typeof(node)) {
        case 'string':
        case 'number':
          ret = node;
          break;

        case 'object':
          // node is an array of nodes
          subnodes = $.map(node.slice(1), function (n) {
            return messageParserEmitter.emit(n, replacements);
          });
          operation = node[0].toLowerCase();

          if (typeof messageParserEmitter[operation] === 'function') {
            ret = messageParserEmitter[operation](subnodes, replacements);
          } else {
            throw new Error('unknown operation "' + operation + '"');
          }

          break;

        case 'undefined':
          // Parsing the empty string (as an entire expression, or as a
          // paramExpression in a template) results in undefined
          // Perhaps a more clever parser can detect this, and return the
          // empty string? Or is that useful information?
          // The logical thing is probably to return the empty string here
          // when we encounter undefined.
          ret = '';
          break;

        default:
          throw new Error('unexpected type in AST: ' + _typeof(node));
      }

      return ret;
    },

    /**
     * Parsing has been applied depth-first we can assume that all nodes
     * here are single nodes Must return a single node to parents -- a
     * jQuery with synthetic span However, unwrap any other synthetic spans
     * in our children and pass them upwards
     *
     * @param {Array} nodes Mixed, some single nodes, some arrays of nodes.
     * @return {string}
     */
    concat: function concat(nodes) {
      var result = '';
      $.each(nodes, function (i, node) {
        // strings, integers, anything else
        result += node;
      });
      return result;
    },

    /**
     * Return escaped replacement of correct index, or string if
     * unavailable. Note that we expect the parsed parameter to be
     * zero-based. i.e. $1 should have become [ 0 ]. if the specified
     * parameter is not found return the same string (e.g. "$99" ->
     * parameter 98 -> not found -> return "$99" ) TODO throw error if
     * nodes.length > 1 ?
     *
     * @param {Array} nodes One element, integer, n >= 0
     * @param {Array} replacements for $1, $2, ... $n
     * @return {string} replacement
     */
    replace: function replace(nodes, replacements) {
      var index = parseInt(nodes[0], 10);

      if (index < replacements.length) {
        // replacement is not a string, don't touch!
        return replacements[index];
      } else {
        // index not found, fallback to displaying variable
        return '$' + (index + 1);
      }
    },

    /**
     * Transform parsed structure into pluralization n.b. The first node may
     * be a non-integer (for instance, a string representing an Arabic
     * number). So convert it back with the current language's
     * convertNumber.
     *
     * @param {Array} nodes List [ {String|Number}, {String}, {String} ... ]
     * @return {string} selected pluralized form according to current
     *  language.
     */
    plural: function plural(nodes) {
      var count = parseFloat(this.language.convertNumber(nodes[0], 10)),
          forms = nodes.slice(1);
      return forms.length ? this.language.convertPlural(count, forms) : '';
    },

    /**
     * Transform parsed structure into gender Usage
     * {{gender:gender|masculine|feminine|neutral}}.
     *
     * @param {Array} nodes List [ {String}, {String}, {String} , {String} ]
     * @return {string} selected gender form according to current language
     */
    gender: function gender(nodes) {
      var gender = nodes[0],
          forms = nodes.slice(1);
      return this.language.gender(gender, forms);
    },

    /**
     * Transform parsed structure into grammar conversion. Invoked by
     * putting {{grammar:form|word}} in a message
     *
     * @param {Array} nodes List [{Grammar case eg: genitive}, {String word}]
     * @return {string} selected grammatical form according to current
     *  language.
     */
    grammar: function grammar(nodes) {
      var form = nodes[0],
          word = nodes[1];
      return word && form && this.language.convertGrammar(word, form);
    }
  };
  $.extend($.i18n.parser.emitter, new MessageParserEmitter());
})(jQuery);
/*global pluralRuleParser */


(function ($) {
  'use strict'; // jscs:disable

  var language = {
    // CLDR plural rules generated using
    // libs/CLDRPluralRuleParser/tools/PluralXML2JSON.html
    'pluralRules': {
      'af': {
        'one': 'n = 1'
      },
      'ak': {
        'one': 'n = 0..1'
      },
      'am': {
        'one': 'i = 0 or n = 1'
      },
      'ar': {
        'zero': 'n = 0',
        'one': 'n = 1',
        'two': 'n = 2',
        'few': 'n % 100 = 3..10',
        'many': 'n % 100 = 11..99'
      },
      'ars': {
        'zero': 'n = 0',
        'one': 'n = 1',
        'two': 'n = 2',
        'few': 'n % 100 = 3..10',
        'many': 'n % 100 = 11..99'
      },
      'as': {
        'one': 'i = 0 or n = 1'
      },
      'asa': {
        'one': 'n = 1'
      },
      'ast': {
        'one': 'i = 1 and v = 0'
      },
      'az': {
        'one': 'n = 1'
      },
      'be': {
        'one': 'n % 10 = 1 and n % 100 != 11',
        'few': 'n % 10 = 2..4 and n % 100 != 12..14',
        'many': 'n % 10 = 0 or n % 10 = 5..9 or n % 100 = 11..14'
      },
      'bem': {
        'one': 'n = 1'
      },
      'bez': {
        'one': 'n = 1'
      },
      'bg': {
        'one': 'n = 1'
      },
      'bh': {
        'one': 'n = 0..1'
      },
      'bm': {},
      'bn': {
        'one': 'i = 0 or n = 1'
      },
      'bo': {},
      'br': {
        'one': 'n % 10 = 1 and n % 100 != 11,71,91',
        'two': 'n % 10 = 2 and n % 100 != 12,72,92',
        'few': 'n % 10 = 3..4,9 and n % 100 != 10..19,70..79,90..99',
        'many': 'n != 0 and n % 1000000 = 0'
      },
      'brx': {
        'one': 'n = 1'
      },
      'bs': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14'
      },
      'ca': {
        'one': 'i = 1 and v = 0'
      },
      'ce': {
        'one': 'n = 1'
      },
      'cgg': {
        'one': 'n = 1'
      },
      'chr': {
        'one': 'n = 1'
      },
      'ckb': {
        'one': 'n = 1'
      },
      'cs': {
        'one': 'i = 1 and v = 0',
        'few': 'i = 2..4 and v = 0',
        'many': 'v != 0'
      },
      'cy': {
        'zero': 'n = 0',
        'one': 'n = 1',
        'two': 'n = 2',
        'few': 'n = 3',
        'many': 'n = 6'
      },
      'da': {
        'one': 'n = 1 or t != 0 and i = 0,1'
      },
      'de': {
        'one': 'i = 1 and v = 0'
      },
      'dsb': {
        'one': 'v = 0 and i % 100 = 1 or f % 100 = 1',
        'two': 'v = 0 and i % 100 = 2 or f % 100 = 2',
        'few': 'v = 0 and i % 100 = 3..4 or f % 100 = 3..4'
      },
      'dv': {
        'one': 'n = 1'
      },
      'dz': {},
      'ee': {
        'one': 'n = 1'
      },
      'el': {
        'one': 'n = 1'
      },
      'en': {
        'one': 'i = 1 and v = 0'
      },
      'eo': {
        'one': 'n = 1'
      },
      'es': {
        'one': 'n = 1'
      },
      'et': {
        'one': 'i = 1 and v = 0'
      },
      'eu': {
        'one': 'n = 1'
      },
      'fa': {
        'one': 'i = 0 or n = 1'
      },
      'ff': {
        'one': 'i = 0,1'
      },
      'fi': {
        'one': 'i = 1 and v = 0'
      },
      'fil': {
        'one': 'v = 0 and i = 1,2,3 or v = 0 and i % 10 != 4,6,9 or v != 0 and f % 10 != 4,6,9'
      },
      'fo': {
        'one': 'n = 1'
      },
      'fr': {
        'one': 'i = 0,1'
      },
      'fur': {
        'one': 'n = 1'
      },
      'fy': {
        'one': 'i = 1 and v = 0'
      },
      'ga': {
        'one': 'n = 1',
        'two': 'n = 2',
        'few': 'n = 3..6',
        'many': 'n = 7..10'
      },
      'gd': {
        'one': 'n = 1,11',
        'two': 'n = 2,12',
        'few': 'n = 3..10,13..19'
      },
      'gl': {
        'one': 'i = 1 and v = 0'
      },
      'gsw': {
        'one': 'n = 1'
      },
      'gu': {
        'one': 'i = 0 or n = 1'
      },
      'guw': {
        'one': 'n = 0..1'
      },
      'gv': {
        'one': 'v = 0 and i % 10 = 1',
        'two': 'v = 0 and i % 10 = 2',
        'few': 'v = 0 and i % 100 = 0,20,40,60,80',
        'many': 'v != 0'
      },
      'ha': {
        'one': 'n = 1'
      },
      'haw': {
        'one': 'n = 1'
      },
      'he': {
        'one': 'i = 1 and v = 0',
        'two': 'i = 2 and v = 0',
        'many': 'v = 0 and n != 0..10 and n % 10 = 0'
      },
      'hi': {
        'one': 'i = 0 or n = 1'
      },
      'hr': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14'
      },
      'hsb': {
        'one': 'v = 0 and i % 100 = 1 or f % 100 = 1',
        'two': 'v = 0 and i % 100 = 2 or f % 100 = 2',
        'few': 'v = 0 and i % 100 = 3..4 or f % 100 = 3..4'
      },
      'hu': {
        'one': 'n = 1'
      },
      'hy': {
        'one': 'i = 0,1'
      },
      'id': {},
      'ig': {},
      'ii': {},
      'in': {},
      'is': {
        'one': 't = 0 and i % 10 = 1 and i % 100 != 11 or t != 0'
      },
      'it': {
        'one': 'i = 1 and v = 0'
      },
      'iu': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'iw': {
        'one': 'i = 1 and v = 0',
        'two': 'i = 2 and v = 0',
        'many': 'v = 0 and n != 0..10 and n % 10 = 0'
      },
      'ja': {},
      'jbo': {},
      'jgo': {
        'one': 'n = 1'
      },
      'ji': {
        'one': 'i = 1 and v = 0'
      },
      'jmc': {
        'one': 'n = 1'
      },
      'jv': {},
      'jw': {},
      'ka': {
        'one': 'n = 1'
      },
      'kab': {
        'one': 'i = 0,1'
      },
      'kaj': {
        'one': 'n = 1'
      },
      'kcg': {
        'one': 'n = 1'
      },
      'kde': {},
      'kea': {},
      'kk': {
        'one': 'n = 1'
      },
      'kkj': {
        'one': 'n = 1'
      },
      'kl': {
        'one': 'n = 1'
      },
      'km': {},
      'kn': {
        'one': 'i = 0 or n = 1'
      },
      'ko': {},
      'ks': {
        'one': 'n = 1'
      },
      'ksb': {
        'one': 'n = 1'
      },
      'ksh': {
        'zero': 'n = 0',
        'one': 'n = 1'
      },
      'ku': {
        'one': 'n = 1'
      },
      'kw': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'ky': {
        'one': 'n = 1'
      },
      'lag': {
        'zero': 'n = 0',
        'one': 'i = 0,1 and n != 0'
      },
      'lb': {
        'one': 'n = 1'
      },
      'lg': {
        'one': 'n = 1'
      },
      'lkt': {},
      'ln': {
        'one': 'n = 0..1'
      },
      'lo': {},
      'lt': {
        'one': 'n % 10 = 1 and n % 100 != 11..19',
        'few': 'n % 10 = 2..9 and n % 100 != 11..19',
        'many': 'f != 0'
      },
      'lv': {
        'zero': 'n % 10 = 0 or n % 100 = 11..19 or v = 2 and f % 100 = 11..19',
        'one': 'n % 10 = 1 and n % 100 != 11 or v = 2 and f % 10 = 1 and f % 100 != 11 or v != 2 and f % 10 = 1'
      },
      'mas': {
        'one': 'n = 1'
      },
      'mg': {
        'one': 'n = 0..1'
      },
      'mgo': {
        'one': 'n = 1'
      },
      'mk': {
        'one': 'v = 0 and i % 10 = 1 or f % 10 = 1'
      },
      'ml': {
        'one': 'n = 1'
      },
      'mn': {
        'one': 'n = 1'
      },
      'mo': {
        'one': 'i = 1 and v = 0',
        'few': 'v != 0 or n = 0 or n != 1 and n % 100 = 1..19'
      },
      'mr': {
        'one': 'i = 0 or n = 1'
      },
      'ms': {},
      'mt': {
        'one': 'n = 1',
        'few': 'n = 0 or n % 100 = 2..10',
        'many': 'n % 100 = 11..19'
      },
      'my': {},
      'nah': {
        'one': 'n = 1'
      },
      'naq': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'nb': {
        'one': 'n = 1'
      },
      'nd': {
        'one': 'n = 1'
      },
      'ne': {
        'one': 'n = 1'
      },
      'nl': {
        'one': 'i = 1 and v = 0'
      },
      'nn': {
        'one': 'n = 1'
      },
      'nnh': {
        'one': 'n = 1'
      },
      'no': {
        'one': 'n = 1'
      },
      'nqo': {},
      'nr': {
        'one': 'n = 1'
      },
      'nso': {
        'one': 'n = 0..1'
      },
      'ny': {
        'one': 'n = 1'
      },
      'nyn': {
        'one': 'n = 1'
      },
      'om': {
        'one': 'n = 1'
      },
      'or': {
        'one': 'n = 1'
      },
      'os': {
        'one': 'n = 1'
      },
      'pa': {
        'one': 'n = 0..1'
      },
      'pap': {
        'one': 'n = 1'
      },
      'pl': {
        'one': 'i = 1 and v = 0',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14',
        'many': 'v = 0 and i != 1 and i % 10 = 0..1 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 12..14'
      },
      'prg': {
        'zero': 'n % 10 = 0 or n % 100 = 11..19 or v = 2 and f % 100 = 11..19',
        'one': 'n % 10 = 1 and n % 100 != 11 or v = 2 and f % 10 = 1 and f % 100 != 11 or v != 2 and f % 10 = 1'
      },
      'ps': {
        'one': 'n = 1'
      },
      'pt': {
        'one': 'n = 0..2 and n != 2'
      },
      'pt-PT': {
        'one': 'n = 1 and v = 0'
      },
      'rm': {
        'one': 'n = 1'
      },
      'ro': {
        'one': 'i = 1 and v = 0',
        'few': 'v != 0 or n = 0 or n != 1 and n % 100 = 1..19'
      },
      'rof': {
        'one': 'n = 1'
      },
      'root': {},
      'ru': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14',
        'many': 'v = 0 and i % 10 = 0 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 11..14'
      },
      'rwk': {
        'one': 'n = 1'
      },
      'sah': {},
      'saq': {
        'one': 'n = 1'
      },
      'sdh': {
        'one': 'n = 1'
      },
      'se': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'seh': {
        'one': 'n = 1'
      },
      'ses': {},
      'sg': {},
      'sh': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14'
      },
      'shi': {
        'one': 'i = 0 or n = 1',
        'few': 'n = 2..10'
      },
      'si': {
        'one': 'n = 0,1 or i = 0 and f = 1'
      },
      'sk': {
        'one': 'i = 1 and v = 0',
        'few': 'i = 2..4 and v = 0',
        'many': 'v != 0'
      },
      'sl': {
        'one': 'v = 0 and i % 100 = 1',
        'two': 'v = 0 and i % 100 = 2',
        'few': 'v = 0 and i % 100 = 3..4 or v != 0'
      },
      'sma': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'smi': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'smj': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'smn': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'sms': {
        'one': 'n = 1',
        'two': 'n = 2'
      },
      'sn': {
        'one': 'n = 1'
      },
      'so': {
        'one': 'n = 1'
      },
      'sq': {
        'one': 'n = 1'
      },
      'sr': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14'
      },
      'ss': {
        'one': 'n = 1'
      },
      'ssy': {
        'one': 'n = 1'
      },
      'st': {
        'one': 'n = 1'
      },
      'sv': {
        'one': 'i = 1 and v = 0'
      },
      'sw': {
        'one': 'i = 1 and v = 0'
      },
      'syr': {
        'one': 'n = 1'
      },
      'ta': {
        'one': 'n = 1'
      },
      'te': {
        'one': 'n = 1'
      },
      'teo': {
        'one': 'n = 1'
      },
      'th': {},
      'ti': {
        'one': 'n = 0..1'
      },
      'tig': {
        'one': 'n = 1'
      },
      'tk': {
        'one': 'n = 1'
      },
      'tl': {
        'one': 'v = 0 and i = 1,2,3 or v = 0 and i % 10 != 4,6,9 or v != 0 and f % 10 != 4,6,9'
      },
      'tn': {
        'one': 'n = 1'
      },
      'to': {},
      'tr': {
        'one': 'n = 1'
      },
      'ts': {
        'one': 'n = 1'
      },
      'tzm': {
        'one': 'n = 0..1 or n = 11..99'
      },
      'ug': {
        'one': 'n = 1'
      },
      'uk': {
        'one': 'v = 0 and i % 10 = 1 and i % 100 != 11',
        'few': 'v = 0 and i % 10 = 2..4 and i % 100 != 12..14',
        'many': 'v = 0 and i % 10 = 0 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 11..14'
      },
      'ur': {
        'one': 'i = 1 and v = 0'
      },
      'uz': {
        'one': 'n = 1'
      },
      've': {
        'one': 'n = 1'
      },
      'vi': {},
      'vo': {
        'one': 'n = 1'
      },
      'vun': {
        'one': 'n = 1'
      },
      'wa': {
        'one': 'n = 0..1'
      },
      'wae': {
        'one': 'n = 1'
      },
      'wo': {},
      'xh': {
        'one': 'n = 1'
      },
      'xog': {
        'one': 'n = 1'
      },
      'yi': {
        'one': 'i = 1 and v = 0'
      },
      'yo': {},
      'yue': {},
      'zh': {},
      'zu': {
        'one': 'i = 0 or n = 1'
      }
    },
    // jscs:enable

    /**
     * Plural form transformations, needed for some languages.
     *
     * @param {integer} count
     *            Non-localized quantifier
     * @param {Array} forms
     *            List of plural forms
     * @return {string} Correct form for quantifier in this language
     */
    convertPlural: function convertPlural(count, forms) {
      var pluralRules,
          pluralFormIndex,
          index,
          explicitPluralPattern = new RegExp('\\d+=', 'i'),
          formCount,
          form;

      if (!forms || forms.length === 0) {
        return '';
      } // Handle for Explicit 0= & 1= values


      for (index = 0; index < forms.length; index++) {
        form = forms[index];

        if (explicitPluralPattern.test(form)) {
          formCount = parseInt(form.slice(0, form.indexOf('=')), 10);

          if (formCount === count) {
            return form.slice(form.indexOf('=') + 1);
          }

          forms[index] = undefined;
        }
      }

      forms = $.map(forms, function (form) {
        if (form !== undefined) {
          return form;
        }
      });
      pluralRules = this.pluralRules[$.i18n().locale];

      if (!pluralRules) {
        // default fallback.
        return count === 1 ? forms[0] : forms[1];
      }

      pluralFormIndex = this.getPluralForm(count, pluralRules);
      pluralFormIndex = Math.min(pluralFormIndex, forms.length - 1);
      return forms[pluralFormIndex];
    },

    /**
     * For the number, get the plural for index
     *
     * @param {integer} number
     * @param {Object} pluralRules
     * @return {integer} plural form index
     */
    getPluralForm: function getPluralForm(number, pluralRules) {
      var i,
          pluralForms = ['zero', 'one', 'two', 'few', 'many', 'other'],
          pluralFormIndex = 0;

      for (i = 0; i < pluralForms.length; i++) {
        if (pluralRules[pluralForms[i]]) {
          if (pluralRuleParser(pluralRules[pluralForms[i]], number)) {
            return pluralFormIndex;
          }

          pluralFormIndex++;
        }
      }

      return pluralFormIndex;
    },

    /**
     * Converts a number using digitTransformTable.
     *
     * @param {number} num Value to be converted
     * @param {boolean} integer Convert the return value to an integer
     */
    convertNumber: function convertNumber(num, integer) {
      var tmp, item, i, transformTable, numberString, convertedNumber; // Set the target Transform table:

      transformTable = this.digitTransformTable($.i18n().locale);
      numberString = String(num);
      convertedNumber = '';

      if (!transformTable) {
        return num;
      } // Check if the restore to Latin number flag is set:


      if (integer) {
        if (parseFloat(num, 10) === num) {
          return num;
        }

        tmp = [];

        for (item in transformTable) {
          tmp[transformTable[item]] = item;
        }

        transformTable = tmp;
      }

      for (i = 0; i < numberString.length; i++) {
        if (transformTable[numberString[i]]) {
          convertedNumber += transformTable[numberString[i]];
        } else {
          convertedNumber += numberString[i];
        }
      }

      return integer ? parseFloat(convertedNumber, 10) : convertedNumber;
    },

    /**
     * Grammatical transformations, needed for inflected languages.
     * Invoked by putting {{grammar:form|word}} in a message.
     * Override this method for languages that need special grammar rules
     * applied dynamically.
     *
     * @param {string} word
     * @param {string} form
     * @return {string}
     */
    convertGrammar: function convertGrammar(word, form) {
      /*jshint unused: false */
      return word;
    },

    /**
     * Provides an alternative text depending on specified gender. Usage
     * {{gender:[gender|user object]|masculine|feminine|neutral}}. If second
     * or third parameter are not specified, masculine is used.
     *
     * These details may be overriden per language.
     *
     * @param {string} gender
     *      male, female, or anything else for neutral.
     * @param {Array} forms
     *      List of gender forms
     *
     * @return {string}
     */
    gender: function gender(_gender, forms) {
      if (!forms || forms.length === 0) {
        return '';
      }

      while (forms.length < 2) {
        forms.push(forms[forms.length - 1]);
      }

      if (_gender === 'male') {
        return forms[0];
      }

      if (_gender === 'female') {
        return forms[1];
      }

      return forms.length === 3 ? forms[2] : forms[0];
    },

    /**
     * Get the digit transform table for the given language
     * See http://cldr.unicode.org/translation/numbering-systems
     *
     * @param {string} language
     * @return {Array|boolean} List of digits in the passed language or false
     * representation, or boolean false if there is no information.
     */
    digitTransformTable: function digitTransformTable(language) {
      var tables = {
        ar: '٠١٢٣٤٥٦٧٨٩',
        fa: '۰۱۲۳۴۵۶۷۸۹',
        ml: '൦൧൨൩൪൫൬൭൮൯',
        kn: '೦೧೨೩೪೫೬೭೮೯',
        lo: '໐໑໒໓໔໕໖໗໘໙',
        or: '୦୧୨୩୪୫୬୭୮୯',
        kh: '០១២៣៤៥៦៧៨៩',
        pa: '੦੧੨੩੪੫੬੭੮੯',
        gu: '૦૧૨૩૪૫૬૭૮૯',
        hi: '०१२३४५६७८९',
        my: '၀၁၂၃၄၅၆၇၈၉',
        ta: '௦௧௨௩௪௫௬௭௮௯',
        te: '౦౧౨౩౪౫౬౭౮౯',
        th: '๐๑๒๓๔๕๖๗๘๙',
        // FIXME use iso 639 codes
        bo: '༠༡༢༣༤༥༦༧༨༩' // FIXME use iso 639 codes

      };

      if (!tables[language]) {
        return false;
      }

      return tables[language].split('');
    }
  };
  $.extend($.i18n.languages, {
    'default': language
  });
})(jQuery);
/**
 * cldrpluralparser.js
 * A parser engine for CLDR plural rules.
 *
 * Copyright 2012-2014 Santhosh Thottingal and other contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 * @version 0.1.0
 * @source https://github.com/santhoshtr/CLDRPluralRuleParser
 * @author Santhosh Thottingal <santhosh.thottingal@gmail.com>
 * @author Timo Tijhof
 * @author Amir Aharoni
 */

/**
 * Evaluates a plural rule in CLDR syntax for a number
 * @param {string} rule
 * @param {integer} number
 * @return {boolean} true if evaluation passed, false if evaluation failed.
 */
// UMD returnExports https://github.com/umdjs/umd/blob/master/returnExports.js


(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  window.pluralRuleParser = function (rule, number) {
    'use strict';
    /*
    Syntax: see http://unicode.org/reports/tr35/#Language_Plural_Rules
    -----------------------------------------------------------------
    condition     = and_condition ('or' and_condition)*
    	('@integer' samples)?
    	('@decimal' samples)?
    and_condition = relation ('and' relation)*
    relation      = is_relation | in_relation | within_relation
    is_relation   = expr 'is' ('not')? value
    in_relation   = expr (('not')? 'in' | '=' | '!=') range_list
    within_relation = expr ('not')? 'within' range_list
    expr          = operand (('mod' | '%') value)?
    operand       = 'n' | 'i' | 'f' | 't' | 'v' | 'w'
    range_list    = (range | value) (',' range_list)*
    value         = digit+
    digit         = 0|1|2|3|4|5|6|7|8|9
    range         = value'..'value
    samples       = sampleRange (',' sampleRange)* (',' ('…'|'...'))?
    sampleRange   = decimalValue '~' decimalValue
    decimalValue  = value ('.' value)?
    */
    // We don't evaluate the samples section of the rule. Ignore it.

    rule = rule.split('@')[0].replace(/^\s*/, '').replace(/\s*$/, '');

    if (!rule.length) {
      // Empty rule or 'other' rule.
      return true;
    } // Indicates the current position in the rule as we parse through it.
    // Shared among all parsing functions below.


    var pos = 0,
        operand,
        expression,
        relation,
        result,
        whitespace = makeRegexParser(/^\s+/),
        value = makeRegexParser(/^\d+/),
        _n_ = makeStringParser('n'),
        _i_ = makeStringParser('i'),
        _f_ = makeStringParser('f'),
        _t_ = makeStringParser('t'),
        _v_ = makeStringParser('v'),
        _w_ = makeStringParser('w'),
        _is_ = makeStringParser('is'),
        _isnot_ = makeStringParser('is not'),
        _isnot_sign_ = makeStringParser('!='),
        _equal_ = makeStringParser('='),
        _mod_ = makeStringParser('mod'),
        _percent_ = makeStringParser('%'),
        _not_ = makeStringParser('not'),
        _in_ = makeStringParser('in'),
        _within_ = makeStringParser('within'),
        _range_ = makeStringParser('..'),
        _comma_ = makeStringParser(','),
        _or_ = makeStringParser('or'),
        _and_ = makeStringParser('and');

    function debug() {// console.log.apply(console, arguments);
    }

    debug('pluralRuleParser', rule, number); // Try parsers until one works, if none work return null

    function choice(parserSyntax) {
      return function () {
        var i, result;

        for (i = 0; i < parserSyntax.length; i++) {
          result = parserSyntax[i]();

          if (result !== null) {
            return result;
          }
        }

        return null;
      };
    } // Try several parserSyntax-es in a row.
    // All must succeed; otherwise, return null.
    // This is the only eager one.


    function sequence(parserSyntax) {
      var i,
          parserRes,
          originalPos = pos,
          result = [];

      for (i = 0; i < parserSyntax.length; i++) {
        parserRes = parserSyntax[i]();

        if (parserRes === null) {
          pos = originalPos;
          return null;
        }

        result.push(parserRes);
      }

      return result;
    } // Run the same parser over and over until it fails.
    // Must succeed a minimum of n times; otherwise, return null.


    function nOrMore(n, p) {
      return function () {
        var originalPos = pos,
            result = [],
            parsed = p();

        while (parsed !== null) {
          result.push(parsed);
          parsed = p();
        }

        if (result.length < n) {
          pos = originalPos;
          return null;
        }

        return result;
      };
    } // Helpers - just make parserSyntax out of simpler JS builtin types


    function makeStringParser(s) {
      var len = s.length;
      return function () {
        var result = null;

        if (rule.substr(pos, len) === s) {
          result = s;
          pos += len;
        }

        return result;
      };
    }

    function makeRegexParser(regex) {
      return function () {
        var matches = rule.substr(pos).match(regex);

        if (matches === null) {
          return null;
        }

        pos += matches[0].length;
        return matches[0];
      };
    }
    /**
     * Integer digits of n.
     */


    function i() {
      var result = _i_();

      if (result === null) {
        debug(' -- failed i', parseInt(number, 10));
        return result;
      }

      result = parseInt(number, 10);
      debug(' -- passed i ', result);
      return result;
    }
    /**
     * Absolute value of the source number (integer and decimals).
     */


    function n() {
      var result = _n_();

      if (result === null) {
        debug(' -- failed n ', number);
        return result;
      }

      result = parseFloat(number, 10);
      debug(' -- passed n ', result);
      return result;
    }
    /**
     * Visible fractional digits in n, with trailing zeros.
     */


    function f() {
      var result = _f_();

      if (result === null) {
        debug(' -- failed f ', number);
        return result;
      }

      result = (number + '.').split('.')[1] || 0;
      debug(' -- passed f ', result);
      return result;
    }
    /**
     * Visible fractional digits in n, without trailing zeros.
     */


    function t() {
      var result = _t_();

      if (result === null) {
        debug(' -- failed t ', number);
        return result;
      }

      result = (number + '.').split('.')[1].replace(/0$/, '') || 0;
      debug(' -- passed t ', result);
      return result;
    }
    /**
     * Number of visible fraction digits in n, with trailing zeros.
     */


    function v() {
      var result = _v_();

      if (result === null) {
        debug(' -- failed v ', number);
        return result;
      }

      result = (number + '.').split('.')[1].length || 0;
      debug(' -- passed v ', result);
      return result;
    }
    /**
     * Number of visible fraction digits in n, without trailing zeros.
     */


    function w() {
      var result = _w_();

      if (result === null) {
        debug(' -- failed w ', number);
        return result;
      }

      result = (number + '.').split('.')[1].replace(/0$/, '').length || 0;
      debug(' -- passed w ', result);
      return result;
    } // operand       = 'n' | 'i' | 'f' | 't' | 'v' | 'w'


    operand = choice([n, i, f, t, v, w]); // expr          = operand (('mod' | '%') value)?

    expression = choice([mod, operand]);

    function mod() {
      var result = sequence([operand, whitespace, choice([_mod_, _percent_]), whitespace, value]);

      if (result === null) {
        debug(' -- failed mod');
        return null;
      }

      debug(' -- passed ' + parseInt(result[0], 10) + ' ' + result[2] + ' ' + parseInt(result[4], 10));
      return parseInt(result[0], 10) % parseInt(result[4], 10);
    }

    function not() {
      var result = sequence([whitespace, _not_]);

      if (result === null) {
        debug(' -- failed not');
        return null;
      }

      return result[1];
    } // is_relation   = expr 'is' ('not')? value


    function is() {
      var result = sequence([expression, whitespace, choice([_is_]), whitespace, value]);

      if (result !== null) {
        debug(' -- passed is : ' + result[0] + ' == ' + parseInt(result[4], 10));
        return result[0] === parseInt(result[4], 10);
      }

      debug(' -- failed is');
      return null;
    } // is_relation   = expr 'is' ('not')? value


    function isnot() {
      var result = sequence([expression, whitespace, choice([_isnot_, _isnot_sign_]), whitespace, value]);

      if (result !== null) {
        debug(' -- passed isnot: ' + result[0] + ' != ' + parseInt(result[4], 10));
        return result[0] !== parseInt(result[4], 10);
      }

      debug(' -- failed isnot');
      return null;
    }

    function not_in() {
      var i,
          range_list,
          result = sequence([expression, whitespace, _isnot_sign_, whitespace, rangeList]);

      if (result !== null) {
        debug(' -- passed not_in: ' + result[0] + ' != ' + result[4]);
        range_list = result[4];

        for (i = 0; i < range_list.length; i++) {
          if (parseInt(range_list[i], 10) === parseInt(result[0], 10)) {
            return false;
          }
        }

        return true;
      }

      debug(' -- failed not_in');
      return null;
    } // range_list    = (range | value) (',' range_list)*


    function rangeList() {
      var result = sequence([choice([range, value]), nOrMore(0, rangeTail)]),
          resultList = [];

      if (result !== null) {
        resultList = resultList.concat(result[0]);

        if (result[1][0]) {
          resultList = resultList.concat(result[1][0]);
        }

        return resultList;
      }

      debug(' -- failed rangeList');
      return null;
    }

    function rangeTail() {
      // ',' range_list
      var result = sequence([_comma_, rangeList]);

      if (result !== null) {
        return result[1];
      }

      debug(' -- failed rangeTail');
      return null;
    } // range         = value'..'value


    function range() {
      var i,
          array,
          left,
          right,
          result = sequence([value, _range_, value]);

      if (result !== null) {
        debug(' -- passed range');
        array = [];
        left = parseInt(result[0], 10);
        right = parseInt(result[2], 10);

        for (i = left; i <= right; i++) {
          array.push(i);
        }

        return array;
      }

      debug(' -- failed range');
      return null;
    }

    function _in() {
      var result, range_list, i; // in_relation   = expr ('not')? 'in' range_list

      result = sequence([expression, nOrMore(0, not), whitespace, choice([_in_, _equal_]), whitespace, rangeList]);

      if (result !== null) {
        debug(' -- passed _in:' + result);
        range_list = result[5];

        for (i = 0; i < range_list.length; i++) {
          if (parseInt(range_list[i], 10) === parseInt(result[0], 10)) {
            return result[1][0] !== 'not';
          }
        }

        return result[1][0] === 'not';
      }

      debug(' -- failed _in ');
      return null;
    }
    /**
     * The difference between "in" and "within" is that
     * "in" only includes integers in the specified range,
     * while "within" includes all values.
     */


    function within() {
      var range_list, result; // within_relation = expr ('not')? 'within' range_list

      result = sequence([expression, nOrMore(0, not), whitespace, _within_, whitespace, rangeList]);

      if (result !== null) {
        debug(' -- passed within');
        range_list = result[5];

        if (result[0] >= parseInt(range_list[0], 10) && result[0] < parseInt(range_list[range_list.length - 1], 10)) {
          return result[1][0] !== 'not';
        }

        return result[1][0] === 'not';
      }

      debug(' -- failed within ');
      return null;
    } // relation      = is_relation | in_relation | within_relation


    relation = choice([is, not_in, isnot, _in, within]); // and_condition = relation ('and' relation)*

    function and() {
      var i,
          result = sequence([relation, nOrMore(0, andTail)]);

      if (result) {
        if (!result[0]) {
          return false;
        }

        for (i = 0; i < result[1].length; i++) {
          if (!result[1][i]) {
            return false;
          }
        }

        return true;
      }

      debug(' -- failed and');
      return null;
    } // ('and' relation)*


    function andTail() {
      var result = sequence([whitespace, _and_, whitespace, relation]);

      if (result !== null) {
        debug(' -- passed andTail' + result);
        return result[3];
      }

      debug(' -- failed andTail');
      return null;
    } //  ('or' and_condition)*


    function orTail() {
      var result = sequence([whitespace, _or_, whitespace, and]);

      if (result !== null) {
        debug(' -- passed orTail: ' + result[3]);
        return result[3];
      }

      debug(' -- failed orTail');
      return null;
    } // condition     = and_condition ('or' and_condition)*


    function condition() {
      var i,
          result = sequence([and, nOrMore(0, orTail)]);

      if (result) {
        for (i = 0; i < result[1].length; i++) {
          if (result[1][i]) {
            return true;
          }
        }

        return result[0];
      }

      return false;
    }

    result = condition();
    /**
     * For success, the pos must have gotten to the end of the rule
     * and returned a non-null.
     * n.b. This is part of language infrastructure,
     * so we do not throw an internationalizable message.
     */

    if (result === null) {
      throw new Error('Parse error at position ' + pos.toString() + ' for rule: ' + rule);
    }

    if (pos !== rule.length) {
      debug('Warning: Rule not parsed completely. Parser stopped at ' + rule.substr(0, pos) + ' for rule: ' + rule);
    }

    return result;
  };

  return pluralRuleParser;
});

/***/ }),

/***/ "./node_modules/core-js/internals/a-function.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var UNSCOPABLES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('unscopables');
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  hide(ArrayPrototype, UNSCOPABLES, create(null));
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/internals/advance-string-index.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var codePointAt = __webpack_require__(/*! ../internals/string-at */ "./node_modules/core-js/internals/string-at.js");

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? codePointAt(S, index, true).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-fill.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-fill.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-for-each.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativeForEach = [].forEach;
var internalForEach = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js")(0);

var SLOPPY_METHOD = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js")('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = SLOPPY_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return internalForEach(this, callbackfn, arguments[1]);
} : nativeForEach;


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
// false -> Array#indexOf
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
// true  -> Array#includes
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var SPECIES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('species');

module.exports = function (METHOD_NAME) {
  return !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-methods.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/array-methods.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
// 0 -> Array#forEach
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
// 1 -> Array#map
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// 2 -> Array#filter
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// 3 -> Array#some
// https://tc39.github.io/ecma262/#sec-array.prototype.some
// 4 -> Array#every
// https://tc39.github.io/ecma262/#sec-array.prototype.every
// 5 -> Array#find
// https://tc39.github.io/ecma262/#sec-array.prototype.find
// 6 -> Array#findIndex
// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
module.exports = function (TYPE, specificCreate) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = specificCreate || arraySpeciesCreate;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: target.push(value);       // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-reduce.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/array-reduce.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `Array.prototype.{ reduce, reduceRight }` methods implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
module.exports = function (that, callbackfn, argumentsLength, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IndexedObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (argumentsLength < 2) while (true) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-species-create.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var SPECIES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/bind-context.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/bind-context.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var TO_STRING_TAG = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/date-to-iso-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/date-to-iso-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var prototype = Date.prototype;
var getTime = prototype.getTime;
var nativeDateToISOString = prototype.toISOString;

var leadingZero = function (number) {
  return number > 9 ? number : '0' + number;
};

// `Date.prototype.toISOString` method implementation
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = (fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var date = this;
  var year = date.getUTCFullYear();
  var milliseconds = date.getUTCMilliseconds();
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + ('00000' + Math.abs(year)).slice(sign ? -6 : -4) +
    '-' + leadingZero(date.getUTCMonth() + 1) +
    '-' + leadingZero(date.getUTCDate()) +
    'T' + leadingZero(date.getUTCHours()) +
    ':' + leadingZero(date.getUTCMinutes()) +
    ':' + leadingZero(date.getUTCSeconds()) +
    '.' + (milliseconds > 99 ? milliseconds : '0' + leadingZero(milliseconds)) +
    'Z';
} : nativeDateToISOString;


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var ITERATOR = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('iterator');
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          hide(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    hide(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-well-known-symbol.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/wrapped-well-known-symbol */ "./node_modules/core-js/internals/wrapped-well-known-symbol.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var document = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").document;
// typeof document.createElement is 'object' in old IE
var exist = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return exist ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/enum-keys.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/enum-keys.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");

// all enumerable object keys, includes symbols
module.exports = function (it) {
  var result = objectKeys(it);
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  if (getOwnPropertySymbols) {
    var symbols = getOwnPropertySymbols(it);
    var propertyIsEnumerable = propertyIsEnumerableModule.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      hide(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };

    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/forced-string-trim-method.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/forced-string-trim-method.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");
var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var arraySlice = [].slice;
var factories = {};

var construct = function (C, argsLength, args) {
  if (!(argsLength in factories)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
  };
  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
  return boundFunction;
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/function-to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js")('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports = typeof window == 'object' && window && window.Math == Math ? window
  : typeof self == 'object' && self && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();


/***/ }),

/***/ "./node_modules/core-js/internals/has.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/hide.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/hide.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js") ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").document;

module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js") && !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js")('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var split = ''.split;

module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "./node_modules/core-js/internals/inherit-if-required.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");

module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var WeakMap = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    hide(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/is-regexp.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-regexp.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var MATCH = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var ITERATOR = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/math-sign.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/math-sign.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// `Math.sign` method implementation
// https://tc39.github.io/ecma262/#sec-math.sign
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Chrome 38 Symbol has incorrect toString conversion
module.exports = !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");
var WeakMap = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/object-assign.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var nativeAssign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !nativeAssign || __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (propertyIsEnumerable.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : nativeAssign;


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var IE_PROTO = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js")('IE_PROTO');
var PROTOTYPE = 'prototype';
var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var length = enumBugKeys.length;
  var lt = '<';
  var script = 'script';
  var gt = '>';
  var js = 'java' + script + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = String(js);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

__webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js")[IE_PROTO] = true;


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var key;
  while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var nativeDefineProperty = Object.defineProperty;

exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names-external.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var nativeGetOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var IE_PROTO = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js")('IE_PROTO');
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");
var ObjectPrototype = Object.prototype;

module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var arrayIndexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js")(false);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = nativeGetOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = nativeGetOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var validateSetPrototypeOfArguments = __webpack_require__(/*! ../internals/validate-set-prototype-of-arguments */ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js");

module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var correctSetter = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    correctSetter = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    validateSetPrototypeOfArguments(O, proto);
    if (correctSetter) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var TO_STRING_TAG = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = String(test) !== '[object z]' ? function toString() {
  return '[object ' + classof(this) + ']';
} : test.toString;


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var Reflect = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").Reflect;

// all object keys, includes non-enumerable and symbols
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/parse-float.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/parse-float.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeParseFloat = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").parseFloat;
var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");
var FORCED = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

module.exports = FORCED ? function parseFloat(str) {
  var string = internalStringTrim(String(str), 3);
  var result = nativeParseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : nativeParseFloat;


/***/ }),

/***/ "./node_modules/core-js/internals/parse-int.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/parse-int.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeParseInt = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").parseInt;
var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");
var hex = /^[-+]?0[xX]/;
var FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

module.exports = FORCED ? function parseInt(str, radix) {
  var string = internalStringTrim(String(str), 3);
  return nativeParseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : nativeParseInt;


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");


/***/ }),

/***/ "./node_modules/core-js/internals/redefine.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(nativeFunctionToString).split('toString');

__webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js")('inspectSource', function (it) {
  return nativeFunctionToString.call(it);
});

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var regexpExec = __webpack_require__(/*! ./regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-flags.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/same-value.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/same-value.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// `SameValue` abstract operation
// https://tc39.github.io/ecma262/#sec-samevalue
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-global.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

module.exports = function (key, value) {
  try {
    hide(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var SPECIES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var C = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;
  if (DESCRIPTORS && C && !C[SPECIES]) defineProperty(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var TO_STRING_TAG = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js")('keys');
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.0.1',
  mode: __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/internals/sloppy-array-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/sloppy-array-method.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !method || !fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/species-constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
var SPECIES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-at.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/string-at.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
// CONVERT_TO_STRING: true  -> String#at
// CONVERT_TO_STRING: false -> String#codePointAt
module.exports = function (that, pos, CONVERT_TO_STRING) {
  var S = String(requireObjectCoercible(that));
  var position = toInteger(pos);
  var size = S.length;
  var first, second;
  if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
  first = S.charCodeAt(position);
  return first < 0xD800 || first > 0xDBFF || position + 1 === size
    || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
      ? CONVERT_TO_STRING ? S.charAt(position) : first
      : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-repeat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/string-repeat.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-trim.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var whitespace = '[' + __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js") + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// 1 -> String#trimStart
// 2 -> String#trimEnd
// 3 -> String#trim
module.exports = function (string, TYPE) {
  string = String(requireObjectCoercible(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};


/***/ }),

/***/ "./node_modules/core-js/internals/this-number-value.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/this-number-value.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/internals/user-agent.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/user-agent.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/internals/validate-set-prototype-of-arguments.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

module.exports = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) {
    throw TypeError("Can't set " + String(proto) + ' as a prototype');
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js")('wks');
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var Symbol = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").Symbol;
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

module.exports = function (name) {
  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};


/***/ }),

/***/ "./node_modules/core-js/internals/whitespaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/internals/wrapped-well-known-symbol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/wrapped-well-known-symbol.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.concat.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var IS_CONCAT_SPREADABLE = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

var IS_CONCAT_SPREADABLE_SUPPORT = !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js")('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.fill.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.fill.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true }, { fill: __webpack_require__(/*! ../internals/array-fill */ "./node_modules/core-js/internals/array-fill.js") });

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
__webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js")('fill');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.filter.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalFilter = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js")(2);

var SPECIES_SUPPORT = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js")('filter');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return internalFilter(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.find-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find-index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalFindIndex = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js")(6);
var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return internalFindIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
__webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js")(FIND_INDEX);


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.find.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalFind = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js")(5);
var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
__webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js")(FIND);


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.for-each.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: [].forEach != forEach }, { forEach: forEach });


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.index-of.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.index-of.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalIndexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js")(false);
var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var SLOPPY_METHOD = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js")('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : internalIndexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.is-array.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.is-array.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Array.isArray` method
// https://tc39.github.io/ecma262/#sec-array.isarray
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', stat: true }, { isArray: __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.join.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.join.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var nativeJoin = [].join;

var ES3_STRINGS = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js") != Object;
var SLOPPY_METHOD = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js")('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalMap = __webpack_require__(/*! ../internals/array-methods */ "./node_modules/core-js/internals/array-methods.js")(1);

var SPECIES_SUPPORT = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js")('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
  map: function map(callbackfn /* , thisArg */) {
    return internalMap(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.reduce.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.reduce.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalReduce = __webpack_require__(/*! ../internals/array-reduce */ "./node_modules/core-js/internals/array-reduce.js");

var SLOPPY_METHOD = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js")('reduce');

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: SLOPPY_METHOD }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return internalReduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.slice.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.slice.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var SPECIES = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('species');
var nativeSlice = [].slice;
var max = Math.max;

var SPECIES_SUPPORT = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js")('slice');

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.sort.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.sort.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var nativeSort = [].sort;
var test = [1, 2, 3];

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var SLOPPY_METHOD = __webpack_require__(/*! ../internals/sloppy-array-method */ "./node_modules/core-js/internals/sloppy-array-method.js")('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.splice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.splice.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

var SPECIES_SUPPORT = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js")('splice');

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.date.now.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es.date.now.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Date.now` method
// https://tc39.github.io/ecma262/#sec-date.now
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Date', stat: true }, {
  now: function now() {
    return new Date().getTime();
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.date.to-iso-string.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.date.to-iso-string.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toISOString = __webpack_require__(/*! ../internals/date-to-iso-string */ "./node_modules/core-js/internals/date-to-iso-string.js");

// `Date.prototype.toISOString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {
  toISOString: toISOString
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.date.to-string.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.date.to-string.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js")(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.function.bind.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.bind.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Function.prototype.bind` method
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Function', proto: true }, {
  bind: __webpack_require__(/*! ../internals/function-bind */ "./node_modules/core-js/internals/function-bind.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.math.log10.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.math.log10.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var log = Math.log;
var LOG10E = Math.LOG10E;

// `Math.log10` method
// https://tc39.github.io/ecma262/#sec-math.log10
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Math', stat: true }, {
  log10: function log10(x) {
    return log(x) * LOG10E;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.math.sign.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.math.sign.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Math.sign` method
// https://tc39.github.io/ecma262/#sec-math.sign
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Math', stat: true }, { sign: __webpack_require__(/*! ../internals/math-sign */ "./node_modules/core-js/internals/math-sign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(__webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js")(NumberPrototype)) == NUMBER;
var NATIVE_TRIM = 'trim' in String.prototype;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, i, code;
  if (typeof it == 'string' && it.length > 2) {
    it = NATIVE_TRIM ? it.trim() : internalStringTrim(it, 3);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (i = 0; i < length; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(that); }) : classof(that) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);
  };
  for (var keys = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js") ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js")(global, NUMBER, NumberWrapper);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.epsilon.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.epsilon.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Number.EPSILON` constant
// https://tc39.github.io/ecma262/#sec-number.epsilon
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Number', stat: true }, { EPSILON: Math.pow(2, -52) });


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.max-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.max-safe-integer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Number', stat: true }, { MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF });


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.min-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.min-safe-integer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Number', stat: true }, { MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF });


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.to-fixed.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.to-fixed.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var thisNumberValue = __webpack_require__(/*! ../internals/this-number-value */ "./node_modules/core-js/internals/this-number-value.js");
var repeat = __webpack_require__(/*! ../internals/string-repeat */ "./node_modules/core-js/internals/string-repeat.js");
var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};

var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
    }
  } return s;
};

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Number', proto: true, forced: nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
}) }, {
  toFixed: function toFixed(fractionDigits) {
    var x = thisNumberValue(this);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = '0';
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call('0', f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call('0', f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.assign.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Object', stat: true, forced: Object.assign !== assign }, { assign: assign });


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.define-property.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.define-property.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var nativeKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var FAILS_ON_PRIMITIVES = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js")(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");
var ObjectPrototype = Object.prototype;

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (toString !== ObjectPrototype.toString) {
  __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js")(ObjectPrototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.parse-float.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.parse-float.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parseFloatImplementation = __webpack_require__(/*! ../internals/parse-float */ "./node_modules/core-js/internals/parse-float.js");

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ global: true, forced: parseFloat != parseFloatImplementation }, {
  parseFloat: parseFloatImplementation
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.parse-int.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.parse-int.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parseIntImplementation = __webpack_require__(/*! ../internals/parse-int */ "./node_modules/core-js/internals/parse-int.js");

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ global: true, forced: parseInt != parseIntImplementation }, {
  parseInt: parseIntImplementation
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.constructor.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var MATCH = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js")('match');
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
var getFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var FORCED = isForced('RegExp', DESCRIPTORS && (!CORRECT_NEW || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
      : inheritIfRequired(CORRECT_NEW
        ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
        : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
          ? pattern.source
          : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags)
      , thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var i = 0;
  while (i < keys.length) proxy(keys[i++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
__webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js")('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.exec.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
  exec: regexpExec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var flags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var TO_STRING = 'toString';
var nativeToString = /./[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js")(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? flags.call(R) : undefined);
  }, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var codePointAt = __webpack_require__(/*! ../internals/string-at */ "./node_modules/core-js/internals/string-at.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = codePointAt(string, index, true);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.match.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.match.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

// @@match logic
__webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js")(
  'match',
  1,
  function (MATCH, nativeMatch, maybeCallNative) {
    return [
      // `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = requireObjectCoercible(this);
        var matcher = regexp == undefined ? undefined : regexp[MATCH];
        return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      },
      // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative(nativeMatch, regexp, this);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        if (!rx.global) return regExpExec(rx, S);

        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;
        while ((result = regExpExec(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          n++;
        }
        return n === 0 ? null : A;
      }
    ];
  }
);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.replace.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js")(
  'replace',
  2,
  function (REPLACE, nativeReplace, maybeCallNative) {
    return [
      // `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
        return replacer !== undefined
          ? replacer.call(searchValue, O, replaceValue)
          : nativeReplace.call(String(O), searchValue, replaceValue);
      },
      // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);

        var global = rx.global;
        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }
        var results = [];
        while (true) {
          var result = regExpExec(rx, S);
          if (result === null) break;

          results.push(result);
          if (!global) break;

          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        }

        var accumulatedResult = '';
        var nextSourcePosition = 0;
        for (var i = 0; i < results.length; i++) {
          result = results[i];

          var matched = String(result[0]);
          var position = max(min(toInteger(result.index), S.length), 0);
          var captures = [];
          // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
          var namedCaptures = result.groups;
          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }
          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }
        return accumulatedResult + S.slice(nextSourcePosition);
      }
    ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== undefined) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return nativeReplace.call(replacement, symbols, function (match, ch) {
        var capture;
        switch (ch.charAt(0)) {
          case '$': return '$';
          case '&': return matched;
          case '`': return str.slice(0, position);
          case "'": return str.slice(tailPos);
          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;
          default: // \d\d?
            var n = +ch;
            if (n === 0) return match;
            if (n > m) {
              var f = floor(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
      });
    }
  }
);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.search.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.search.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var sameValue = __webpack_require__(/*! ../internals/same-value */ "./node_modules/core-js/internals/same-value.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

// @@search logic
__webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js")(
  'search',
  1,
  function (SEARCH, nativeSearch, maybeCallNative) {
    return [
      // `String.prototype.search` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.search
      function search(regexp) {
        var O = requireObjectCoercible(this);
        var searcher = regexp == undefined ? undefined : regexp[SEARCH];
        return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      },
      // `RegExp.prototype[@@search]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
      function (regexp) {
        var res = maybeCallNative(nativeSearch, regexp, this);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        var previousLastIndex = rx.lastIndex;
        if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
        var result = regExpExec(rx, S);
        if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
        return result === null ? -1 : result.index;
      }
    ];
  }
);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.split.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.split.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var callRegExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js")(
  'split',
  2,
  function (SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;
    if (
      'abbc'.split(/(b)*/)[1] == 'c' ||
      'test'.split(/(?:)/, -1).length != 4 ||
      'ab'.split(/(?:ab)*/).length != 2 ||
      '.'.split(/(.?)(.?)/).length != 4 ||
      '.'.split(/()()/).length > 1 ||
      ''.split(/.?/).length
    ) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function (separator, limit) {
        var string = String(requireObjectCoercible(this));
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [string];
        // If `separator` is not a regex, use native split
        if (!isRegExp(separator)) {
          return nativeSplit.call(string, separator, lim);
        }
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while (match = regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy.lastIndex;
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
            lastLength = match[0].length;
            lastLastIndex = lastIndex;
            if (output.length >= lim) break;
          }
          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }
        if (lastLastIndex === string.length) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output.length > lim ? output.slice(0, lim) : output;
      };
    // Chakra, V8
    } else if ('0'.split(undefined, 0).length) {
      internalSplit = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
      };
    } else internalSplit = nativeSplit;

    return [
      // `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = requireObjectCoercible(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined
          ? splitter.call(separator, O, limit)
          : internalSplit.call(String(O), separator, limit);
      },
      // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);
        var C = speciesConstructor(rx, RegExp);

        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

        // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.
        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];
        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;
          if (
            z === null ||
            (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
          ) {
            q = advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;
            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }
            q = p = e;
          }
        }
        A.push(S.slice(p));
        return A;
      }
    ];
  },
  !SUPPORTS_Y
);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.trim.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.trim.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var internalStringTrim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js");
var FORCED = __webpack_require__(/*! ../internals/forced-string-trim-method */ "./node_modules/core-js/internals/forced-string-trim-method.js")('trim');

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ target: 'String', proto: true, forced: FORCED }, {
  trim: function trim() {
    return internalStringTrim(this, 3);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.description.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.description.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var NativeSymbol = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js").Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ global: true, forced: true }, { Symbol: SymbolWrapper });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
__webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js")('iterator');


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var $export = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/wrapped-well-known-symbol */ "./node_modules/core-js/internals/wrapped-well-known-symbol.js");
var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");
var enumKeys = __webpack_require__(/*! ../internals/enum-keys */ "./node_modules/core-js/internals/enum-keys.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var nativeObjectCreate = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getOwnPropertyNamesExternal = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var HIDDEN = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js")('hidden');
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var SYMBOL = 'Symbol';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var $Symbol = global.Symbol;
var JSON = global.JSON;
var nativeJSONStringify = JSON && JSON.stringify;
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');
var ObjectPrototype = Object[PROTOTYPE];
var QObject = global.QObject;
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, key);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];
  nativeDefineProperty(it, key, D);
  if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, key, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) nativeDefineProperty(it, HIDDEN, createPropertyDescriptor(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = nativeObjectCreate(D, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(it, key, D);
  } return nativeDefineProperty(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIndexedObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};

var $create = function create(it, P) {
  return P === undefined ? nativeObjectCreate(it) : $defineProperties(nativeObjectCreate(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = nativePropertyIsEnumerable.call(this, key = toPrimitive(key, true));
  if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIndexedObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var D = nativeGetOwnPropertyDescriptor(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);
  } return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js").f = $getOwnPropertySymbols;

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };
}

$export({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, { Symbol: $Symbol });

for (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {
  defineWellKnownSymbol(wellKnownSymbols[k++]);
}

$export({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
JSON && $export({ target: 'JSON', stat: true, forced: !NATIVE_SYMBOL || fails(function () {
  var symbol = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  return nativeJSONStringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || nativeJSONStringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || nativeJSONStringify(Object(symbol)) != '{}';
}) }, {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return nativeJSONStringify.apply(JSON, args);
  }
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    hide(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      hide(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/web.timers.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/user-agent */ "./node_modules/core-js/internals/user-agent.js");
var slice = [].slice;

var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};

__webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js")({ global: true, bind: true, forced: MSIE }, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),

/***/ 0:

  !*** multi ./assets/vendor/jquery.i18n/jquery.i18n.dist.js ./assets/vendor/Chart.min.js ./assets/vendor/bootstrap-typeahead.js ./assets/js/core_extensions.js ./assets/js/application.js ./assets/js/adminstats.js ./assets/js/articleinfo.js ./assets/js/authorship.js ./assets/js/autoedits.js ./assets/js/blame.js ./assets/js/categoryedits.js ./assets/js/editcounter.js ./assets/js/globalcontribs.js ./assets/js/pages.js ./assets/js/topedits.js ./assets/css/_mixins.scss ./assets/css/_rtl.scss ./assets/css/application.scss ./assets/css/about.scss ./assets/css/articleinfo.scss ./assets/css/autoedits.scss ./assets/css/blame.scss ./assets/css/categoryedits.scss ./assets/css/editcounter.scss ./assets/css/home.scss ./assets/css/meta.scss ./assets/css/pages.scss ./assets/css/topedits.scss ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./assets/vendor/jquery.i18n/jquery.i18n.dist.js */"./assets/vendor/jquery.i18n/jquery.i18n.dist.js");
__webpack_require__(/*! ./assets/vendor/Chart.min.js */"./assets/vendor/Chart.min.js");
__webpack_require__(/*! ./assets/vendor/bootstrap-typeahead.js */"./assets/vendor/bootstrap-typeahead.js");
__webpack_require__(/*! ./assets/js/core_extensions.js */"./assets/js/core_extensions.js");
__webpack_require__(/*! ./assets/js/application.js */"./assets/js/application.js");
__webpack_require__(/*! ./assets/js/adminstats.js */"./assets/js/adminstats.js");
__webpack_require__(/*! ./assets/js/articleinfo.js */"./assets/js/articleinfo.js");
__webpack_require__(/*! ./assets/js/authorship.js */"./assets/js/authorship.js");
__webpack_require__(/*! ./assets/js/autoedits.js */"./assets/js/autoedits.js");
__webpack_require__(/*! ./assets/js/blame.js */"./assets/js/blame.js");
__webpack_require__(/*! ./assets/js/categoryedits.js */"./assets/js/categoryedits.js");
__webpack_require__(/*! ./assets/js/editcounter.js */"./assets/js/editcounter.js");
__webpack_require__(/*! ./assets/js/globalcontribs.js */"./assets/js/globalcontribs.js");
__webpack_require__(/*! ./assets/js/pages.js */"./assets/js/pages.js");
__webpack_require__(/*! ./assets/js/topedits.js */"./assets/js/topedits.js");
__webpack_require__(/*! ./assets/css/_mixins.scss */"./assets/css/_mixins.scss");
__webpack_require__(/*! ./assets/css/_rtl.scss */"./assets/css/_rtl.scss");
__webpack_require__(/*! ./assets/css/application.scss */"./assets/css/application.scss");
__webpack_require__(/*! ./assets/css/about.scss */"./assets/css/about.scss");
__webpack_require__(/*! ./assets/css/articleinfo.scss */"./assets/css/articleinfo.scss");
__webpack_require__(/*! ./assets/css/autoedits.scss */"./assets/css/autoedits.scss");
__webpack_require__(/*! ./assets/css/blame.scss */"./assets/css/blame.scss");
__webpack_require__(/*! ./assets/css/categoryedits.scss */"./assets/css/categoryedits.scss");
__webpack_require__(/*! ./assets/css/editcounter.scss */"./assets/css/editcounter.scss");
__webpack_require__(/*! ./assets/css/home.scss */"./assets/css/home.scss");
__webpack_require__(/*! ./assets/css/meta.scss */"./assets/css/meta.scss");
__webpack_require__(/*! ./assets/css/pages.scss */"./assets/css/pages.scss");
module.exports = __webpack_require__(/*! ./assets/css/topedits.scss */"./assets/css/topedits.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,